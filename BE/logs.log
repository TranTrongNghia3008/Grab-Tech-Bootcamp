2025-05-03 08:07:29,597:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 08:07:29,597:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 08:07:29,597:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 08:07:29,597:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 08:08:02,771:INFO:PyCaret RegressionExperiment
2025-05-03 08:08:02,771:INFO:Logging name: automl_bigdata_exp
2025-05-03 08:08:02,771:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 08:08:02,771:INFO:version 3.3.2
2025-05-03 08:08:02,771:INFO:Initializing setup()
2025-05-03 08:08:02,771:INFO:self.USI: d46b
2025-05-03 08:08:02,771:INFO:self._variable_keys: {'X', 'exp_name_log', 'X_train', 'seed', 'target_param', 'fold_generator', 'pipeline', 'log_plots_param', '_available_plots', 'y', 'n_jobs_param', 'fold_groups_param', 'gpu_n_jobs_param', 'gpu_param', 'html_param', 'idx', 'USI', 'X_test', 'exp_id', '_ml_usecase', 'memory', 'logging_param', 'y_test', 'data', 'y_train', 'fold_shuffle_param', 'transform_target_param'}
2025-05-03 08:08:02,771:INFO:Checking environment
2025-05-03 08:08:02,771:INFO:python_version: 3.10.11
2025-05-03 08:08:02,771:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 08:08:02,771:INFO:machine: AMD64
2025-05-03 08:08:02,783:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 08:08:02,783:INFO:Memory: svmem(total=8403075072, available=883634176, percent=89.5, used=7519440896, free=883634176)
2025-05-03 08:08:02,783:INFO:Physical Core: 6
2025-05-03 08:08:02,783:INFO:Logical Core: 12
2025-05-03 08:08:02,783:INFO:Checking libraries
2025-05-03 08:08:02,783:INFO:System:
2025-05-03 08:08:02,783:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 08:08:02,783:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 08:08:02,783:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 08:08:02,783:INFO:PyCaret required dependencies:
2025-05-03 08:08:02,963:INFO:                 pip: 23.0.1
2025-05-03 08:08:02,965:INFO:          setuptools: 65.5.0
2025-05-03 08:08:02,965:INFO:             pycaret: 3.3.2
2025-05-03 08:08:02,965:INFO:             IPython: 8.36.0
2025-05-03 08:08:02,965:INFO:          ipywidgets: 8.1.6
2025-05-03 08:08:02,965:INFO:                tqdm: 4.67.1
2025-05-03 08:08:02,965:INFO:               numpy: 1.26.4
2025-05-03 08:08:02,965:INFO:              pandas: 1.5.3
2025-05-03 08:08:02,965:INFO:              jinja2: 3.1.6
2025-05-03 08:08:02,965:INFO:               scipy: 1.11.4
2025-05-03 08:08:02,965:INFO:              joblib: 1.3.2
2025-05-03 08:08:02,965:INFO:             sklearn: 1.4.2
2025-05-03 08:08:02,965:INFO:                pyod: 2.0.4
2025-05-03 08:08:02,965:INFO:            imblearn: 0.13.0
2025-05-03 08:08:02,965:INFO:   category_encoders: 2.7.0
2025-05-03 08:08:02,965:INFO:            lightgbm: 4.6.0
2025-05-03 08:08:02,965:INFO:               numba: 0.61.0
2025-05-03 08:08:02,965:INFO:            requests: 2.32.3
2025-05-03 08:08:02,965:INFO:          matplotlib: 3.7.5
2025-05-03 08:08:02,965:INFO:          scikitplot: 0.3.7
2025-05-03 08:08:02,965:INFO:         yellowbrick: 1.5
2025-05-03 08:08:02,965:INFO:              plotly: 5.24.1
2025-05-03 08:08:02,965:INFO:    plotly-resampler: Not installed
2025-05-03 08:08:02,965:INFO:             kaleido: 0.2.1
2025-05-03 08:08:02,965:INFO:           schemdraw: 0.15
2025-05-03 08:08:02,965:INFO:         statsmodels: 0.14.4
2025-05-03 08:08:02,965:INFO:              sktime: 0.26.0
2025-05-03 08:08:02,965:INFO:               tbats: 1.1.3
2025-05-03 08:08:02,965:INFO:            pmdarima: 2.0.4
2025-05-03 08:08:02,965:INFO:              psutil: 7.0.0
2025-05-03 08:08:02,965:INFO:          markupsafe: 3.0.2
2025-05-03 08:08:02,965:INFO:             pickle5: Not installed
2025-05-03 08:08:02,965:INFO:         cloudpickle: 2.2.1
2025-05-03 08:08:02,965:INFO:         deprecation: 2.1.0
2025-05-03 08:08:02,965:INFO:              xxhash: 3.5.0
2025-05-03 08:08:02,965:INFO:           wurlitzer: Not installed
2025-05-03 08:08:02,965:INFO:PyCaret optional dependencies:
2025-05-03 08:08:02,978:INFO:                shap: 0.47.2
2025-05-03 08:08:02,978:INFO:           interpret: Not installed
2025-05-03 08:08:02,978:INFO:                umap: Not installed
2025-05-03 08:08:02,978:INFO:     ydata_profiling: 4.16.1
2025-05-03 08:08:02,978:INFO:  explainerdashboard: Not installed
2025-05-03 08:08:02,978:INFO:             autoviz: Not installed
2025-05-03 08:08:02,978:INFO:           fairlearn: Not installed
2025-05-03 08:08:02,978:INFO:          deepchecks: Not installed
2025-05-03 08:08:02,978:INFO:             xgboost: Not installed
2025-05-03 08:08:02,978:INFO:            catboost: Not installed
2025-05-03 08:08:02,978:INFO:              kmodes: Not installed
2025-05-03 08:08:02,978:INFO:             mlxtend: Not installed
2025-05-03 08:08:02,978:INFO:       statsforecast: Not installed
2025-05-03 08:08:02,978:INFO:        tune_sklearn: Not installed
2025-05-03 08:08:02,978:INFO:                 ray: Not installed
2025-05-03 08:08:02,978:INFO:            hyperopt: Not installed
2025-05-03 08:08:02,978:INFO:              optuna: 4.3.0
2025-05-03 08:08:02,978:INFO:               skopt: Not installed
2025-05-03 08:08:02,978:INFO:              mlflow: 1.30.0
2025-05-03 08:08:02,978:INFO:              gradio: Not installed
2025-05-03 08:08:02,978:INFO:             fastapi: 0.115.12
2025-05-03 08:08:02,978:INFO:             uvicorn: 0.34.2
2025-05-03 08:08:02,978:INFO:              m2cgen: Not installed
2025-05-03 08:08:02,978:INFO:           evidently: 0.7.3
2025-05-03 08:08:02,978:INFO:               fugue: Not installed
2025-05-03 08:08:02,978:INFO:           streamlit: Not installed
2025-05-03 08:08:02,978:INFO:             prophet: Not installed
2025-05-03 08:08:02,978:INFO:None
2025-05-03 08:08:02,978:INFO:Set up data.
2025-05-03 08:08:02,985:INFO:Set up folding strategy.
2025-05-03 08:08:02,985:INFO:Set up train/test split.
2025-05-03 08:08:02,992:INFO:Set up index.
2025-05-03 08:08:02,992:INFO:Assigning column types.
2025-05-03 08:08:02,999:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 08:08:02,999:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,006:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,006:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,067:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,114:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,114:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,114:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,114:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,114:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,130:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,184:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,234:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,234:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,234:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 08:08:03,234:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,234:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,297:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,343:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,343:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,359:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,359:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,411:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,458:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 08:08:03,470:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,533:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,565:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,581:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,637:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,669:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,669:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,669:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,669:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 08:08:03,733:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,776:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,845:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,870:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,870:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,870:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 08:08:03,933:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:03,978:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:03,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,037:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 08:08:04,068:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,068:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,068:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 08:08:04,166:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,166:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,269:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,269:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,284:INFO:Preparing preprocessing pipeline...
2025-05-03 08:08:04,284:INFO:Set up simple imputation.
2025-05-03 08:08:04,284:INFO:Set up encoding of categorical features.
2025-05-03 08:08:04,284:INFO:Set up column name cleaning.
2025-05-03 08:08:04,379:INFO:Finished creating preprocessing pipeline.
2025-05-03 08:08:04,395:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 08:08:04,395:INFO:Creating final display dataframe.
2025-05-03 08:08:04,519:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                d46b
2025-05-03 08:08:04,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 08:08:04,715:INFO:Logging experiment in loggers
2025-05-03 08:08:04,780:INFO:SubProcess save_model() called ==================================
2025-05-03 08:08:04,802:INFO:Initializing save_model()
2025-05-03 08:08:04,802:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpxivdd4dk\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 08:08:04,802:INFO:Adding model into prep_pipe
2025-05-03 08:08:04,802:WARNING:Only Model saved as it was a pipeline.
2025-05-03 08:08:04,811:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpxivdd4dk\Transformation Pipeline.pkl saved in current working directory
2025-05-03 08:08:04,811:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 08:08:04,811:INFO:save_model() successfully completed......................................
2025-05-03 08:08:04,964:INFO:SubProcess save_model() end ==================================
2025-05-03 08:08:04,984:INFO:setup() successfully completed in 1.96s...............
2025-05-03 08:08:05,048:INFO:Initializing compare_models()
2025-05-03 08:08:05,048:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 08:08:05,048:INFO:Checking exceptions
2025-05-03 08:08:05,050:INFO:Preparing display monitor
2025-05-03 08:08:05,052:INFO:Initializing Linear Regression
2025-05-03 08:08:05,052:INFO:Total runtime is 8.920828501383463e-06 minutes
2025-05-03 08:08:05,052:INFO:SubProcess create_model() called ==================================
2025-05-03 08:08:05,052:INFO:Initializing create_model()
2025-05-03 08:08:05,052:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000271F4A33FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:05,052:INFO:Checking exceptions
2025-05-03 08:08:05,053:INFO:Importing libraries
2025-05-03 08:08:05,053:INFO:Copying training dataset
2025-05-03 08:08:05,056:INFO:Defining folds
2025-05-03 08:08:05,056:INFO:Declaring metric variables
2025-05-03 08:08:05,056:INFO:Importing untrained model
2025-05-03 08:08:05,056:INFO:Linear Regression Imported successfully
2025-05-03 08:08:05,056:INFO:Starting cross validation
2025-05-03 08:08:05,064:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:09,462:INFO:Calculating mean and std
2025-05-03 08:08:09,464:INFO:Creating metrics dataframe
2025-05-03 08:08:09,472:INFO:Uploading results into container
2025-05-03 08:08:09,473:INFO:Uploading model into container now
2025-05-03 08:08:09,473:INFO:_master_model_container: 1
2025-05-03 08:08:09,473:INFO:_display_container: 2
2025-05-03 08:08:09,473:INFO:LinearRegression(n_jobs=-1)
2025-05-03 08:08:09,473:INFO:create_model() successfully completed......................................
2025-05-03 08:08:09,708:INFO:SubProcess create_model() end ==================================
2025-05-03 08:08:09,708:INFO:Creating metrics dataframe
2025-05-03 08:08:09,708:INFO:Initializing Ridge Regression
2025-05-03 08:08:09,708:INFO:Total runtime is 0.0776062289873759 minutes
2025-05-03 08:08:09,708:INFO:SubProcess create_model() called ==================================
2025-05-03 08:08:09,708:INFO:Initializing create_model()
2025-05-03 08:08:09,708:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000271F4A33FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:09,708:INFO:Checking exceptions
2025-05-03 08:08:09,708:INFO:Importing libraries
2025-05-03 08:08:09,708:INFO:Copying training dataset
2025-05-03 08:08:09,708:INFO:Defining folds
2025-05-03 08:08:09,708:INFO:Declaring metric variables
2025-05-03 08:08:09,724:INFO:Importing untrained model
2025-05-03 08:08:09,724:INFO:Ridge Regression Imported successfully
2025-05-03 08:08:09,724:INFO:Starting cross validation
2025-05-03 08:08:09,724:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:13,748:INFO:Calculating mean and std
2025-05-03 08:08:13,748:INFO:Creating metrics dataframe
2025-05-03 08:08:13,748:INFO:Uploading results into container
2025-05-03 08:08:13,748:INFO:Uploading model into container now
2025-05-03 08:08:13,748:INFO:_master_model_container: 2
2025-05-03 08:08:13,748:INFO:_display_container: 2
2025-05-03 08:08:13,748:INFO:Ridge(random_state=1)
2025-05-03 08:08:13,748:INFO:create_model() successfully completed......................................
2025-05-03 08:08:13,984:INFO:SubProcess create_model() end ==================================
2025-05-03 08:08:13,984:INFO:Creating metrics dataframe
2025-05-03 08:08:13,994:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 08:08:13,994:INFO:Total runtime is 0.14903393983840943 minutes
2025-05-03 08:08:13,994:INFO:SubProcess create_model() called ==================================
2025-05-03 08:08:13,994:INFO:Initializing create_model()
2025-05-03 08:08:13,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000271F4A33FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:13,994:INFO:Checking exceptions
2025-05-03 08:08:13,994:INFO:Importing libraries
2025-05-03 08:08:13,994:INFO:Copying training dataset
2025-05-03 08:08:14,000:INFO:Defining folds
2025-05-03 08:08:14,000:INFO:Declaring metric variables
2025-05-03 08:08:14,000:INFO:Importing untrained model
2025-05-03 08:08:14,000:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 08:08:14,000:INFO:Starting cross validation
2025-05-03 08:08:14,000:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:17,706:INFO:Calculating mean and std
2025-05-03 08:08:17,707:INFO:Creating metrics dataframe
2025-05-03 08:08:17,712:INFO:Uploading results into container
2025-05-03 08:08:17,713:INFO:Uploading model into container now
2025-05-03 08:08:17,714:INFO:_master_model_container: 3
2025-05-03 08:08:17,714:INFO:_display_container: 2
2025-05-03 08:08:17,715:INFO:LGBMRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:17,715:INFO:create_model() successfully completed......................................
2025-05-03 08:08:17,871:INFO:SubProcess create_model() end ==================================
2025-05-03 08:08:17,871:INFO:Creating metrics dataframe
2025-05-03 08:08:17,887:INFO:Initializing Random Forest Regressor
2025-05-03 08:08:17,888:INFO:Total runtime is 0.21394259532292687 minutes
2025-05-03 08:08:17,888:INFO:SubProcess create_model() called ==================================
2025-05-03 08:08:17,888:INFO:Initializing create_model()
2025-05-03 08:08:17,888:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000271F4A33FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:17,888:INFO:Checking exceptions
2025-05-03 08:08:17,888:INFO:Importing libraries
2025-05-03 08:08:17,888:INFO:Copying training dataset
2025-05-03 08:08:17,888:INFO:Defining folds
2025-05-03 08:08:17,888:INFO:Declaring metric variables
2025-05-03 08:08:17,888:INFO:Importing untrained model
2025-05-03 08:08:17,888:INFO:Random Forest Regressor Imported successfully
2025-05-03 08:08:17,888:INFO:Starting cross validation
2025-05-03 08:08:17,888:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:18,456:INFO:Calculating mean and std
2025-05-03 08:08:18,456:INFO:Creating metrics dataframe
2025-05-03 08:08:18,458:INFO:Uploading results into container
2025-05-03 08:08:18,459:INFO:Uploading model into container now
2025-05-03 08:08:18,459:INFO:_master_model_container: 4
2025-05-03 08:08:18,459:INFO:_display_container: 2
2025-05-03 08:08:18,459:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:18,459:INFO:create_model() successfully completed......................................
2025-05-03 08:08:18,630:INFO:SubProcess create_model() end ==================================
2025-05-03 08:08:18,630:INFO:Creating metrics dataframe
2025-05-03 08:08:18,637:INFO:Initializing Extra Trees Regressor
2025-05-03 08:08:18,637:INFO:Total runtime is 0.2264212807019552 minutes
2025-05-03 08:08:18,637:INFO:SubProcess create_model() called ==================================
2025-05-03 08:08:18,637:INFO:Initializing create_model()
2025-05-03 08:08:18,637:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000271F4A33FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:18,637:INFO:Checking exceptions
2025-05-03 08:08:18,637:INFO:Importing libraries
2025-05-03 08:08:18,637:INFO:Copying training dataset
2025-05-03 08:08:18,637:INFO:Defining folds
2025-05-03 08:08:18,637:INFO:Declaring metric variables
2025-05-03 08:08:18,637:INFO:Importing untrained model
2025-05-03 08:08:18,637:INFO:Extra Trees Regressor Imported successfully
2025-05-03 08:08:18,637:INFO:Starting cross validation
2025-05-03 08:08:18,644:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:19,251:INFO:Calculating mean and std
2025-05-03 08:08:19,252:INFO:Creating metrics dataframe
2025-05-03 08:08:19,256:INFO:Uploading results into container
2025-05-03 08:08:19,258:INFO:Uploading model into container now
2025-05-03 08:08:19,259:INFO:_master_model_container: 5
2025-05-03 08:08:19,259:INFO:_display_container: 2
2025-05-03 08:08:19,259:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:19,259:INFO:create_model() successfully completed......................................
2025-05-03 08:08:19,485:INFO:SubProcess create_model() end ==================================
2025-05-03 08:08:19,485:INFO:Creating metrics dataframe
2025-05-03 08:08:19,485:INFO:Initializing create_model()
2025-05-03 08:08:19,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=Ridge(random_state=1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:19,485:INFO:Checking exceptions
2025-05-03 08:08:19,485:INFO:Importing libraries
2025-05-03 08:08:19,485:INFO:Copying training dataset
2025-05-03 08:08:19,485:INFO:Defining folds
2025-05-03 08:08:19,485:INFO:Declaring metric variables
2025-05-03 08:08:19,485:INFO:Importing untrained model
2025-05-03 08:08:19,485:INFO:Declaring custom model
2025-05-03 08:08:19,485:INFO:Ridge Regression Imported successfully
2025-05-03 08:08:19,485:INFO:Cross validation set to False
2025-05-03 08:08:19,485:INFO:Fitting Model
2025-05-03 08:08:19,532:INFO:Ridge(random_state=1)
2025-05-03 08:08:19,532:INFO:create_model() successfully completed......................................
2025-05-03 08:08:19,690:INFO:Creating Dashboard logs
2025-05-03 08:08:19,690:INFO:Model: Ridge Regression
2025-05-03 08:08:19,705:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 1, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 08:08:19,800:INFO:Initializing predict_model()
2025-05-03 08:08:19,800:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=Ridge(random_state=1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F4E26680>)
2025-05-03 08:08:19,800:INFO:Checking exceptions
2025-05-03 08:08:19,800:INFO:Preloading libraries
2025-05-03 08:08:19,847:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:20,021:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 08:08:20,256:INFO:Creating Dashboard logs
2025-05-03 08:08:20,256:INFO:Model: Linear Regression
2025-05-03 08:08:20,272:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 08:08:20,581:INFO:Creating Dashboard logs
2025-05-03 08:08:20,581:INFO:Model: Random Forest Regressor
2025-05-03 08:08:20,597:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 08:08:20,879:INFO:Creating Dashboard logs
2025-05-03 08:08:20,879:INFO:Model: Light Gradient Boosting Machine
2025-05-03 08:08:20,910:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 1, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 08:08:21,193:INFO:Creating Dashboard logs
2025-05-03 08:08:21,193:INFO:Model: Extra Trees Regressor
2025-05-03 08:08:21,224:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 08:08:21,521:INFO:_master_model_container: 5
2025-05-03 08:08:21,521:INFO:_display_container: 2
2025-05-03 08:08:21,521:INFO:Ridge(random_state=1)
2025-05-03 08:08:21,521:INFO:compare_models() successfully completed......................................
2025-05-03 08:08:21,584:INFO:Initializing create_model()
2025-05-03 08:08:21,584:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:21,584:INFO:Checking exceptions
2025-05-03 08:08:21,584:INFO:Importing libraries
2025-05-03 08:08:21,584:INFO:Copying training dataset
2025-05-03 08:08:21,599:INFO:Defining folds
2025-05-03 08:08:21,599:INFO:Declaring metric variables
2025-05-03 08:08:21,599:INFO:Importing untrained model
2025-05-03 08:08:21,599:INFO:Linear Regression Imported successfully
2025-05-03 08:08:21,599:INFO:Starting cross validation
2025-05-03 08:08:21,599:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:21,725:INFO:Calculating mean and std
2025-05-03 08:08:21,725:INFO:Creating metrics dataframe
2025-05-03 08:08:21,725:INFO:Finalizing model
2025-05-03 08:08:21,772:INFO:Creating Dashboard logs
2025-05-03 08:08:21,772:INFO:Model: Linear Regression
2025-05-03 08:08:21,787:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 08:08:21,881:INFO:Initializing predict_model()
2025-05-03 08:08:21,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F4E27010>)
2025-05-03 08:08:21,881:INFO:Checking exceptions
2025-05-03 08:08:21,881:INFO:Preloading libraries
2025-05-03 08:08:21,912:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:22,290:INFO:Uploading results into container
2025-05-03 08:08:22,290:INFO:Uploading model into container now
2025-05-03 08:08:22,290:INFO:_master_model_container: 6
2025-05-03 08:08:22,290:INFO:_display_container: 3
2025-05-03 08:08:22,290:INFO:LinearRegression(n_jobs=-1)
2025-05-03 08:08:22,290:INFO:create_model() successfully completed......................................
2025-05-03 08:08:22,459:INFO:Initializing plot_model()
2025-05-03 08:08:22,459:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, system=True)
2025-05-03 08:08:22,459:INFO:Checking exceptions
2025-05-03 08:08:22,459:INFO:Preloading libraries
2025-05-03 08:08:22,459:INFO:Copying training dataset
2025-05-03 08:08:22,459:INFO:Plot type: feature
2025-05-03 08:08:22,631:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 08:08:23,336:INFO:Saving 'Feature Importance.png'
2025-05-03 08:08:23,493:INFO:Visual Rendered Successfully
2025-05-03 08:08:23,665:INFO:plot_model() successfully completed......................................
2025-05-03 08:08:23,729:INFO:Initializing create_model()
2025-05-03 08:08:23,729:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:23,729:INFO:Checking exceptions
2025-05-03 08:08:23,729:INFO:Importing libraries
2025-05-03 08:08:23,729:INFO:Copying training dataset
2025-05-03 08:08:23,744:INFO:Defining folds
2025-05-03 08:08:23,744:INFO:Declaring metric variables
2025-05-03 08:08:23,744:INFO:Importing untrained model
2025-05-03 08:08:23,744:INFO:Ridge Regression Imported successfully
2025-05-03 08:08:23,744:INFO:Starting cross validation
2025-05-03 08:08:23,744:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:23,854:INFO:Calculating mean and std
2025-05-03 08:08:23,854:INFO:Creating metrics dataframe
2025-05-03 08:08:23,854:INFO:Finalizing model
2025-05-03 08:08:23,901:INFO:Creating Dashboard logs
2025-05-03 08:08:23,901:INFO:Model: Ridge Regression
2025-05-03 08:08:23,917:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 1, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 08:08:24,020:INFO:Initializing predict_model()
2025-05-03 08:08:24,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=Ridge(random_state=1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F4D129E0>)
2025-05-03 08:08:24,020:INFO:Checking exceptions
2025-05-03 08:08:24,020:INFO:Preloading libraries
2025-05-03 08:08:24,036:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:24,435:INFO:Uploading results into container
2025-05-03 08:08:24,435:INFO:Uploading model into container now
2025-05-03 08:08:24,435:INFO:_master_model_container: 7
2025-05-03 08:08:24,435:INFO:_display_container: 4
2025-05-03 08:08:24,435:INFO:Ridge(random_state=1)
2025-05-03 08:08:24,435:INFO:create_model() successfully completed......................................
2025-05-03 08:08:24,602:INFO:Initializing plot_model()
2025-05-03 08:08:24,602:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, system=True)
2025-05-03 08:08:24,602:INFO:Checking exceptions
2025-05-03 08:08:24,602:INFO:Preloading libraries
2025-05-03 08:08:24,602:INFO:Copying training dataset
2025-05-03 08:08:24,602:INFO:Plot type: feature
2025-05-03 08:08:24,699:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 08:08:24,796:INFO:Saving 'Feature Importance.png'
2025-05-03 08:08:24,893:INFO:Visual Rendered Successfully
2025-05-03 08:08:25,053:INFO:plot_model() successfully completed......................................
2025-05-03 08:08:25,137:INFO:Initializing create_model()
2025-05-03 08:08:25,137:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:25,137:INFO:Checking exceptions
2025-05-03 08:08:25,144:INFO:Importing libraries
2025-05-03 08:08:25,144:INFO:Copying training dataset
2025-05-03 08:08:25,144:INFO:Defining folds
2025-05-03 08:08:25,144:INFO:Declaring metric variables
2025-05-03 08:08:25,144:INFO:Importing untrained model
2025-05-03 08:08:25,144:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 08:08:25,144:INFO:Starting cross validation
2025-05-03 08:08:25,151:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:25,650:INFO:Calculating mean and std
2025-05-03 08:08:25,650:INFO:Creating metrics dataframe
2025-05-03 08:08:25,650:INFO:Finalizing model
2025-05-03 08:08:25,727:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 08:08:25,727:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000116 seconds.
2025-05-03 08:08:25,727:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 08:08:25,727:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 08:08:25,727:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 08:08:25,727:INFO:[LightGBM] [Info] Start training from score 89819.604154
2025-05-03 08:08:25,806:INFO:Creating Dashboard logs
2025-05-03 08:08:25,807:INFO:Model: Light Gradient Boosting Machine
2025-05-03 08:08:25,834:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 1, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 08:08:25,935:INFO:Initializing predict_model()
2025-05-03 08:08:25,935:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=LGBMRegressor(n_jobs=-1, random_state=1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F535EB00>)
2025-05-03 08:08:25,935:INFO:Checking exceptions
2025-05-03 08:08:25,935:INFO:Preloading libraries
2025-05-03 08:08:25,970:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:26,414:INFO:Uploading results into container
2025-05-03 08:08:26,414:INFO:Uploading model into container now
2025-05-03 08:08:26,414:INFO:_master_model_container: 8
2025-05-03 08:08:26,414:INFO:_display_container: 5
2025-05-03 08:08:26,414:INFO:LGBMRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:26,414:INFO:create_model() successfully completed......................................
2025-05-03 08:08:26,675:INFO:Initializing plot_model()
2025-05-03 08:08:26,675:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, system=True)
2025-05-03 08:08:26,675:INFO:Checking exceptions
2025-05-03 08:08:26,675:INFO:Preloading libraries
2025-05-03 08:08:26,681:INFO:Copying training dataset
2025-05-03 08:08:26,681:INFO:Plot type: feature
2025-05-03 08:08:26,683:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 08:08:26,747:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 08:08:26,859:INFO:Saving 'Feature Importance.png'
2025-05-03 08:08:26,971:INFO:Visual Rendered Successfully
2025-05-03 08:08:27,122:INFO:plot_model() successfully completed......................................
2025-05-03 08:08:27,199:INFO:Initializing create_model()
2025-05-03 08:08:27,199:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:27,199:INFO:Checking exceptions
2025-05-03 08:08:27,199:INFO:Importing libraries
2025-05-03 08:08:27,199:INFO:Copying training dataset
2025-05-03 08:08:27,199:INFO:Defining folds
2025-05-03 08:08:27,199:INFO:Declaring metric variables
2025-05-03 08:08:27,199:INFO:Importing untrained model
2025-05-03 08:08:27,199:INFO:Random Forest Regressor Imported successfully
2025-05-03 08:08:27,199:INFO:Starting cross validation
2025-05-03 08:08:27,206:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:27,810:INFO:Calculating mean and std
2025-05-03 08:08:27,810:INFO:Creating metrics dataframe
2025-05-03 08:08:27,810:INFO:Finalizing model
2025-05-03 08:08:28,029:INFO:Creating Dashboard logs
2025-05-03 08:08:28,030:INFO:Model: Random Forest Regressor
2025-05-03 08:08:28,062:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 08:08:28,171:INFO:Initializing predict_model()
2025-05-03 08:08:28,172:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=RandomForestRegressor(n_jobs=-1, random_state=1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F538AE60>)
2025-05-03 08:08:28,172:INFO:Checking exceptions
2025-05-03 08:08:28,173:INFO:Preloading libraries
2025-05-03 08:08:28,241:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:28,720:INFO:Uploading results into container
2025-05-03 08:08:28,720:INFO:Uploading model into container now
2025-05-03 08:08:28,720:INFO:_master_model_container: 9
2025-05-03 08:08:28,720:INFO:_display_container: 6
2025-05-03 08:08:28,726:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:28,726:INFO:create_model() successfully completed......................................
2025-05-03 08:08:28,935:INFO:Initializing plot_model()
2025-05-03 08:08:28,935:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, system=True)
2025-05-03 08:08:28,935:INFO:Checking exceptions
2025-05-03 08:08:28,959:INFO:Preloading libraries
2025-05-03 08:08:28,992:INFO:Copying training dataset
2025-05-03 08:08:28,992:INFO:Plot type: feature
2025-05-03 08:08:28,992:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 08:08:29,063:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 08:08:29,218:INFO:Saving 'Feature Importance.png'
2025-05-03 08:08:29,382:INFO:Visual Rendered Successfully
2025-05-03 08:08:29,580:INFO:plot_model() successfully completed......................................
2025-05-03 08:08:29,674:INFO:Initializing create_model()
2025-05-03 08:08:29,674:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 08:08:29,674:INFO:Checking exceptions
2025-05-03 08:08:29,679:INFO:Importing libraries
2025-05-03 08:08:29,679:INFO:Copying training dataset
2025-05-03 08:08:29,687:INFO:Defining folds
2025-05-03 08:08:29,687:INFO:Declaring metric variables
2025-05-03 08:08:29,688:INFO:Importing untrained model
2025-05-03 08:08:29,688:INFO:Extra Trees Regressor Imported successfully
2025-05-03 08:08:29,689:INFO:Starting cross validation
2025-05-03 08:08:29,692:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 08:08:31,175:INFO:Calculating mean and std
2025-05-03 08:08:31,176:INFO:Creating metrics dataframe
2025-05-03 08:08:31,179:INFO:Finalizing model
2025-05-03 08:08:31,547:INFO:Creating Dashboard logs
2025-05-03 08:08:31,547:INFO:Model: Extra Trees Regressor
2025-05-03 08:08:31,580:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 08:08:31,726:INFO:Initializing predict_model()
2025-05-03 08:08:31,726:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000271F5389F30>)
2025-05-03 08:08:31,726:INFO:Checking exceptions
2025-05-03 08:08:31,726:INFO:Preloading libraries
2025-05-03 08:08:31,816:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 08:08:32,379:INFO:Uploading results into container
2025-05-03 08:08:32,379:INFO:Uploading model into container now
2025-05-03 08:08:32,379:INFO:_master_model_container: 10
2025-05-03 08:08:32,379:INFO:_display_container: 7
2025-05-03 08:08:32,379:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2025-05-03 08:08:32,379:INFO:create_model() successfully completed......................................
2025-05-03 08:08:32,588:INFO:Initializing plot_model()
2025-05-03 08:08:32,588:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000271F4A08490>, system=True)
2025-05-03 08:08:32,588:INFO:Checking exceptions
2025-05-03 08:08:32,605:INFO:Preloading libraries
2025-05-03 08:08:32,654:INFO:Copying training dataset
2025-05-03 08:08:32,654:INFO:Plot type: feature
2025-05-03 08:08:32,654:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 08:08:32,738:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 08:08:32,841:INFO:Saving 'Feature Importance.png'
2025-05-03 08:08:32,939:INFO:Visual Rendered Successfully
2025-05-03 08:08:33,096:INFO:plot_model() successfully completed......................................
2025-05-03 13:00:05,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 13:00:05,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 13:00:05,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 13:00:05,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 14:34:27,160:INFO:PyCaret RegressionExperiment
2025-05-03 14:34:27,160:INFO:Logging name: automl_bigdata_exp
2025-05-03 14:34:27,160:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 14:34:27,160:INFO:version 3.3.2
2025-05-03 14:34:27,160:INFO:Initializing setup()
2025-05-03 14:34:27,160:INFO:self.USI: a69c
2025-05-03 14:34:27,160:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'X_test', '_available_plots', 'fold_generator', 'USI', 'logging_param', 'y_test', 'y', 'memory', 'X', 'data', 'transform_target_param', 'idx', 'exp_id', '_ml_usecase', 'y_train', 'X_train', 'target_param', 'gpu_param', 'exp_name_log', 'pipeline', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed'}
2025-05-03 14:34:27,160:INFO:Checking environment
2025-05-03 14:34:27,160:INFO:python_version: 3.10.11
2025-05-03 14:34:27,160:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 14:34:27,160:INFO:machine: AMD64
2025-05-03 14:34:27,180:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 14:34:27,187:INFO:Memory: svmem(total=8403075072, available=1072713728, percent=87.2, used=7330361344, free=1072713728)
2025-05-03 14:34:27,187:INFO:Physical Core: 6
2025-05-03 14:34:27,187:INFO:Logical Core: 12
2025-05-03 14:34:27,187:INFO:Checking libraries
2025-05-03 14:34:27,187:INFO:System:
2025-05-03 14:34:27,187:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 14:34:27,187:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 14:34:27,187:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 14:34:27,187:INFO:PyCaret required dependencies:
2025-05-03 14:34:27,500:INFO:                 pip: 23.0.1
2025-05-03 14:34:27,500:INFO:          setuptools: 65.5.0
2025-05-03 14:34:27,500:INFO:             pycaret: 3.3.2
2025-05-03 14:34:27,500:INFO:             IPython: 8.36.0
2025-05-03 14:34:27,500:INFO:          ipywidgets: 8.1.6
2025-05-03 14:34:27,500:INFO:                tqdm: 4.67.1
2025-05-03 14:34:27,500:INFO:               numpy: 1.26.4
2025-05-03 14:34:27,500:INFO:              pandas: 1.5.3
2025-05-03 14:34:27,500:INFO:              jinja2: 3.1.6
2025-05-03 14:34:27,500:INFO:               scipy: 1.11.4
2025-05-03 14:34:27,500:INFO:              joblib: 1.3.2
2025-05-03 14:34:27,500:INFO:             sklearn: 1.4.2
2025-05-03 14:34:27,500:INFO:                pyod: 2.0.4
2025-05-03 14:34:27,500:INFO:            imblearn: 0.13.0
2025-05-03 14:34:27,500:INFO:   category_encoders: 2.7.0
2025-05-03 14:34:27,500:INFO:            lightgbm: 4.6.0
2025-05-03 14:34:27,500:INFO:               numba: 0.61.0
2025-05-03 14:34:27,500:INFO:            requests: 2.32.3
2025-05-03 14:34:27,500:INFO:          matplotlib: 3.7.5
2025-05-03 14:34:27,500:INFO:          scikitplot: 0.3.7
2025-05-03 14:34:27,500:INFO:         yellowbrick: 1.5
2025-05-03 14:34:27,500:INFO:              plotly: 5.24.1
2025-05-03 14:34:27,500:INFO:    plotly-resampler: Not installed
2025-05-03 14:34:27,500:INFO:             kaleido: 0.2.1
2025-05-03 14:34:27,500:INFO:           schemdraw: 0.15
2025-05-03 14:34:27,500:INFO:         statsmodels: 0.14.4
2025-05-03 14:34:27,500:INFO:              sktime: 0.26.0
2025-05-03 14:34:27,500:INFO:               tbats: 1.1.3
2025-05-03 14:34:27,500:INFO:            pmdarima: 2.0.4
2025-05-03 14:34:27,500:INFO:              psutil: 7.0.0
2025-05-03 14:34:27,500:INFO:          markupsafe: 3.0.2
2025-05-03 14:34:27,500:INFO:             pickle5: Not installed
2025-05-03 14:34:27,500:INFO:         cloudpickle: 2.2.1
2025-05-03 14:34:27,500:INFO:         deprecation: 2.1.0
2025-05-03 14:34:27,500:INFO:              xxhash: 3.5.0
2025-05-03 14:34:27,500:INFO:           wurlitzer: Not installed
2025-05-03 14:34:27,500:INFO:PyCaret optional dependencies:
2025-05-03 14:34:27,514:INFO:                shap: 0.47.2
2025-05-03 14:34:27,514:INFO:           interpret: Not installed
2025-05-03 14:34:27,514:INFO:                umap: Not installed
2025-05-03 14:34:27,514:INFO:     ydata_profiling: 4.16.1
2025-05-03 14:34:27,514:INFO:  explainerdashboard: Not installed
2025-05-03 14:34:27,514:INFO:             autoviz: Not installed
2025-05-03 14:34:27,514:INFO:           fairlearn: Not installed
2025-05-03 14:34:27,514:INFO:          deepchecks: Not installed
2025-05-03 14:34:27,514:INFO:             xgboost: Not installed
2025-05-03 14:34:27,514:INFO:            catboost: Not installed
2025-05-03 14:34:27,514:INFO:              kmodes: Not installed
2025-05-03 14:34:27,514:INFO:             mlxtend: Not installed
2025-05-03 14:34:27,514:INFO:       statsforecast: Not installed
2025-05-03 14:34:27,514:INFO:        tune_sklearn: Not installed
2025-05-03 14:34:27,514:INFO:                 ray: Not installed
2025-05-03 14:34:27,514:INFO:            hyperopt: Not installed
2025-05-03 14:34:27,514:INFO:              optuna: 4.3.0
2025-05-03 14:34:27,514:INFO:               skopt: Not installed
2025-05-03 14:34:27,514:INFO:              mlflow: 1.30.0
2025-05-03 14:34:27,514:INFO:              gradio: Not installed
2025-05-03 14:34:27,514:INFO:             fastapi: 0.115.12
2025-05-03 14:34:27,514:INFO:             uvicorn: 0.34.2
2025-05-03 14:34:27,514:INFO:              m2cgen: Not installed
2025-05-03 14:34:27,514:INFO:           evidently: 0.7.3
2025-05-03 14:34:27,514:INFO:               fugue: Not installed
2025-05-03 14:34:27,514:INFO:           streamlit: Not installed
2025-05-03 14:34:27,514:INFO:             prophet: Not installed
2025-05-03 14:34:27,514:INFO:None
2025-05-03 14:34:27,514:INFO:Set up data.
2025-05-03 14:34:27,521:INFO:Set up folding strategy.
2025-05-03 14:34:27,521:INFO:Set up train/test split.
2025-05-03 14:34:27,527:INFO:Set up index.
2025-05-03 14:34:27,527:INFO:Assigning column types.
2025-05-03 14:34:27,534:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 14:34:27,534:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,541:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,548:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,617:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,666:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,666:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,666:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,666:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,673:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,673:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,737:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,784:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,784:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,784:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,784:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 14:34:27,791:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,798:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,861:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,910:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:27,916:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,925:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:27,993:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,044:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,044:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,047:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 14:34:28,058:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,126:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,180:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,187:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,187:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,194:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,262:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,312:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,312:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,312:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,312:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 14:34:28,387:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,439:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,440:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,440:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,514:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,562:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,562:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,562:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 14:34:28,638:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,687:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,688:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,757:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:34:28,806:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,806:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 14:34:28,926:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:28,926:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,062:INFO:Preparing preprocessing pipeline...
2025-05-03 14:34:29,062:INFO:Set up simple imputation.
2025-05-03 14:34:29,062:INFO:Set up encoding of categorical features.
2025-05-03 14:34:29,062:INFO:Set up column name cleaning.
2025-05-03 14:34:29,182:INFO:Finished creating preprocessing pipeline.
2025-05-03 14:34:29,194:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 14:34:29,194:INFO:Creating final display dataframe.
2025-05-03 14:34:29,451:INFO:Setup _display_container:                     Description               Value
0                    Session id                   2
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 9)
5   Transformed train set shape           (2100, 9)
6    Transformed test set shape            (900, 9)
7               Ignore features                   3
8              Numeric features                   3
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                a69c
2025-05-03 14:34:29,555:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,555:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,670:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,671:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:34:29,671:INFO:Logging experiment in loggers
2025-05-03 14:34:29,762:INFO:SubProcess save_model() called ==================================
2025-05-03 14:34:29,777:INFO:Initializing save_model()
2025-05-03 14:34:29,777:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpb0eubtm1\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 14:34:29,777:INFO:Adding model into prep_pipe
2025-05-03 14:34:29,777:WARNING:Only Model saved as it was a pipeline.
2025-05-03 14:34:29,787:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpb0eubtm1\Transformation Pipeline.pkl saved in current working directory
2025-05-03 14:34:29,796:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 14:34:29,796:INFO:save_model() successfully completed......................................
2025-05-03 14:34:29,972:INFO:SubProcess save_model() end ==================================
2025-05-03 14:34:29,986:INFO:setup() successfully completed in 2.51s...............
2025-05-03 14:34:30,062:INFO:Initializing compare_models()
2025-05-03 14:34:30,062:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 14:34:30,062:INFO:Checking exceptions
2025-05-03 14:34:30,069:INFO:Preparing display monitor
2025-05-03 14:34:30,069:INFO:Initializing Linear Regression
2025-05-03 14:34:30,069:INFO:Total runtime is 0.0 minutes
2025-05-03 14:34:30,069:INFO:SubProcess create_model() called ==================================
2025-05-03 14:34:30,069:INFO:Initializing create_model()
2025-05-03 14:34:30,069:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210C37E6AD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:30,069:INFO:Checking exceptions
2025-05-03 14:34:30,069:INFO:Importing libraries
2025-05-03 14:34:30,069:INFO:Copying training dataset
2025-05-03 14:34:30,076:INFO:Defining folds
2025-05-03 14:34:30,076:INFO:Declaring metric variables
2025-05-03 14:34:30,076:INFO:Importing untrained model
2025-05-03 14:34:30,077:INFO:Linear Regression Imported successfully
2025-05-03 14:34:30,077:INFO:Starting cross validation
2025-05-03 14:34:30,083:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:37,270:INFO:Calculating mean and std
2025-05-03 14:34:37,271:INFO:Creating metrics dataframe
2025-05-03 14:34:37,278:INFO:Uploading results into container
2025-05-03 14:34:37,279:INFO:Uploading model into container now
2025-05-03 14:34:37,280:INFO:_master_model_container: 1
2025-05-03 14:34:37,280:INFO:_display_container: 2
2025-05-03 14:34:37,281:INFO:LinearRegression(n_jobs=-1)
2025-05-03 14:34:37,281:INFO:create_model() successfully completed......................................
2025-05-03 14:34:37,536:INFO:SubProcess create_model() end ==================================
2025-05-03 14:34:37,536:INFO:Creating metrics dataframe
2025-05-03 14:34:37,536:INFO:Initializing Ridge Regression
2025-05-03 14:34:37,536:INFO:Total runtime is 0.12444398005803427 minutes
2025-05-03 14:34:37,536:INFO:SubProcess create_model() called ==================================
2025-05-03 14:34:37,536:INFO:Initializing create_model()
2025-05-03 14:34:37,536:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210C37E6AD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:37,536:INFO:Checking exceptions
2025-05-03 14:34:37,536:INFO:Importing libraries
2025-05-03 14:34:37,536:INFO:Copying training dataset
2025-05-03 14:34:37,536:INFO:Defining folds
2025-05-03 14:34:37,536:INFO:Declaring metric variables
2025-05-03 14:34:37,536:INFO:Importing untrained model
2025-05-03 14:34:37,536:INFO:Ridge Regression Imported successfully
2025-05-03 14:34:37,536:INFO:Starting cross validation
2025-05-03 14:34:37,551:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:41,739:INFO:Calculating mean and std
2025-05-03 14:34:41,739:INFO:Creating metrics dataframe
2025-05-03 14:34:41,742:INFO:Uploading results into container
2025-05-03 14:34:41,742:INFO:Uploading model into container now
2025-05-03 14:34:41,742:INFO:_master_model_container: 2
2025-05-03 14:34:41,742:INFO:_display_container: 2
2025-05-03 14:34:41,748:INFO:Ridge(random_state=2)
2025-05-03 14:34:41,748:INFO:create_model() successfully completed......................................
2025-05-03 14:34:42,026:INFO:SubProcess create_model() end ==================================
2025-05-03 14:34:42,026:INFO:Creating metrics dataframe
2025-05-03 14:34:42,032:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 14:34:42,032:INFO:Total runtime is 0.19938081900278729 minutes
2025-05-03 14:34:42,032:INFO:SubProcess create_model() called ==================================
2025-05-03 14:34:42,032:INFO:Initializing create_model()
2025-05-03 14:34:42,032:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210C37E6AD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:42,032:INFO:Checking exceptions
2025-05-03 14:34:42,033:INFO:Importing libraries
2025-05-03 14:34:42,033:INFO:Copying training dataset
2025-05-03 14:34:42,038:INFO:Defining folds
2025-05-03 14:34:42,039:INFO:Declaring metric variables
2025-05-03 14:34:42,039:INFO:Importing untrained model
2025-05-03 14:34:42,040:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 14:34:42,040:INFO:Starting cross validation
2025-05-03 14:34:42,041:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:45,847:INFO:Calculating mean and std
2025-05-03 14:34:45,847:INFO:Creating metrics dataframe
2025-05-03 14:34:45,852:INFO:Uploading results into container
2025-05-03 14:34:45,852:INFO:Uploading model into container now
2025-05-03 14:34:45,852:INFO:_master_model_container: 3
2025-05-03 14:34:45,852:INFO:_display_container: 2
2025-05-03 14:34:45,852:INFO:LGBMRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:34:45,852:INFO:create_model() successfully completed......................................
2025-05-03 14:34:46,020:INFO:SubProcess create_model() end ==================================
2025-05-03 14:34:46,020:INFO:Creating metrics dataframe
2025-05-03 14:34:46,020:INFO:Initializing Random Forest Regressor
2025-05-03 14:34:46,020:INFO:Total runtime is 0.2658496141433716 minutes
2025-05-03 14:34:46,020:INFO:SubProcess create_model() called ==================================
2025-05-03 14:34:46,020:INFO:Initializing create_model()
2025-05-03 14:34:46,020:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210C37E6AD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:46,020:INFO:Checking exceptions
2025-05-03 14:34:46,020:INFO:Importing libraries
2025-05-03 14:34:46,020:INFO:Copying training dataset
2025-05-03 14:34:46,036:INFO:Defining folds
2025-05-03 14:34:46,036:INFO:Declaring metric variables
2025-05-03 14:34:46,036:INFO:Importing untrained model
2025-05-03 14:34:46,036:INFO:Random Forest Regressor Imported successfully
2025-05-03 14:34:46,036:INFO:Starting cross validation
2025-05-03 14:34:46,036:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:46,810:INFO:Calculating mean and std
2025-05-03 14:34:46,810:INFO:Creating metrics dataframe
2025-05-03 14:34:46,813:INFO:Uploading results into container
2025-05-03 14:34:46,813:INFO:Uploading model into container now
2025-05-03 14:34:46,814:INFO:_master_model_container: 4
2025-05-03 14:34:46,814:INFO:_display_container: 2
2025-05-03 14:34:46,814:INFO:RandomForestRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:34:46,814:INFO:create_model() successfully completed......................................
2025-05-03 14:34:46,936:INFO:SubProcess create_model() end ==================================
2025-05-03 14:34:46,936:INFO:Creating metrics dataframe
2025-05-03 14:34:46,936:INFO:Initializing Extra Trees Regressor
2025-05-03 14:34:46,936:INFO:Total runtime is 0.2811137557029724 minutes
2025-05-03 14:34:46,936:INFO:SubProcess create_model() called ==================================
2025-05-03 14:34:46,936:INFO:Initializing create_model()
2025-05-03 14:34:46,936:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210C37E6AD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:46,936:INFO:Checking exceptions
2025-05-03 14:34:46,936:INFO:Importing libraries
2025-05-03 14:34:46,936:INFO:Copying training dataset
2025-05-03 14:34:46,936:INFO:Defining folds
2025-05-03 14:34:46,936:INFO:Declaring metric variables
2025-05-03 14:34:46,936:INFO:Importing untrained model
2025-05-03 14:34:46,936:INFO:Extra Trees Regressor Imported successfully
2025-05-03 14:34:46,936:INFO:Starting cross validation
2025-05-03 14:34:46,936:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:47,513:INFO:Calculating mean and std
2025-05-03 14:34:47,513:INFO:Creating metrics dataframe
2025-05-03 14:34:47,513:INFO:Uploading results into container
2025-05-03 14:34:47,513:INFO:Uploading model into container now
2025-05-03 14:34:47,513:INFO:_master_model_container: 5
2025-05-03 14:34:47,513:INFO:_display_container: 2
2025-05-03 14:34:47,513:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:34:47,513:INFO:create_model() successfully completed......................................
2025-05-03 14:34:47,648:INFO:SubProcess create_model() end ==================================
2025-05-03 14:34:47,648:INFO:Creating metrics dataframe
2025-05-03 14:34:47,667:INFO:Initializing create_model()
2025-05-03 14:34:47,667:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=Ridge(random_state=2), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:47,667:INFO:Checking exceptions
2025-05-03 14:34:47,667:INFO:Importing libraries
2025-05-03 14:34:47,667:INFO:Copying training dataset
2025-05-03 14:34:47,674:INFO:Defining folds
2025-05-03 14:34:47,674:INFO:Declaring metric variables
2025-05-03 14:34:47,674:INFO:Importing untrained model
2025-05-03 14:34:47,674:INFO:Declaring custom model
2025-05-03 14:34:47,674:INFO:Ridge Regression Imported successfully
2025-05-03 14:34:47,674:INFO:Cross validation set to False
2025-05-03 14:34:47,674:INFO:Fitting Model
2025-05-03 14:34:47,728:INFO:Ridge(random_state=2)
2025-05-03 14:34:47,728:INFO:create_model() successfully completed......................................
2025-05-03 14:34:47,874:INFO:Creating Dashboard logs
2025-05-03 14:34:47,874:INFO:Model: Ridge Regression
2025-05-03 14:34:47,902:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 2, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 14:34:48,006:INFO:Initializing predict_model()
2025-05-03 14:34:48,006:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=Ridge(random_state=2), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CE0C51B0>)
2025-05-03 14:34:48,006:INFO:Checking exceptions
2025-05-03 14:34:48,006:INFO:Preloading libraries
2025-05-03 14:34:48,168:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:34:48,563:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 14:34:48,881:INFO:Creating Dashboard logs
2025-05-03 14:34:48,881:INFO:Model: Linear Regression
2025-05-03 14:34:48,912:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 14:34:49,244:INFO:Creating Dashboard logs
2025-05-03 14:34:49,244:INFO:Model: Random Forest Regressor
2025-05-03 14:34:49,259:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 2, 'verbose': 0, 'warm_start': False}
2025-05-03 14:34:49,557:INFO:Creating Dashboard logs
2025-05-03 14:34:49,557:INFO:Model: Light Gradient Boosting Machine
2025-05-03 14:34:49,592:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 2, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 14:34:49,894:INFO:Creating Dashboard logs
2025-05-03 14:34:49,894:INFO:Model: Extra Trees Regressor
2025-05-03 14:34:49,909:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 2, 'verbose': 0, 'warm_start': False}
2025-05-03 14:34:50,203:INFO:_master_model_container: 5
2025-05-03 14:34:50,203:INFO:_display_container: 2
2025-05-03 14:34:50,203:INFO:Ridge(random_state=2)
2025-05-03 14:34:50,203:INFO:compare_models() successfully completed......................................
2025-05-03 14:34:50,298:INFO:Initializing create_model()
2025-05-03 14:34:50,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:50,298:INFO:Checking exceptions
2025-05-03 14:34:50,298:INFO:Importing libraries
2025-05-03 14:34:50,298:INFO:Copying training dataset
2025-05-03 14:34:50,298:INFO:Defining folds
2025-05-03 14:34:50,298:INFO:Declaring metric variables
2025-05-03 14:34:50,298:INFO:Importing untrained model
2025-05-03 14:34:50,298:INFO:Linear Regression Imported successfully
2025-05-03 14:34:50,298:INFO:Starting cross validation
2025-05-03 14:34:50,298:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:50,426:INFO:Calculating mean and std
2025-05-03 14:34:50,426:INFO:Creating metrics dataframe
2025-05-03 14:34:50,426:INFO:Finalizing model
2025-05-03 14:34:50,473:INFO:Creating Dashboard logs
2025-05-03 14:34:50,473:INFO:Model: Linear Regression
2025-05-03 14:34:50,488:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 14:34:50,600:INFO:Initializing predict_model()
2025-05-03 14:34:50,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5FAC0>)
2025-05-03 14:34:50,600:INFO:Checking exceptions
2025-05-03 14:34:50,600:INFO:Preloading libraries
2025-05-03 14:34:50,705:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:34:51,090:INFO:Uploading results into container
2025-05-03 14:34:51,090:INFO:Uploading model into container now
2025-05-03 14:34:51,091:INFO:_master_model_container: 6
2025-05-03 14:34:51,091:INFO:_display_container: 3
2025-05-03 14:34:51,091:INFO:LinearRegression(n_jobs=-1)
2025-05-03 14:34:51,091:INFO:create_model() successfully completed......................................
2025-05-03 14:34:51,296:INFO:Initializing plot_model()
2025-05-03 14:34:51,296:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, system=True)
2025-05-03 14:34:51,296:INFO:Checking exceptions
2025-05-03 14:34:51,298:INFO:Preloading libraries
2025-05-03 14:34:51,299:INFO:Copying training dataset
2025-05-03 14:34:51,299:INFO:Plot type: feature
2025-05-03 14:34:51,564:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:34:52,432:INFO:Saving 'Feature Importance.png'
2025-05-03 14:34:52,589:INFO:Visual Rendered Successfully
2025-05-03 14:34:52,731:INFO:plot_model() successfully completed......................................
2025-05-03 14:34:52,813:INFO:Initializing create_model()
2025-05-03 14:34:52,813:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:52,813:INFO:Checking exceptions
2025-05-03 14:34:52,819:INFO:Importing libraries
2025-05-03 14:34:52,819:INFO:Copying training dataset
2025-05-03 14:34:52,822:INFO:Defining folds
2025-05-03 14:34:52,822:INFO:Declaring metric variables
2025-05-03 14:34:52,822:INFO:Importing untrained model
2025-05-03 14:34:52,822:INFO:Ridge Regression Imported successfully
2025-05-03 14:34:52,823:INFO:Starting cross validation
2025-05-03 14:34:52,823:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:52,942:INFO:Calculating mean and std
2025-05-03 14:34:52,942:INFO:Creating metrics dataframe
2025-05-03 14:34:52,942:INFO:Finalizing model
2025-05-03 14:34:52,989:INFO:Creating Dashboard logs
2025-05-03 14:34:52,989:INFO:Model: Ridge Regression
2025-05-03 14:34:53,005:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 2, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 14:34:53,115:INFO:Initializing predict_model()
2025-05-03 14:34:53,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=Ridge(random_state=2), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5FAC0>)
2025-05-03 14:34:53,115:INFO:Checking exceptions
2025-05-03 14:34:53,115:INFO:Preloading libraries
2025-05-03 14:34:53,252:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:34:53,704:INFO:Uploading results into container
2025-05-03 14:34:53,705:INFO:Uploading model into container now
2025-05-03 14:34:53,705:INFO:_master_model_container: 7
2025-05-03 14:34:53,705:INFO:_display_container: 4
2025-05-03 14:34:53,705:INFO:Ridge(random_state=2)
2025-05-03 14:34:53,705:INFO:create_model() successfully completed......................................
2025-05-03 14:34:53,876:INFO:Initializing plot_model()
2025-05-03 14:34:53,876:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, system=True)
2025-05-03 14:34:53,876:INFO:Checking exceptions
2025-05-03 14:34:53,878:INFO:Preloading libraries
2025-05-03 14:34:53,878:INFO:Copying training dataset
2025-05-03 14:34:53,878:INFO:Plot type: feature
2025-05-03 14:34:53,982:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:34:54,101:INFO:Saving 'Feature Importance.png'
2025-05-03 14:34:54,206:INFO:Visual Rendered Successfully
2025-05-03 14:34:54,383:INFO:plot_model() successfully completed......................................
2025-05-03 14:34:54,454:INFO:Initializing create_model()
2025-05-03 14:34:54,454:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:54,454:INFO:Checking exceptions
2025-05-03 14:34:54,454:INFO:Importing libraries
2025-05-03 14:34:54,454:INFO:Copying training dataset
2025-05-03 14:34:54,464:INFO:Defining folds
2025-05-03 14:34:54,464:INFO:Declaring metric variables
2025-05-03 14:34:54,464:INFO:Importing untrained model
2025-05-03 14:34:54,464:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 14:34:54,464:INFO:Starting cross validation
2025-05-03 14:34:54,464:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:55,020:INFO:Calculating mean and std
2025-05-03 14:34:55,021:INFO:Creating metrics dataframe
2025-05-03 14:34:55,023:INFO:Finalizing model
2025-05-03 14:34:55,120:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 14:34:55,121:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000128 seconds.
2025-05-03 14:34:55,121:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 14:34:55,123:INFO:[LightGBM] [Info] Total Bins 674
2025-05-03 14:34:55,123:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 8
2025-05-03 14:34:55,123:INFO:[LightGBM] [Info] Start training from score 88935.573052
2025-05-03 14:34:55,179:INFO:Creating Dashboard logs
2025-05-03 14:34:55,180:INFO:Model: Light Gradient Boosting Machine
2025-05-03 14:34:55,206:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 2, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 14:34:55,317:INFO:Initializing predict_model()
2025-05-03 14:34:55,317:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=LGBMRegressor(n_jobs=-1, random_state=2), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CE075EA0>)
2025-05-03 14:34:55,317:INFO:Checking exceptions
2025-05-03 14:34:55,317:INFO:Preloading libraries
2025-05-03 14:34:55,457:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:34:55,893:INFO:Uploading results into container
2025-05-03 14:34:55,893:INFO:Uploading model into container now
2025-05-03 14:34:55,893:INFO:_master_model_container: 8
2025-05-03 14:34:55,893:INFO:_display_container: 5
2025-05-03 14:34:55,893:INFO:LGBMRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:34:55,893:INFO:create_model() successfully completed......................................
2025-05-03 14:34:56,092:INFO:Initializing plot_model()
2025-05-03 14:34:56,092:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, system=True)
2025-05-03 14:34:56,092:INFO:Checking exceptions
2025-05-03 14:34:56,094:INFO:Preloading libraries
2025-05-03 14:34:56,098:INFO:Copying training dataset
2025-05-03 14:34:56,098:INFO:Plot type: feature
2025-05-03 14:34:56,098:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:34:56,179:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:34:56,299:INFO:Saving 'Feature Importance.png'
2025-05-03 14:34:56,409:INFO:Visual Rendered Successfully
2025-05-03 14:34:56,554:INFO:plot_model() successfully completed......................................
2025-05-03 14:34:56,628:INFO:Initializing create_model()
2025-05-03 14:34:56,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:56,628:INFO:Checking exceptions
2025-05-03 14:34:56,628:INFO:Importing libraries
2025-05-03 14:34:56,628:INFO:Copying training dataset
2025-05-03 14:34:56,644:INFO:Defining folds
2025-05-03 14:34:56,644:INFO:Declaring metric variables
2025-05-03 14:34:56,644:INFO:Importing untrained model
2025-05-03 14:34:56,644:INFO:Random Forest Regressor Imported successfully
2025-05-03 14:34:56,644:INFO:Starting cross validation
2025-05-03 14:34:56,644:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:57,459:INFO:Calculating mean and std
2025-05-03 14:34:57,460:INFO:Creating metrics dataframe
2025-05-03 14:34:57,461:INFO:Finalizing model
2025-05-03 14:34:57,752:INFO:Creating Dashboard logs
2025-05-03 14:34:57,752:INFO:Model: Random Forest Regressor
2025-05-03 14:34:57,766:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 2, 'verbose': 0, 'warm_start': False}
2025-05-03 14:34:57,869:INFO:Initializing predict_model()
2025-05-03 14:34:57,869:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=RandomForestRegressor(n_jobs=-1, random_state=2), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020FF16DAB90>)
2025-05-03 14:34:57,869:INFO:Checking exceptions
2025-05-03 14:34:57,869:INFO:Preloading libraries
2025-05-03 14:34:58,026:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:34:58,474:INFO:Uploading results into container
2025-05-03 14:34:58,475:INFO:Uploading model into container now
2025-05-03 14:34:58,475:INFO:_master_model_container: 9
2025-05-03 14:34:58,475:INFO:_display_container: 6
2025-05-03 14:34:58,475:INFO:RandomForestRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:34:58,475:INFO:create_model() successfully completed......................................
2025-05-03 14:34:58,714:INFO:Initializing plot_model()
2025-05-03 14:34:58,714:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, system=True)
2025-05-03 14:34:58,714:INFO:Checking exceptions
2025-05-03 14:34:58,749:INFO:Preloading libraries
2025-05-03 14:34:58,783:INFO:Copying training dataset
2025-05-03 14:34:58,783:INFO:Plot type: feature
2025-05-03 14:34:58,783:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:34:58,863:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:34:58,985:INFO:Saving 'Feature Importance.png'
2025-05-03 14:34:59,096:INFO:Visual Rendered Successfully
2025-05-03 14:34:59,249:INFO:plot_model() successfully completed......................................
2025-05-03 14:34:59,327:INFO:Initializing create_model()
2025-05-03 14:34:59,327:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:34:59,327:INFO:Checking exceptions
2025-05-03 14:34:59,327:INFO:Importing libraries
2025-05-03 14:34:59,327:INFO:Copying training dataset
2025-05-03 14:34:59,327:INFO:Defining folds
2025-05-03 14:34:59,327:INFO:Declaring metric variables
2025-05-03 14:34:59,327:INFO:Importing untrained model
2025-05-03 14:34:59,327:INFO:Extra Trees Regressor Imported successfully
2025-05-03 14:34:59,327:INFO:Starting cross validation
2025-05-03 14:34:59,327:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:34:59,921:INFO:Calculating mean and std
2025-05-03 14:34:59,922:INFO:Creating metrics dataframe
2025-05-03 14:34:59,925:INFO:Finalizing model
2025-05-03 14:35:00,131:INFO:Creating Dashboard logs
2025-05-03 14:35:00,131:INFO:Model: Extra Trees Regressor
2025-05-03 14:35:00,151:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 2, 'verbose': 0, 'warm_start': False}
2025-05-03 14:35:00,249:INFO:Initializing predict_model()
2025-05-03 14:35:00,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=2), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020FF16DA320>)
2025-05-03 14:35:00,249:INFO:Checking exceptions
2025-05-03 14:35:00,249:INFO:Preloading libraries
2025-05-03 14:35:00,388:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:35:00,832:INFO:Uploading results into container
2025-05-03 14:35:00,839:INFO:Uploading model into container now
2025-05-03 14:35:00,839:INFO:_master_model_container: 10
2025-05-03 14:35:00,839:INFO:_display_container: 7
2025-05-03 14:35:00,839:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2025-05-03 14:35:00,839:INFO:create_model() successfully completed......................................
2025-05-03 14:35:01,056:INFO:Initializing plot_model()
2025-05-03 14:35:01,056:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF2189000>, system=True)
2025-05-03 14:35:01,056:INFO:Checking exceptions
2025-05-03 14:35:01,075:INFO:Preloading libraries
2025-05-03 14:35:01,117:INFO:Copying training dataset
2025-05-03 14:35:01,117:INFO:Plot type: feature
2025-05-03 14:35:01,117:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:35:01,193:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:35:01,304:INFO:Saving 'Feature Importance.png'
2025-05-03 14:35:01,415:INFO:Visual Rendered Successfully
2025-05-03 14:35:01,568:INFO:plot_model() successfully completed......................................
2025-05-03 14:36:12,004:INFO:PyCaret RegressionExperiment
2025-05-03 14:36:12,004:INFO:Logging name: automl_bigdata_exp
2025-05-03 14:36:12,004:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 14:36:12,004:INFO:version 3.3.2
2025-05-03 14:36:12,004:INFO:Initializing setup()
2025-05-03 14:36:12,004:INFO:self.USI: 1a5f
2025-05-03 14:36:12,004:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'X_test', '_available_plots', 'fold_generator', 'USI', 'logging_param', 'y_test', 'y', 'memory', 'X', 'data', 'transform_target_param', 'idx', 'exp_id', '_ml_usecase', 'y_train', 'X_train', 'target_param', 'gpu_param', 'exp_name_log', 'pipeline', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed'}
2025-05-03 14:36:12,004:INFO:Checking environment
2025-05-03 14:36:12,004:INFO:python_version: 3.10.11
2025-05-03 14:36:12,004:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 14:36:12,004:INFO:machine: AMD64
2025-05-03 14:36:12,004:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 14:36:12,011:INFO:Memory: svmem(total=8403075072, available=577818624, percent=93.1, used=7825256448, free=577818624)
2025-05-03 14:36:12,011:INFO:Physical Core: 6
2025-05-03 14:36:12,011:INFO:Logical Core: 12
2025-05-03 14:36:12,011:INFO:Checking libraries
2025-05-03 14:36:12,011:INFO:System:
2025-05-03 14:36:12,011:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 14:36:12,011:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 14:36:12,011:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 14:36:12,011:INFO:PyCaret required dependencies:
2025-05-03 14:36:12,011:INFO:                 pip: 23.0.1
2025-05-03 14:36:12,011:INFO:          setuptools: 65.5.0
2025-05-03 14:36:12,011:INFO:             pycaret: 3.3.2
2025-05-03 14:36:12,011:INFO:             IPython: 8.36.0
2025-05-03 14:36:12,011:INFO:          ipywidgets: 8.1.6
2025-05-03 14:36:12,011:INFO:                tqdm: 4.67.1
2025-05-03 14:36:12,011:INFO:               numpy: 1.26.4
2025-05-03 14:36:12,011:INFO:              pandas: 1.5.3
2025-05-03 14:36:12,011:INFO:              jinja2: 3.1.6
2025-05-03 14:36:12,011:INFO:               scipy: 1.11.4
2025-05-03 14:36:12,011:INFO:              joblib: 1.3.2
2025-05-03 14:36:12,011:INFO:             sklearn: 1.4.2
2025-05-03 14:36:12,011:INFO:                pyod: 2.0.4
2025-05-03 14:36:12,011:INFO:            imblearn: 0.13.0
2025-05-03 14:36:12,011:INFO:   category_encoders: 2.7.0
2025-05-03 14:36:12,011:INFO:            lightgbm: 4.6.0
2025-05-03 14:36:12,011:INFO:               numba: 0.61.0
2025-05-03 14:36:12,011:INFO:            requests: 2.32.3
2025-05-03 14:36:12,011:INFO:          matplotlib: 3.7.5
2025-05-03 14:36:12,011:INFO:          scikitplot: 0.3.7
2025-05-03 14:36:12,011:INFO:         yellowbrick: 1.5
2025-05-03 14:36:12,011:INFO:              plotly: 5.24.1
2025-05-03 14:36:12,011:INFO:    plotly-resampler: Not installed
2025-05-03 14:36:12,011:INFO:             kaleido: 0.2.1
2025-05-03 14:36:12,011:INFO:           schemdraw: 0.15
2025-05-03 14:36:12,011:INFO:         statsmodels: 0.14.4
2025-05-03 14:36:12,011:INFO:              sktime: 0.26.0
2025-05-03 14:36:12,011:INFO:               tbats: 1.1.3
2025-05-03 14:36:12,011:INFO:            pmdarima: 2.0.4
2025-05-03 14:36:12,011:INFO:              psutil: 7.0.0
2025-05-03 14:36:12,011:INFO:          markupsafe: 3.0.2
2025-05-03 14:36:12,011:INFO:             pickle5: Not installed
2025-05-03 14:36:12,011:INFO:         cloudpickle: 2.2.1
2025-05-03 14:36:12,011:INFO:         deprecation: 2.1.0
2025-05-03 14:36:12,011:INFO:              xxhash: 3.5.0
2025-05-03 14:36:12,011:INFO:           wurlitzer: Not installed
2025-05-03 14:36:12,011:INFO:PyCaret optional dependencies:
2025-05-03 14:36:12,011:INFO:                shap: 0.47.2
2025-05-03 14:36:12,011:INFO:           interpret: Not installed
2025-05-03 14:36:12,011:INFO:                umap: Not installed
2025-05-03 14:36:12,011:INFO:     ydata_profiling: 4.16.1
2025-05-03 14:36:12,011:INFO:  explainerdashboard: Not installed
2025-05-03 14:36:12,011:INFO:             autoviz: Not installed
2025-05-03 14:36:12,011:INFO:           fairlearn: Not installed
2025-05-03 14:36:12,011:INFO:          deepchecks: Not installed
2025-05-03 14:36:12,011:INFO:             xgboost: Not installed
2025-05-03 14:36:12,011:INFO:            catboost: Not installed
2025-05-03 14:36:12,011:INFO:              kmodes: Not installed
2025-05-03 14:36:12,011:INFO:             mlxtend: Not installed
2025-05-03 14:36:12,011:INFO:       statsforecast: Not installed
2025-05-03 14:36:12,011:INFO:        tune_sklearn: Not installed
2025-05-03 14:36:12,011:INFO:                 ray: Not installed
2025-05-03 14:36:12,011:INFO:            hyperopt: Not installed
2025-05-03 14:36:12,011:INFO:              optuna: 4.3.0
2025-05-03 14:36:12,011:INFO:               skopt: Not installed
2025-05-03 14:36:12,011:INFO:              mlflow: 1.30.0
2025-05-03 14:36:12,011:INFO:              gradio: Not installed
2025-05-03 14:36:12,011:INFO:             fastapi: 0.115.12
2025-05-03 14:36:12,011:INFO:             uvicorn: 0.34.2
2025-05-03 14:36:12,011:INFO:              m2cgen: Not installed
2025-05-03 14:36:12,017:INFO:           evidently: 0.7.3
2025-05-03 14:36:12,017:INFO:               fugue: Not installed
2025-05-03 14:36:12,017:INFO:           streamlit: Not installed
2025-05-03 14:36:12,017:INFO:             prophet: Not installed
2025-05-03 14:36:12,017:INFO:None
2025-05-03 14:36:12,017:INFO:Set up data.
2025-05-03 14:36:12,018:INFO:Set up folding strategy.
2025-05-03 14:36:12,018:INFO:Set up train/test split.
2025-05-03 14:36:12,025:INFO:Set up index.
2025-05-03 14:36:12,025:INFO:Assigning column types.
2025-05-03 14:36:12,025:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 14:36:12,025:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,032:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,039:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,094:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,143:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,144:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,144:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,144:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,149:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,154:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,214:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,261:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,262:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,262:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,262:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 14:36:12,266:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,268:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,328:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,372:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,372:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,372:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,378:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,379:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,437:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,484:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,484:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,484:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 14:36:12,504:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,580:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,622:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,622:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,628:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,636:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,684:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,726:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,726:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,726:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 14:36:12,788:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,830:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,830:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,830:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,893:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,934:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 14:36:12,934:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,934:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:12,934:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 14:36:13,005:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:13,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,115:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 14:36:13,160:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,161:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 14:36:13,267:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,267:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,378:INFO:Preparing preprocessing pipeline...
2025-05-03 14:36:13,379:INFO:Set up simple imputation.
2025-05-03 14:36:13,379:INFO:Set up encoding of categorical features.
2025-05-03 14:36:13,379:INFO:Set up column name cleaning.
2025-05-03 14:36:13,462:INFO:Finished creating preprocessing pipeline.
2025-05-03 14:36:13,476:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend',
                                             'Electronics Sales',
                                             'Home Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 14:36:13,476:INFO:Creating final display dataframe.
2025-05-03 14:36:13,667:INFO:Setup _display_container:                     Description               Value
0                    Session id                   3
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape          (3000, 11)
5   Transformed train set shape          (2100, 11)
6    Transformed test set shape           (900, 11)
7               Ignore features                   1
8              Numeric features                   5
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                1a5f
2025-05-03 14:36:13,768:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,768:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,872:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,872:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 14:36:13,872:INFO:Logging experiment in loggers
2025-05-03 14:36:13,949:INFO:SubProcess save_model() called ==================================
2025-05-03 14:36:13,966:INFO:Initializing save_model()
2025-05-03 14:36:13,966:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend',
                                             'Electronics Sales',
                                             'Home Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp3iaotptg\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend',
                                             'Electronics Sales',
                                             'Home Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 14:36:13,966:INFO:Adding model into prep_pipe
2025-05-03 14:36:13,966:WARNING:Only Model saved as it was a pipeline.
2025-05-03 14:36:13,970:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp3iaotptg\Transformation Pipeline.pkl saved in current working directory
2025-05-03 14:36:13,976:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend',
                                             'Electronics Sales',
                                             'Home Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 14:36:13,976:INFO:save_model() successfully completed......................................
2025-05-03 14:36:14,136:INFO:SubProcess save_model() end ==================================
2025-05-03 14:36:14,157:INFO:setup() successfully completed in 1.87s...............
2025-05-03 14:36:14,226:INFO:Initializing compare_models()
2025-05-03 14:36:14,226:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 14:36:14,226:INFO:Checking exceptions
2025-05-03 14:36:14,226:INFO:Preparing display monitor
2025-05-03 14:36:14,226:INFO:Initializing Linear Regression
2025-05-03 14:36:14,226:INFO:Total runtime is 0.0 minutes
2025-05-03 14:36:14,226:INFO:SubProcess create_model() called ==================================
2025-05-03 14:36:14,226:INFO:Initializing create_model()
2025-05-03 14:36:14,226:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CBEE9D20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:14,226:INFO:Checking exceptions
2025-05-03 14:36:14,226:INFO:Importing libraries
2025-05-03 14:36:14,226:INFO:Copying training dataset
2025-05-03 14:36:14,233:INFO:Defining folds
2025-05-03 14:36:14,233:INFO:Declaring metric variables
2025-05-03 14:36:14,233:INFO:Importing untrained model
2025-05-03 14:36:14,233:INFO:Linear Regression Imported successfully
2025-05-03 14:36:14,233:INFO:Starting cross validation
2025-05-03 14:36:14,233:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:14,372:INFO:Calculating mean and std
2025-05-03 14:36:14,372:INFO:Creating metrics dataframe
2025-05-03 14:36:14,372:INFO:Uploading results into container
2025-05-03 14:36:14,372:INFO:Uploading model into container now
2025-05-03 14:36:14,372:INFO:_master_model_container: 1
2025-05-03 14:36:14,372:INFO:_display_container: 2
2025-05-03 14:36:14,372:INFO:LinearRegression(n_jobs=-1)
2025-05-03 14:36:14,372:INFO:create_model() successfully completed......................................
2025-05-03 14:36:14,525:INFO:SubProcess create_model() end ==================================
2025-05-03 14:36:14,525:INFO:Creating metrics dataframe
2025-05-03 14:36:14,525:INFO:Initializing Ridge Regression
2025-05-03 14:36:14,525:INFO:Total runtime is 0.00498042901357015 minutes
2025-05-03 14:36:14,525:INFO:SubProcess create_model() called ==================================
2025-05-03 14:36:14,525:INFO:Initializing create_model()
2025-05-03 14:36:14,525:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CBEE9D20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:14,525:INFO:Checking exceptions
2025-05-03 14:36:14,525:INFO:Importing libraries
2025-05-03 14:36:14,525:INFO:Copying training dataset
2025-05-03 14:36:14,532:INFO:Defining folds
2025-05-03 14:36:14,532:INFO:Declaring metric variables
2025-05-03 14:36:14,532:INFO:Importing untrained model
2025-05-03 14:36:14,532:INFO:Ridge Regression Imported successfully
2025-05-03 14:36:14,532:INFO:Starting cross validation
2025-05-03 14:36:14,532:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:14,664:INFO:Calculating mean and std
2025-05-03 14:36:14,664:INFO:Creating metrics dataframe
2025-05-03 14:36:14,664:INFO:Uploading results into container
2025-05-03 14:36:14,664:INFO:Uploading model into container now
2025-05-03 14:36:14,664:INFO:_master_model_container: 2
2025-05-03 14:36:14,664:INFO:_display_container: 2
2025-05-03 14:36:14,664:INFO:Ridge(random_state=3)
2025-05-03 14:36:14,664:INFO:create_model() successfully completed......................................
2025-05-03 14:36:14,817:INFO:SubProcess create_model() end ==================================
2025-05-03 14:36:14,817:INFO:Creating metrics dataframe
2025-05-03 14:36:14,820:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 14:36:14,820:INFO:Total runtime is 0.00990968147913615 minutes
2025-05-03 14:36:14,821:INFO:SubProcess create_model() called ==================================
2025-05-03 14:36:14,821:INFO:Initializing create_model()
2025-05-03 14:36:14,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CBEE9D20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:14,821:INFO:Checking exceptions
2025-05-03 14:36:14,821:INFO:Importing libraries
2025-05-03 14:36:14,821:INFO:Copying training dataset
2025-05-03 14:36:14,824:INFO:Defining folds
2025-05-03 14:36:14,824:INFO:Declaring metric variables
2025-05-03 14:36:14,824:INFO:Importing untrained model
2025-05-03 14:36:14,825:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 14:36:14,825:INFO:Starting cross validation
2025-05-03 14:36:14,826:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:15,387:INFO:Calculating mean and std
2025-05-03 14:36:15,388:INFO:Creating metrics dataframe
2025-05-03 14:36:15,393:INFO:Uploading results into container
2025-05-03 14:36:15,394:INFO:Uploading model into container now
2025-05-03 14:36:15,395:INFO:_master_model_container: 3
2025-05-03 14:36:15,395:INFO:_display_container: 2
2025-05-03 14:36:15,395:INFO:LGBMRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:15,396:INFO:create_model() successfully completed......................................
2025-05-03 14:36:15,573:INFO:SubProcess create_model() end ==================================
2025-05-03 14:36:15,573:INFO:Creating metrics dataframe
2025-05-03 14:36:15,577:INFO:Initializing Random Forest Regressor
2025-05-03 14:36:15,577:INFO:Total runtime is 0.022525747617085777 minutes
2025-05-03 14:36:15,577:INFO:SubProcess create_model() called ==================================
2025-05-03 14:36:15,577:INFO:Initializing create_model()
2025-05-03 14:36:15,577:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CBEE9D20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:15,577:INFO:Checking exceptions
2025-05-03 14:36:15,577:INFO:Importing libraries
2025-05-03 14:36:15,577:INFO:Copying training dataset
2025-05-03 14:36:15,581:INFO:Defining folds
2025-05-03 14:36:15,581:INFO:Declaring metric variables
2025-05-03 14:36:15,581:INFO:Importing untrained model
2025-05-03 14:36:15,581:INFO:Random Forest Regressor Imported successfully
2025-05-03 14:36:15,581:INFO:Starting cross validation
2025-05-03 14:36:15,582:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:16,504:INFO:Calculating mean and std
2025-05-03 14:36:16,504:INFO:Creating metrics dataframe
2025-05-03 14:36:16,504:INFO:Uploading results into container
2025-05-03 14:36:16,504:INFO:Uploading model into container now
2025-05-03 14:36:16,504:INFO:_master_model_container: 4
2025-05-03 14:36:16,504:INFO:_display_container: 2
2025-05-03 14:36:16,504:INFO:RandomForestRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:16,504:INFO:create_model() successfully completed......................................
2025-05-03 14:36:16,659:INFO:SubProcess create_model() end ==================================
2025-05-03 14:36:16,659:INFO:Creating metrics dataframe
2025-05-03 14:36:16,663:INFO:Initializing Extra Trees Regressor
2025-05-03 14:36:16,663:INFO:Total runtime is 0.040624606609344485 minutes
2025-05-03 14:36:16,665:INFO:SubProcess create_model() called ==================================
2025-05-03 14:36:16,665:INFO:Initializing create_model()
2025-05-03 14:36:16,665:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CBEE9D20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:16,665:INFO:Checking exceptions
2025-05-03 14:36:16,665:INFO:Importing libraries
2025-05-03 14:36:16,665:INFO:Copying training dataset
2025-05-03 14:36:16,665:INFO:Defining folds
2025-05-03 14:36:16,665:INFO:Declaring metric variables
2025-05-03 14:36:16,665:INFO:Importing untrained model
2025-05-03 14:36:16,665:INFO:Extra Trees Regressor Imported successfully
2025-05-03 14:36:16,665:INFO:Starting cross validation
2025-05-03 14:36:16,665:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:17,274:INFO:Calculating mean and std
2025-05-03 14:36:17,274:INFO:Creating metrics dataframe
2025-05-03 14:36:17,274:INFO:Uploading results into container
2025-05-03 14:36:17,274:INFO:Uploading model into container now
2025-05-03 14:36:17,274:INFO:_master_model_container: 5
2025-05-03 14:36:17,274:INFO:_display_container: 2
2025-05-03 14:36:17,274:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:17,274:INFO:create_model() successfully completed......................................
2025-05-03 14:36:17,434:INFO:SubProcess create_model() end ==================================
2025-05-03 14:36:17,434:INFO:Creating metrics dataframe
2025-05-03 14:36:17,435:INFO:Initializing create_model()
2025-05-03 14:36:17,435:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=Ridge(random_state=3), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:17,435:INFO:Checking exceptions
2025-05-03 14:36:17,435:INFO:Importing libraries
2025-05-03 14:36:17,435:INFO:Copying training dataset
2025-05-03 14:36:17,441:INFO:Defining folds
2025-05-03 14:36:17,441:INFO:Declaring metric variables
2025-05-03 14:36:17,441:INFO:Importing untrained model
2025-05-03 14:36:17,441:INFO:Declaring custom model
2025-05-03 14:36:17,441:INFO:Ridge Regression Imported successfully
2025-05-03 14:36:17,441:INFO:Cross validation set to False
2025-05-03 14:36:17,441:INFO:Fitting Model
2025-05-03 14:36:17,490:INFO:Ridge(random_state=3)
2025-05-03 14:36:17,490:INFO:create_model() successfully completed......................................
2025-05-03 14:36:17,649:INFO:Creating Dashboard logs
2025-05-03 14:36:17,649:INFO:Model: Ridge Regression
2025-05-03 14:36:17,670:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 3, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 14:36:17,775:INFO:Initializing predict_model()
2025-05-03 14:36:17,775:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=Ridge(random_state=3), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FF520>)
2025-05-03 14:36:17,775:INFO:Checking exceptions
2025-05-03 14:36:17,775:INFO:Preloading libraries
2025-05-03 14:36:17,879:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:18,289:INFO:Creating Dashboard logs
2025-05-03 14:36:18,289:INFO:Model: Linear Regression
2025-05-03 14:36:18,317:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 14:36:18,629:INFO:Creating Dashboard logs
2025-05-03 14:36:18,629:INFO:Model: Random Forest Regressor
2025-05-03 14:36:18,650:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 3, 'verbose': 0, 'warm_start': False}
2025-05-03 14:36:18,949:INFO:Creating Dashboard logs
2025-05-03 14:36:18,949:INFO:Model: Extra Trees Regressor
2025-05-03 14:36:18,970:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 3, 'verbose': 0, 'warm_start': False}
2025-05-03 14:36:19,289:INFO:Creating Dashboard logs
2025-05-03 14:36:19,295:INFO:Model: Light Gradient Boosting Machine
2025-05-03 14:36:19,317:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 3, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 14:36:19,636:INFO:_master_model_container: 5
2025-05-03 14:36:19,636:INFO:_display_container: 2
2025-05-03 14:36:19,636:INFO:Ridge(random_state=3)
2025-05-03 14:36:19,636:INFO:compare_models() successfully completed......................................
2025-05-03 14:36:19,711:INFO:Initializing create_model()
2025-05-03 14:36:19,711:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:19,711:INFO:Checking exceptions
2025-05-03 14:36:19,712:INFO:Importing libraries
2025-05-03 14:36:19,712:INFO:Copying training dataset
2025-05-03 14:36:19,715:INFO:Defining folds
2025-05-03 14:36:19,715:INFO:Declaring metric variables
2025-05-03 14:36:19,716:INFO:Importing untrained model
2025-05-03 14:36:19,716:INFO:Linear Regression Imported successfully
2025-05-03 14:36:19,716:INFO:Starting cross validation
2025-05-03 14:36:19,717:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:19,845:INFO:Calculating mean and std
2025-05-03 14:36:19,845:INFO:Creating metrics dataframe
2025-05-03 14:36:19,845:INFO:Finalizing model
2025-05-03 14:36:19,900:INFO:Creating Dashboard logs
2025-05-03 14:36:19,900:INFO:Model: Linear Regression
2025-05-03 14:36:19,920:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 14:36:20,019:INFO:Initializing predict_model()
2025-05-03 14:36:20,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FD870>)
2025-05-03 14:36:20,019:INFO:Checking exceptions
2025-05-03 14:36:20,019:INFO:Preloading libraries
2025-05-03 14:36:20,132:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:20,504:INFO:Uploading results into container
2025-05-03 14:36:20,504:INFO:Uploading model into container now
2025-05-03 14:36:20,504:INFO:_master_model_container: 6
2025-05-03 14:36:20,504:INFO:_display_container: 3
2025-05-03 14:36:20,504:INFO:LinearRegression(n_jobs=-1)
2025-05-03 14:36:20,504:INFO:create_model() successfully completed......................................
2025-05-03 14:36:20,681:INFO:Initializing plot_model()
2025-05-03 14:36:20,681:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, system=True)
2025-05-03 14:36:20,681:INFO:Checking exceptions
2025-05-03 14:36:20,683:INFO:Preloading libraries
2025-05-03 14:36:20,683:INFO:Copying training dataset
2025-05-03 14:36:20,683:INFO:Plot type: feature
2025-05-03 14:36:20,787:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:36:20,914:INFO:Saving 'Feature Importance.png'
2025-05-03 14:36:21,041:INFO:Visual Rendered Successfully
2025-05-03 14:36:21,192:INFO:plot_model() successfully completed......................................
2025-05-03 14:36:21,274:INFO:Initializing create_model()
2025-05-03 14:36:21,274:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:21,275:INFO:Checking exceptions
2025-05-03 14:36:21,275:INFO:Importing libraries
2025-05-03 14:36:21,275:INFO:Copying training dataset
2025-05-03 14:36:21,275:INFO:Defining folds
2025-05-03 14:36:21,275:INFO:Declaring metric variables
2025-05-03 14:36:21,275:INFO:Importing untrained model
2025-05-03 14:36:21,275:INFO:Ridge Regression Imported successfully
2025-05-03 14:36:21,275:INFO:Starting cross validation
2025-05-03 14:36:21,281:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:21,421:INFO:Calculating mean and std
2025-05-03 14:36:21,421:INFO:Creating metrics dataframe
2025-05-03 14:36:21,421:INFO:Finalizing model
2025-05-03 14:36:21,477:INFO:Creating Dashboard logs
2025-05-03 14:36:21,477:INFO:Model: Ridge Regression
2025-05-03 14:36:21,497:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 3, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 14:36:21,594:INFO:Initializing predict_model()
2025-05-03 14:36:21,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=Ridge(random_state=3), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FC940>)
2025-05-03 14:36:21,594:INFO:Checking exceptions
2025-05-03 14:36:21,594:INFO:Preloading libraries
2025-05-03 14:36:21,692:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:22,060:INFO:Uploading results into container
2025-05-03 14:36:22,060:INFO:Uploading model into container now
2025-05-03 14:36:22,060:INFO:_master_model_container: 7
2025-05-03 14:36:22,060:INFO:_display_container: 4
2025-05-03 14:36:22,060:INFO:Ridge(random_state=3)
2025-05-03 14:36:22,060:INFO:create_model() successfully completed......................................
2025-05-03 14:36:22,283:INFO:Initializing plot_model()
2025-05-03 14:36:22,283:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=3), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, system=True)
2025-05-03 14:36:22,283:INFO:Checking exceptions
2025-05-03 14:36:22,283:INFO:Preloading libraries
2025-05-03 14:36:22,283:INFO:Copying training dataset
2025-05-03 14:36:22,283:INFO:Plot type: feature
2025-05-03 14:36:22,386:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:36:22,504:INFO:Saving 'Feature Importance.png'
2025-05-03 14:36:22,642:INFO:Visual Rendered Successfully
2025-05-03 14:36:22,789:INFO:plot_model() successfully completed......................................
2025-05-03 14:36:22,863:INFO:Initializing create_model()
2025-05-03 14:36:22,863:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:22,863:INFO:Checking exceptions
2025-05-03 14:36:22,864:INFO:Importing libraries
2025-05-03 14:36:22,864:INFO:Copying training dataset
2025-05-03 14:36:22,866:INFO:Defining folds
2025-05-03 14:36:22,866:INFO:Declaring metric variables
2025-05-03 14:36:22,866:INFO:Importing untrained model
2025-05-03 14:36:22,866:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 14:36:22,866:INFO:Starting cross validation
2025-05-03 14:36:22,866:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:23,435:INFO:Calculating mean and std
2025-05-03 14:36:23,435:INFO:Creating metrics dataframe
2025-05-03 14:36:23,435:INFO:Finalizing model
2025-05-03 14:36:23,516:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 14:36:23,516:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000173 seconds.
2025-05-03 14:36:23,516:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 14:36:23,517:INFO:[LightGBM] [Info] Total Bins 1184
2025-05-03 14:36:23,517:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 10
2025-05-03 14:36:23,517:INFO:[LightGBM] [Info] Start training from score 88688.307253
2025-05-03 14:36:23,574:INFO:Creating Dashboard logs
2025-05-03 14:36:23,574:INFO:Model: Light Gradient Boosting Machine
2025-05-03 14:36:23,601:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 3, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 14:36:23,712:INFO:Initializing predict_model()
2025-05-03 14:36:23,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=LGBMRegressor(n_jobs=-1, random_state=3), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAE9B250>)
2025-05-03 14:36:23,712:INFO:Checking exceptions
2025-05-03 14:36:23,712:INFO:Preloading libraries
2025-05-03 14:36:23,824:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:24,261:INFO:Uploading results into container
2025-05-03 14:36:24,261:INFO:Uploading model into container now
2025-05-03 14:36:24,261:INFO:_master_model_container: 8
2025-05-03 14:36:24,261:INFO:_display_container: 5
2025-05-03 14:36:24,261:INFO:LGBMRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:24,261:INFO:create_model() successfully completed......................................
2025-05-03 14:36:24,459:INFO:Initializing plot_model()
2025-05-03 14:36:24,460:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=3), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, system=True)
2025-05-03 14:36:24,460:INFO:Checking exceptions
2025-05-03 14:36:24,462:INFO:Preloading libraries
2025-05-03 14:36:24,466:INFO:Copying training dataset
2025-05-03 14:36:24,466:INFO:Plot type: feature
2025-05-03 14:36:24,466:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:36:24,553:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:36:24,664:INFO:Saving 'Feature Importance.png'
2025-05-03 14:36:24,787:INFO:Visual Rendered Successfully
2025-05-03 14:36:24,935:INFO:plot_model() successfully completed......................................
2025-05-03 14:36:25,017:INFO:Initializing create_model()
2025-05-03 14:36:25,017:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:25,017:INFO:Checking exceptions
2025-05-03 14:36:25,018:INFO:Importing libraries
2025-05-03 14:36:25,019:INFO:Copying training dataset
2025-05-03 14:36:25,020:INFO:Defining folds
2025-05-03 14:36:25,020:INFO:Declaring metric variables
2025-05-03 14:36:25,020:INFO:Importing untrained model
2025-05-03 14:36:25,020:INFO:Random Forest Regressor Imported successfully
2025-05-03 14:36:25,020:INFO:Starting cross validation
2025-05-03 14:36:25,020:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:26,023:INFO:Calculating mean and std
2025-05-03 14:36:26,023:INFO:Creating metrics dataframe
2025-05-03 14:36:26,026:INFO:Finalizing model
2025-05-03 14:36:26,320:INFO:Creating Dashboard logs
2025-05-03 14:36:26,321:INFO:Model: Random Forest Regressor
2025-05-03 14:36:26,337:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 3, 'verbose': 0, 'warm_start': False}
2025-05-03 14:36:26,441:INFO:Initializing predict_model()
2025-05-03 14:36:26,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FE170>)
2025-05-03 14:36:26,441:INFO:Checking exceptions
2025-05-03 14:36:26,441:INFO:Preloading libraries
2025-05-03 14:36:26,573:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:26,983:INFO:Uploading results into container
2025-05-03 14:36:26,990:INFO:Uploading model into container now
2025-05-03 14:36:26,990:INFO:_master_model_container: 9
2025-05-03 14:36:26,990:INFO:_display_container: 6
2025-05-03 14:36:26,990:INFO:RandomForestRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:26,990:INFO:create_model() successfully completed......................................
2025-05-03 14:36:27,199:INFO:Initializing plot_model()
2025-05-03 14:36:27,199:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=3), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, system=True)
2025-05-03 14:36:27,199:INFO:Checking exceptions
2025-05-03 14:36:27,219:INFO:Preloading libraries
2025-05-03 14:36:27,251:INFO:Copying training dataset
2025-05-03 14:36:27,251:INFO:Plot type: feature
2025-05-03 14:36:27,251:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:36:27,323:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:36:27,434:INFO:Saving 'Feature Importance.png'
2025-05-03 14:36:27,560:INFO:Visual Rendered Successfully
2025-05-03 14:36:27,712:INFO:plot_model() successfully completed......................................
2025-05-03 14:36:27,796:INFO:Initializing create_model()
2025-05-03 14:36:27,796:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 14:36:27,796:INFO:Checking exceptions
2025-05-03 14:36:27,797:INFO:Importing libraries
2025-05-03 14:36:27,797:INFO:Copying training dataset
2025-05-03 14:36:27,800:INFO:Defining folds
2025-05-03 14:36:27,801:INFO:Declaring metric variables
2025-05-03 14:36:27,801:INFO:Importing untrained model
2025-05-03 14:36:27,801:INFO:Extra Trees Regressor Imported successfully
2025-05-03 14:36:27,801:INFO:Starting cross validation
2025-05-03 14:36:27,802:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 14:36:28,459:INFO:Calculating mean and std
2025-05-03 14:36:28,460:INFO:Creating metrics dataframe
2025-05-03 14:36:28,462:INFO:Finalizing model
2025-05-03 14:36:28,662:INFO:Creating Dashboard logs
2025-05-03 14:36:28,663:INFO:Model: Extra Trees Regressor
2025-05-03 14:36:28,677:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 3, 'verbose': 0, 'warm_start': False}
2025-05-03 14:36:28,782:INFO:Initializing predict_model()
2025-05-03 14:36:28,782:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=3), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FDC60>)
2025-05-03 14:36:28,782:INFO:Checking exceptions
2025-05-03 14:36:28,782:INFO:Preloading libraries
2025-05-03 14:36:28,925:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 14:36:29,364:INFO:Uploading results into container
2025-05-03 14:36:29,364:INFO:Uploading model into container now
2025-05-03 14:36:29,364:INFO:_master_model_container: 10
2025-05-03 14:36:29,364:INFO:_display_container: 7
2025-05-03 14:36:29,364:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3)
2025-05-03 14:36:29,364:INFO:create_model() successfully completed......................................
2025-05-03 14:36:29,580:INFO:Initializing plot_model()
2025-05-03 14:36:29,580:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=3), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF18C4040>, system=True)
2025-05-03 14:36:29,580:INFO:Checking exceptions
2025-05-03 14:36:29,607:INFO:Preloading libraries
2025-05-03 14:36:29,654:INFO:Copying training dataset
2025-05-03 14:36:29,654:INFO:Plot type: feature
2025-05-03 14:36:29,655:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 14:36:29,727:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 14:36:29,847:INFO:Saving 'Feature Importance.png'
2025-05-03 14:36:29,973:INFO:Visual Rendered Successfully
2025-05-03 14:36:30,114:INFO:plot_model() successfully completed......................................
2025-05-03 15:20:45,705:INFO:PyCaret RegressionExperiment
2025-05-03 15:20:45,705:INFO:Logging name: automl_bigdata_exp
2025-05-03 15:20:45,705:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 15:20:45,705:INFO:version 3.3.2
2025-05-03 15:20:45,705:INFO:Initializing setup()
2025-05-03 15:20:45,705:INFO:self.USI: ff75
2025-05-03 15:20:45,705:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'X_test', '_available_plots', 'fold_generator', 'USI', 'logging_param', 'y_test', 'y', 'memory', 'X', 'data', 'transform_target_param', 'idx', 'exp_id', '_ml_usecase', 'y_train', 'X_train', 'target_param', 'gpu_param', 'exp_name_log', 'pipeline', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed'}
2025-05-03 15:20:45,705:INFO:Checking environment
2025-05-03 15:20:45,706:INFO:python_version: 3.10.11
2025-05-03 15:20:45,706:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 15:20:45,706:INFO:machine: AMD64
2025-05-03 15:20:45,706:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 15:20:45,710:INFO:Memory: svmem(total=8403075072, available=1302818816, percent=84.5, used=7100256256, free=1302818816)
2025-05-03 15:20:45,710:INFO:Physical Core: 6
2025-05-03 15:20:45,710:INFO:Logical Core: 12
2025-05-03 15:20:45,710:INFO:Checking libraries
2025-05-03 15:20:45,710:INFO:System:
2025-05-03 15:20:45,710:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 15:20:45,710:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 15:20:45,710:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 15:20:45,710:INFO:PyCaret required dependencies:
2025-05-03 15:20:45,711:INFO:                 pip: 23.0.1
2025-05-03 15:20:45,711:INFO:          setuptools: 65.5.0
2025-05-03 15:20:45,711:INFO:             pycaret: 3.3.2
2025-05-03 15:20:45,711:INFO:             IPython: 8.36.0
2025-05-03 15:20:45,711:INFO:          ipywidgets: 8.1.6
2025-05-03 15:20:45,711:INFO:                tqdm: 4.67.1
2025-05-03 15:20:45,711:INFO:               numpy: 1.26.4
2025-05-03 15:20:45,711:INFO:              pandas: 1.5.3
2025-05-03 15:20:45,711:INFO:              jinja2: 3.1.6
2025-05-03 15:20:45,711:INFO:               scipy: 1.11.4
2025-05-03 15:20:45,711:INFO:              joblib: 1.3.2
2025-05-03 15:20:45,711:INFO:             sklearn: 1.4.2
2025-05-03 15:20:45,711:INFO:                pyod: 2.0.4
2025-05-03 15:20:45,711:INFO:            imblearn: 0.13.0
2025-05-03 15:20:45,711:INFO:   category_encoders: 2.7.0
2025-05-03 15:20:45,711:INFO:            lightgbm: 4.6.0
2025-05-03 15:20:45,711:INFO:               numba: 0.61.0
2025-05-03 15:20:45,711:INFO:            requests: 2.32.3
2025-05-03 15:20:45,711:INFO:          matplotlib: 3.7.5
2025-05-03 15:20:45,711:INFO:          scikitplot: 0.3.7
2025-05-03 15:20:45,712:INFO:         yellowbrick: 1.5
2025-05-03 15:20:45,712:INFO:              plotly: 5.24.1
2025-05-03 15:20:45,712:INFO:    plotly-resampler: Not installed
2025-05-03 15:20:45,712:INFO:             kaleido: 0.2.1
2025-05-03 15:20:45,712:INFO:           schemdraw: 0.15
2025-05-03 15:20:45,712:INFO:         statsmodels: 0.14.4
2025-05-03 15:20:45,712:INFO:              sktime: 0.26.0
2025-05-03 15:20:45,712:INFO:               tbats: 1.1.3
2025-05-03 15:20:45,712:INFO:            pmdarima: 2.0.4
2025-05-03 15:20:45,712:INFO:              psutil: 7.0.0
2025-05-03 15:20:45,712:INFO:          markupsafe: 3.0.2
2025-05-03 15:20:45,712:INFO:             pickle5: Not installed
2025-05-03 15:20:45,712:INFO:         cloudpickle: 2.2.1
2025-05-03 15:20:45,712:INFO:         deprecation: 2.1.0
2025-05-03 15:20:45,712:INFO:              xxhash: 3.5.0
2025-05-03 15:20:45,712:INFO:           wurlitzer: Not installed
2025-05-03 15:20:45,712:INFO:PyCaret optional dependencies:
2025-05-03 15:20:45,712:INFO:                shap: 0.47.2
2025-05-03 15:20:45,712:INFO:           interpret: Not installed
2025-05-03 15:20:45,712:INFO:                umap: Not installed
2025-05-03 15:20:45,712:INFO:     ydata_profiling: 4.16.1
2025-05-03 15:20:45,712:INFO:  explainerdashboard: Not installed
2025-05-03 15:20:45,712:INFO:             autoviz: Not installed
2025-05-03 15:20:45,712:INFO:           fairlearn: Not installed
2025-05-03 15:20:45,712:INFO:          deepchecks: Not installed
2025-05-03 15:20:45,712:INFO:             xgboost: Not installed
2025-05-03 15:20:45,712:INFO:            catboost: Not installed
2025-05-03 15:20:45,713:INFO:              kmodes: Not installed
2025-05-03 15:20:45,713:INFO:             mlxtend: Not installed
2025-05-03 15:20:45,713:INFO:       statsforecast: Not installed
2025-05-03 15:20:45,713:INFO:        tune_sklearn: Not installed
2025-05-03 15:20:45,713:INFO:                 ray: Not installed
2025-05-03 15:20:45,713:INFO:            hyperopt: Not installed
2025-05-03 15:20:45,713:INFO:              optuna: 4.3.0
2025-05-03 15:20:45,713:INFO:               skopt: Not installed
2025-05-03 15:20:45,713:INFO:              mlflow: 1.30.0
2025-05-03 15:20:45,713:INFO:              gradio: Not installed
2025-05-03 15:20:45,713:INFO:             fastapi: 0.115.12
2025-05-03 15:20:45,713:INFO:             uvicorn: 0.34.2
2025-05-03 15:20:45,713:INFO:              m2cgen: Not installed
2025-05-03 15:20:45,713:INFO:           evidently: 0.7.3
2025-05-03 15:20:45,713:INFO:               fugue: Not installed
2025-05-03 15:20:45,713:INFO:           streamlit: Not installed
2025-05-03 15:20:45,713:INFO:             prophet: Not installed
2025-05-03 15:20:45,713:INFO:None
2025-05-03 15:20:45,713:INFO:Set up data.
2025-05-03 15:20:45,720:INFO:Set up folding strategy.
2025-05-03 15:20:45,720:INFO:Set up train/test split.
2025-05-03 15:20:45,729:INFO:Set up index.
2025-05-03 15:20:45,729:INFO:Assigning column types.
2025-05-03 15:20:45,732:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 15:20:45,733:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,738:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,742:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,804:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,852:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,854:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:45,855:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:45,856:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,861:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,866:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,924:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,972:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,973:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:45,973:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:45,973:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 15:20:45,978:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:20:45,982:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,035:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,100:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,106:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,111:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,193:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,232:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,239:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 15:20:46,246:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,303:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,343:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,343:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,350:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,413:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,454:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,454:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,454:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,454:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 15:20:46,517:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,565:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,628:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,669:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,676:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,677:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,677:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 15:20:46,732:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,780:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,843:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:20:46,884:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,885:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 15:20:46,989:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:46,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,097:INFO:Preparing preprocessing pipeline...
2025-05-03 15:20:47,097:INFO:Set up simple imputation.
2025-05-03 15:20:47,100:INFO:Set up encoding of categorical features.
2025-05-03 15:20:47,100:INFO:Set up column name cleaning.
2025-05-03 15:20:47,196:INFO:Finished creating preprocessing pipeline.
2025-05-03 15:20:47,205:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:20:47,205:INFO:Creating final display dataframe.
2025-05-03 15:20:47,405:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                ff75
2025-05-03 15:20:47,510:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,511:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,614:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:20:47,621:INFO:Logging experiment in loggers
2025-05-03 15:20:47,698:INFO:SubProcess save_model() called ==================================
2025-05-03 15:20:47,718:INFO:Initializing save_model()
2025-05-03 15:20:47,718:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp24wg8s2r\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 15:20:47,718:INFO:Adding model into prep_pipe
2025-05-03 15:20:47,718:WARNING:Only Model saved as it was a pipeline.
2025-05-03 15:20:47,718:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp24wg8s2r\Transformation Pipeline.pkl saved in current working directory
2025-05-03 15:20:47,731:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:20:47,731:INFO:save_model() successfully completed......................................
2025-05-03 15:20:48,149:INFO:SubProcess save_model() end ==================================
2025-05-03 15:20:48,166:INFO:setup() successfully completed in 1.93s...............
2025-05-03 15:20:48,239:INFO:Initializing compare_models()
2025-05-03 15:20:48,239:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 15:20:48,239:INFO:Checking exceptions
2025-05-03 15:20:48,239:INFO:Preparing display monitor
2025-05-03 15:20:48,246:INFO:Initializing Linear Regression
2025-05-03 15:20:48,246:INFO:Total runtime is 0.0 minutes
2025-05-03 15:20:48,246:INFO:SubProcess create_model() called ==================================
2025-05-03 15:20:48,246:INFO:Initializing create_model()
2025-05-03 15:20:48,246:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF45A8070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:20:48,246:INFO:Checking exceptions
2025-05-03 15:20:48,246:INFO:Importing libraries
2025-05-03 15:20:48,246:INFO:Copying training dataset
2025-05-03 15:20:48,246:INFO:Defining folds
2025-05-03 15:20:48,246:INFO:Declaring metric variables
2025-05-03 15:20:48,246:INFO:Importing untrained model
2025-05-03 15:20:48,246:INFO:Linear Regression Imported successfully
2025-05-03 15:20:48,246:INFO:Starting cross validation
2025-05-03 15:20:48,253:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:20:53,906:INFO:Calculating mean and std
2025-05-03 15:20:53,906:INFO:Creating metrics dataframe
2025-05-03 15:20:53,913:INFO:Uploading results into container
2025-05-03 15:20:53,914:INFO:Uploading model into container now
2025-05-03 15:20:53,915:INFO:_master_model_container: 1
2025-05-03 15:20:53,915:INFO:_display_container: 2
2025-05-03 15:20:53,916:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:20:53,916:INFO:create_model() successfully completed......................................
2025-05-03 15:20:54,148:INFO:SubProcess create_model() end ==================================
2025-05-03 15:20:54,148:INFO:Creating metrics dataframe
2025-05-03 15:20:54,156:INFO:Initializing Ridge Regression
2025-05-03 15:20:54,156:INFO:Total runtime is 0.098494819800059 minutes
2025-05-03 15:20:54,156:INFO:SubProcess create_model() called ==================================
2025-05-03 15:20:54,156:INFO:Initializing create_model()
2025-05-03 15:20:54,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF45A8070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:20:54,156:INFO:Checking exceptions
2025-05-03 15:20:54,156:INFO:Importing libraries
2025-05-03 15:20:54,156:INFO:Copying training dataset
2025-05-03 15:20:54,156:INFO:Defining folds
2025-05-03 15:20:54,156:INFO:Declaring metric variables
2025-05-03 15:20:54,156:INFO:Importing untrained model
2025-05-03 15:20:54,162:INFO:Ridge Regression Imported successfully
2025-05-03 15:20:54,162:INFO:Starting cross validation
2025-05-03 15:20:54,163:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:20:57,848:INFO:Calculating mean and std
2025-05-03 15:20:57,848:INFO:Creating metrics dataframe
2025-05-03 15:20:57,848:INFO:Uploading results into container
2025-05-03 15:20:57,848:INFO:Uploading model into container now
2025-05-03 15:20:57,848:INFO:_master_model_container: 2
2025-05-03 15:20:57,848:INFO:_display_container: 2
2025-05-03 15:20:57,848:INFO:Ridge(random_state=4)
2025-05-03 15:20:57,848:INFO:create_model() successfully completed......................................
2025-05-03 15:20:58,098:INFO:SubProcess create_model() end ==================================
2025-05-03 15:20:58,098:INFO:Creating metrics dataframe
2025-05-03 15:20:58,098:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 15:20:58,098:INFO:Total runtime is 0.16420490344365438 minutes
2025-05-03 15:20:58,098:INFO:SubProcess create_model() called ==================================
2025-05-03 15:20:58,098:INFO:Initializing create_model()
2025-05-03 15:20:58,098:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF45A8070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:20:58,098:INFO:Checking exceptions
2025-05-03 15:20:58,098:INFO:Importing libraries
2025-05-03 15:20:58,098:INFO:Copying training dataset
2025-05-03 15:20:58,098:INFO:Defining folds
2025-05-03 15:20:58,098:INFO:Declaring metric variables
2025-05-03 15:20:58,098:INFO:Importing untrained model
2025-05-03 15:20:58,114:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:20:58,114:INFO:Starting cross validation
2025-05-03 15:20:58,115:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:01,488:INFO:Calculating mean and std
2025-05-03 15:21:01,488:INFO:Creating metrics dataframe
2025-05-03 15:21:01,488:INFO:Uploading results into container
2025-05-03 15:21:01,496:INFO:Uploading model into container now
2025-05-03 15:21:01,496:INFO:_master_model_container: 3
2025-05-03 15:21:01,496:INFO:_display_container: 2
2025-05-03 15:21:01,496:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:01,496:INFO:create_model() successfully completed......................................
2025-05-03 15:21:01,676:INFO:SubProcess create_model() end ==================================
2025-05-03 15:21:01,676:INFO:Creating metrics dataframe
2025-05-03 15:21:01,676:INFO:Initializing Random Forest Regressor
2025-05-03 15:21:01,676:INFO:Total runtime is 0.22384385665257772 minutes
2025-05-03 15:21:01,676:INFO:SubProcess create_model() called ==================================
2025-05-03 15:21:01,676:INFO:Initializing create_model()
2025-05-03 15:21:01,676:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF45A8070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:01,676:INFO:Checking exceptions
2025-05-03 15:21:01,676:INFO:Importing libraries
2025-05-03 15:21:01,683:INFO:Copying training dataset
2025-05-03 15:21:01,683:INFO:Defining folds
2025-05-03 15:21:01,683:INFO:Declaring metric variables
2025-05-03 15:21:01,683:INFO:Importing untrained model
2025-05-03 15:21:01,683:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:21:01,683:INFO:Starting cross validation
2025-05-03 15:21:01,683:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:02,287:INFO:Calculating mean and std
2025-05-03 15:21:02,287:INFO:Creating metrics dataframe
2025-05-03 15:21:02,287:INFO:Uploading results into container
2025-05-03 15:21:02,287:INFO:Uploading model into container now
2025-05-03 15:21:02,287:INFO:_master_model_container: 4
2025-05-03 15:21:02,287:INFO:_display_container: 2
2025-05-03 15:21:02,287:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:02,287:INFO:create_model() successfully completed......................................
2025-05-03 15:21:02,426:INFO:SubProcess create_model() end ==================================
2025-05-03 15:21:02,426:INFO:Creating metrics dataframe
2025-05-03 15:21:02,442:INFO:Initializing Extra Trees Regressor
2025-05-03 15:21:02,445:INFO:Total runtime is 0.23664535681406657 minutes
2025-05-03 15:21:02,445:INFO:SubProcess create_model() called ==================================
2025-05-03 15:21:02,445:INFO:Initializing create_model()
2025-05-03 15:21:02,445:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF45A8070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:02,445:INFO:Checking exceptions
2025-05-03 15:21:02,445:INFO:Importing libraries
2025-05-03 15:21:02,445:INFO:Copying training dataset
2025-05-03 15:21:02,445:INFO:Defining folds
2025-05-03 15:21:02,445:INFO:Declaring metric variables
2025-05-03 15:21:02,445:INFO:Importing untrained model
2025-05-03 15:21:02,445:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:21:02,445:INFO:Starting cross validation
2025-05-03 15:21:02,445:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:02,912:INFO:Calculating mean and std
2025-05-03 15:21:02,912:INFO:Creating metrics dataframe
2025-05-03 15:21:02,912:INFO:Uploading results into container
2025-05-03 15:21:02,912:INFO:Uploading model into container now
2025-05-03 15:21:02,912:INFO:_master_model_container: 5
2025-05-03 15:21:02,912:INFO:_display_container: 2
2025-05-03 15:21:02,912:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:02,912:INFO:create_model() successfully completed......................................
2025-05-03 15:21:03,058:INFO:SubProcess create_model() end ==================================
2025-05-03 15:21:03,058:INFO:Creating metrics dataframe
2025-05-03 15:21:03,073:INFO:Initializing create_model()
2025-05-03 15:21:03,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:03,073:INFO:Checking exceptions
2025-05-03 15:21:03,073:INFO:Importing libraries
2025-05-03 15:21:03,073:INFO:Copying training dataset
2025-05-03 15:21:03,073:INFO:Defining folds
2025-05-03 15:21:03,073:INFO:Declaring metric variables
2025-05-03 15:21:03,073:INFO:Importing untrained model
2025-05-03 15:21:03,073:INFO:Declaring custom model
2025-05-03 15:21:03,073:INFO:Ridge Regression Imported successfully
2025-05-03 15:21:03,073:INFO:Cross validation set to False
2025-05-03 15:21:03,073:INFO:Fitting Model
2025-05-03 15:21:03,121:INFO:Ridge(random_state=4)
2025-05-03 15:21:03,121:INFO:create_model() successfully completed......................................
2025-05-03 15:21:03,297:INFO:Creating Dashboard logs
2025-05-03 15:21:03,297:INFO:Model: Ridge Regression
2025-05-03 15:21:03,328:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:21:03,448:INFO:Initializing predict_model()
2025-05-03 15:21:03,448:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5E290>)
2025-05-03 15:21:03,448:INFO:Checking exceptions
2025-05-03 15:21:03,448:INFO:Preloading libraries
2025-05-03 15:21:03,560:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:03,949:INFO:Creating Dashboard logs
2025-05-03 15:21:03,949:INFO:Model: Linear Regression
2025-05-03 15:21:03,964:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:21:04,287:INFO:Creating Dashboard logs
2025-05-03 15:21:04,287:INFO:Model: Random Forest Regressor
2025-05-03 15:21:04,311:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:21:04,688:INFO:Creating Dashboard logs
2025-05-03 15:21:04,689:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:21:04,709:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:21:05,032:INFO:Creating Dashboard logs
2025-05-03 15:21:05,032:INFO:Model: Extra Trees Regressor
2025-05-03 15:21:05,048:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:21:05,378:INFO:_master_model_container: 5
2025-05-03 15:21:05,378:INFO:_display_container: 2
2025-05-03 15:21:05,378:INFO:Ridge(random_state=4)
2025-05-03 15:21:05,378:INFO:compare_models() successfully completed......................................
2025-05-03 15:21:05,531:INFO:Initializing create_model()
2025-05-03 15:21:05,532:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:05,532:INFO:Checking exceptions
2025-05-03 15:21:05,534:INFO:Importing libraries
2025-05-03 15:21:05,534:INFO:Copying training dataset
2025-05-03 15:21:05,546:INFO:Defining folds
2025-05-03 15:21:05,547:INFO:Declaring metric variables
2025-05-03 15:21:05,547:INFO:Importing untrained model
2025-05-03 15:21:05,547:INFO:Linear Regression Imported successfully
2025-05-03 15:21:05,548:INFO:Starting cross validation
2025-05-03 15:21:05,553:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:05,824:INFO:Calculating mean and std
2025-05-03 15:21:05,825:INFO:Creating metrics dataframe
2025-05-03 15:21:05,825:INFO:Finalizing model
2025-05-03 15:21:05,884:INFO:Creating Dashboard logs
2025-05-03 15:21:05,884:INFO:Model: Linear Regression
2025-05-03 15:21:05,905:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:21:06,030:INFO:Initializing predict_model()
2025-05-03 15:21:06,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CE075C60>)
2025-05-03 15:21:06,030:INFO:Checking exceptions
2025-05-03 15:21:06,030:INFO:Preloading libraries
2025-05-03 15:21:06,143:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:06,518:INFO:Uploading results into container
2025-05-03 15:21:06,519:INFO:Uploading model into container now
2025-05-03 15:21:06,519:INFO:_master_model_container: 6
2025-05-03 15:21:06,519:INFO:_display_container: 3
2025-05-03 15:21:06,520:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:21:06,520:INFO:create_model() successfully completed......................................
2025-05-03 15:21:06,681:INFO:Initializing plot_model()
2025-05-03 15:21:06,681:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, system=True)
2025-05-03 15:21:06,681:INFO:Checking exceptions
2025-05-03 15:21:06,682:INFO:Preloading libraries
2025-05-03 15:21:06,683:INFO:Copying training dataset
2025-05-03 15:21:06,683:INFO:Plot type: feature
2025-05-03 15:21:06,763:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:21:06,931:INFO:Saving 'Feature Importance.png'
2025-05-03 15:21:07,035:INFO:Visual Rendered Successfully
2025-05-03 15:21:07,173:INFO:plot_model() successfully completed......................................
2025-05-03 15:21:07,253:INFO:Initializing create_model()
2025-05-03 15:21:07,253:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:07,253:INFO:Checking exceptions
2025-05-03 15:21:07,253:INFO:Importing libraries
2025-05-03 15:21:07,259:INFO:Copying training dataset
2025-05-03 15:21:07,262:INFO:Defining folds
2025-05-03 15:21:07,262:INFO:Declaring metric variables
2025-05-03 15:21:07,263:INFO:Importing untrained model
2025-05-03 15:21:07,263:INFO:Ridge Regression Imported successfully
2025-05-03 15:21:07,263:INFO:Starting cross validation
2025-05-03 15:21:07,264:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:07,413:INFO:Calculating mean and std
2025-05-03 15:21:07,413:INFO:Creating metrics dataframe
2025-05-03 15:21:07,413:INFO:Finalizing model
2025-05-03 15:21:07,461:INFO:Creating Dashboard logs
2025-05-03 15:21:07,461:INFO:Model: Ridge Regression
2025-05-03 15:21:07,482:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:21:07,579:INFO:Initializing predict_model()
2025-05-03 15:21:07,579:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FFB50>)
2025-05-03 15:21:07,579:INFO:Checking exceptions
2025-05-03 15:21:07,579:INFO:Preloading libraries
2025-05-03 15:21:07,688:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:08,088:INFO:Uploading results into container
2025-05-03 15:21:08,088:INFO:Uploading model into container now
2025-05-03 15:21:08,088:INFO:_master_model_container: 7
2025-05-03 15:21:08,088:INFO:_display_container: 4
2025-05-03 15:21:08,088:INFO:Ridge(random_state=4)
2025-05-03 15:21:08,088:INFO:create_model() successfully completed......................................
2025-05-03 15:21:08,256:INFO:Initializing plot_model()
2025-05-03 15:21:08,256:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, system=True)
2025-05-03 15:21:08,256:INFO:Checking exceptions
2025-05-03 15:21:08,259:INFO:Preloading libraries
2025-05-03 15:21:08,259:INFO:Copying training dataset
2025-05-03 15:21:08,259:INFO:Plot type: feature
2025-05-03 15:21:08,339:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:21:08,451:INFO:Saving 'Feature Importance.png'
2025-05-03 15:21:08,548:INFO:Visual Rendered Successfully
2025-05-03 15:21:08,670:INFO:plot_model() successfully completed......................................
2025-05-03 15:21:08,754:INFO:Initializing create_model()
2025-05-03 15:21:08,754:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:08,754:INFO:Checking exceptions
2025-05-03 15:21:08,754:INFO:Importing libraries
2025-05-03 15:21:08,754:INFO:Copying training dataset
2025-05-03 15:21:08,760:INFO:Defining folds
2025-05-03 15:21:08,760:INFO:Declaring metric variables
2025-05-03 15:21:08,760:INFO:Importing untrained model
2025-05-03 15:21:08,760:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:21:08,760:INFO:Starting cross validation
2025-05-03 15:21:08,760:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:09,220:INFO:Calculating mean and std
2025-05-03 15:21:09,220:INFO:Creating metrics dataframe
2025-05-03 15:21:09,220:INFO:Finalizing model
2025-05-03 15:21:09,283:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 15:21:09,283:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000133 seconds.
2025-05-03 15:21:09,283:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 15:21:09,283:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 15:21:09,283:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 15:21:09,299:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 15:21:09,354:INFO:Creating Dashboard logs
2025-05-03 15:21:09,355:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:21:09,379:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:21:09,492:INFO:Initializing predict_model()
2025-05-03 15:21:09,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020FF133D900>)
2025-05-03 15:21:09,492:INFO:Checking exceptions
2025-05-03 15:21:09,493:INFO:Preloading libraries
2025-05-03 15:21:09,599:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:10,085:INFO:Uploading results into container
2025-05-03 15:21:10,087:INFO:Uploading model into container now
2025-05-03 15:21:10,088:INFO:_master_model_container: 8
2025-05-03 15:21:10,088:INFO:_display_container: 5
2025-05-03 15:21:10,088:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:10,088:INFO:create_model() successfully completed......................................
2025-05-03 15:21:10,305:INFO:Initializing plot_model()
2025-05-03 15:21:10,306:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, system=True)
2025-05-03 15:21:10,306:INFO:Checking exceptions
2025-05-03 15:21:10,307:INFO:Preloading libraries
2025-05-03 15:21:10,312:INFO:Copying training dataset
2025-05-03 15:21:10,312:INFO:Plot type: feature
2025-05-03 15:21:10,312:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:21:10,374:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:21:10,489:INFO:Saving 'Feature Importance.png'
2025-05-03 15:21:10,598:INFO:Visual Rendered Successfully
2025-05-03 15:21:10,859:INFO:plot_model() successfully completed......................................
2025-05-03 15:21:10,969:INFO:Initializing create_model()
2025-05-03 15:21:10,969:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:10,969:INFO:Checking exceptions
2025-05-03 15:21:10,969:INFO:Importing libraries
2025-05-03 15:21:10,969:INFO:Copying training dataset
2025-05-03 15:21:10,969:INFO:Defining folds
2025-05-03 15:21:10,969:INFO:Declaring metric variables
2025-05-03 15:21:10,969:INFO:Importing untrained model
2025-05-03 15:21:10,969:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:21:10,969:INFO:Starting cross validation
2025-05-03 15:21:10,985:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:11,740:INFO:Calculating mean and std
2025-05-03 15:21:11,740:INFO:Creating metrics dataframe
2025-05-03 15:21:11,740:INFO:Finalizing model
2025-05-03 15:21:11,976:INFO:Creating Dashboard logs
2025-05-03 15:21:11,976:INFO:Model: Random Forest Regressor
2025-05-03 15:21:11,992:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:21:12,101:INFO:Initializing predict_model()
2025-05-03 15:21:12,101:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5ED40>)
2025-05-03 15:21:12,101:INFO:Checking exceptions
2025-05-03 15:21:12,101:INFO:Preloading libraries
2025-05-03 15:21:12,244:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:12,708:INFO:Uploading results into container
2025-05-03 15:21:12,708:INFO:Uploading model into container now
2025-05-03 15:21:12,710:INFO:_master_model_container: 9
2025-05-03 15:21:12,710:INFO:_display_container: 6
2025-05-03 15:21:12,711:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:12,711:INFO:create_model() successfully completed......................................
2025-05-03 15:21:12,963:INFO:Initializing plot_model()
2025-05-03 15:21:12,963:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, system=True)
2025-05-03 15:21:12,963:INFO:Checking exceptions
2025-05-03 15:21:12,984:INFO:Preloading libraries
2025-05-03 15:21:13,018:INFO:Copying training dataset
2025-05-03 15:21:13,018:INFO:Plot type: feature
2025-05-03 15:21:13,019:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:21:13,093:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:21:13,186:INFO:Saving 'Feature Importance.png'
2025-05-03 15:21:13,296:INFO:Visual Rendered Successfully
2025-05-03 15:21:13,437:INFO:plot_model() successfully completed......................................
2025-05-03 15:21:13,534:INFO:Initializing create_model()
2025-05-03 15:21:13,534:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:21:13,534:INFO:Checking exceptions
2025-05-03 15:21:13,535:INFO:Importing libraries
2025-05-03 15:21:13,535:INFO:Copying training dataset
2025-05-03 15:21:13,538:INFO:Defining folds
2025-05-03 15:21:13,538:INFO:Declaring metric variables
2025-05-03 15:21:13,538:INFO:Importing untrained model
2025-05-03 15:21:13,539:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:21:13,539:INFO:Starting cross validation
2025-05-03 15:21:13,540:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:21:14,026:INFO:Calculating mean and std
2025-05-03 15:21:14,026:INFO:Creating metrics dataframe
2025-05-03 15:21:14,026:INFO:Finalizing model
2025-05-03 15:21:14,192:INFO:Creating Dashboard logs
2025-05-03 15:21:14,192:INFO:Model: Extra Trees Regressor
2025-05-03 15:21:14,208:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:21:14,318:INFO:Initializing predict_model()
2025-05-03 15:21:14,318:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FCEE0>)
2025-05-03 15:21:14,318:INFO:Checking exceptions
2025-05-03 15:21:14,318:INFO:Preloading libraries
2025-05-03 15:21:14,460:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:21:14,921:INFO:Uploading results into container
2025-05-03 15:21:14,922:INFO:Uploading model into container now
2025-05-03 15:21:14,922:INFO:_master_model_container: 10
2025-05-03 15:21:14,922:INFO:_display_container: 7
2025-05-03 15:21:14,922:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:21:14,922:INFO:create_model() successfully completed......................................
2025-05-03 15:21:15,150:INFO:Initializing plot_model()
2025-05-03 15:21:15,150:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF1F9C670>, system=True)
2025-05-03 15:21:15,150:INFO:Checking exceptions
2025-05-03 15:21:15,191:INFO:Preloading libraries
2025-05-03 15:21:15,234:INFO:Copying training dataset
2025-05-03 15:21:15,234:INFO:Plot type: feature
2025-05-03 15:21:15,234:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:21:15,312:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:21:15,406:INFO:Saving 'Feature Importance.png'
2025-05-03 15:21:15,519:INFO:Visual Rendered Successfully
2025-05-03 15:21:15,676:INFO:plot_model() successfully completed......................................
2025-05-03 15:23:59,440:INFO:PyCaret RegressionExperiment
2025-05-03 15:23:59,441:INFO:Logging name: automl_bigdata_exp
2025-05-03 15:23:59,441:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 15:23:59,441:INFO:version 3.3.2
2025-05-03 15:23:59,441:INFO:Initializing setup()
2025-05-03 15:23:59,441:INFO:self.USI: 5bd7
2025-05-03 15:23:59,441:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'X_test', '_available_plots', 'fold_generator', 'USI', 'logging_param', 'y_test', 'y', 'memory', 'X', 'data', 'transform_target_param', 'idx', 'exp_id', '_ml_usecase', 'y_train', 'X_train', 'target_param', 'gpu_param', 'exp_name_log', 'pipeline', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed'}
2025-05-03 15:23:59,441:INFO:Checking environment
2025-05-03 15:23:59,441:INFO:python_version: 3.10.11
2025-05-03 15:23:59,441:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 15:23:59,442:INFO:machine: AMD64
2025-05-03 15:23:59,442:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 15:23:59,449:INFO:Memory: svmem(total=8403075072, available=1080803328, percent=87.1, used=7322271744, free=1080803328)
2025-05-03 15:23:59,449:INFO:Physical Core: 6
2025-05-03 15:23:59,449:INFO:Logical Core: 12
2025-05-03 15:23:59,450:INFO:Checking libraries
2025-05-03 15:23:59,450:INFO:System:
2025-05-03 15:23:59,450:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 15:23:59,450:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 15:23:59,450:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 15:23:59,450:INFO:PyCaret required dependencies:
2025-05-03 15:23:59,450:INFO:                 pip: 23.0.1
2025-05-03 15:23:59,450:INFO:          setuptools: 65.5.0
2025-05-03 15:23:59,450:INFO:             pycaret: 3.3.2
2025-05-03 15:23:59,450:INFO:             IPython: 8.36.0
2025-05-03 15:23:59,450:INFO:          ipywidgets: 8.1.6
2025-05-03 15:23:59,450:INFO:                tqdm: 4.67.1
2025-05-03 15:23:59,450:INFO:               numpy: 1.26.4
2025-05-03 15:23:59,450:INFO:              pandas: 1.5.3
2025-05-03 15:23:59,450:INFO:              jinja2: 3.1.6
2025-05-03 15:23:59,451:INFO:               scipy: 1.11.4
2025-05-03 15:23:59,451:INFO:              joblib: 1.3.2
2025-05-03 15:23:59,451:INFO:             sklearn: 1.4.2
2025-05-03 15:23:59,451:INFO:                pyod: 2.0.4
2025-05-03 15:23:59,451:INFO:            imblearn: 0.13.0
2025-05-03 15:23:59,451:INFO:   category_encoders: 2.7.0
2025-05-03 15:23:59,451:INFO:            lightgbm: 4.6.0
2025-05-03 15:23:59,451:INFO:               numba: 0.61.0
2025-05-03 15:23:59,451:INFO:            requests: 2.32.3
2025-05-03 15:23:59,451:INFO:          matplotlib: 3.7.5
2025-05-03 15:23:59,451:INFO:          scikitplot: 0.3.7
2025-05-03 15:23:59,451:INFO:         yellowbrick: 1.5
2025-05-03 15:23:59,451:INFO:              plotly: 5.24.1
2025-05-03 15:23:59,451:INFO:    plotly-resampler: Not installed
2025-05-03 15:23:59,451:INFO:             kaleido: 0.2.1
2025-05-03 15:23:59,451:INFO:           schemdraw: 0.15
2025-05-03 15:23:59,451:INFO:         statsmodels: 0.14.4
2025-05-03 15:23:59,451:INFO:              sktime: 0.26.0
2025-05-03 15:23:59,451:INFO:               tbats: 1.1.3
2025-05-03 15:23:59,451:INFO:            pmdarima: 2.0.4
2025-05-03 15:23:59,451:INFO:              psutil: 7.0.0
2025-05-03 15:23:59,451:INFO:          markupsafe: 3.0.2
2025-05-03 15:23:59,452:INFO:             pickle5: Not installed
2025-05-03 15:23:59,452:INFO:         cloudpickle: 2.2.1
2025-05-03 15:23:59,452:INFO:         deprecation: 2.1.0
2025-05-03 15:23:59,452:INFO:              xxhash: 3.5.0
2025-05-03 15:23:59,452:INFO:           wurlitzer: Not installed
2025-05-03 15:23:59,452:INFO:PyCaret optional dependencies:
2025-05-03 15:23:59,452:INFO:                shap: 0.47.2
2025-05-03 15:23:59,452:INFO:           interpret: Not installed
2025-05-03 15:23:59,452:INFO:                umap: Not installed
2025-05-03 15:23:59,452:INFO:     ydata_profiling: 4.16.1
2025-05-03 15:23:59,452:INFO:  explainerdashboard: Not installed
2025-05-03 15:23:59,452:INFO:             autoviz: Not installed
2025-05-03 15:23:59,452:INFO:           fairlearn: Not installed
2025-05-03 15:23:59,452:INFO:          deepchecks: Not installed
2025-05-03 15:23:59,452:INFO:             xgboost: Not installed
2025-05-03 15:23:59,452:INFO:            catboost: Not installed
2025-05-03 15:23:59,452:INFO:              kmodes: Not installed
2025-05-03 15:23:59,452:INFO:             mlxtend: Not installed
2025-05-03 15:23:59,452:INFO:       statsforecast: Not installed
2025-05-03 15:23:59,452:INFO:        tune_sklearn: Not installed
2025-05-03 15:23:59,452:INFO:                 ray: Not installed
2025-05-03 15:23:59,452:INFO:            hyperopt: Not installed
2025-05-03 15:23:59,452:INFO:              optuna: 4.3.0
2025-05-03 15:23:59,452:INFO:               skopt: Not installed
2025-05-03 15:23:59,452:INFO:              mlflow: 1.30.0
2025-05-03 15:23:59,452:INFO:              gradio: Not installed
2025-05-03 15:23:59,452:INFO:             fastapi: 0.115.12
2025-05-03 15:23:59,453:INFO:             uvicorn: 0.34.2
2025-05-03 15:23:59,453:INFO:              m2cgen: Not installed
2025-05-03 15:23:59,453:INFO:           evidently: 0.7.3
2025-05-03 15:23:59,453:INFO:               fugue: Not installed
2025-05-03 15:23:59,453:INFO:           streamlit: Not installed
2025-05-03 15:23:59,453:INFO:             prophet: Not installed
2025-05-03 15:23:59,453:INFO:None
2025-05-03 15:23:59,453:INFO:Set up data.
2025-05-03 15:23:59,463:INFO:Set up folding strategy.
2025-05-03 15:23:59,464:INFO:Set up train/test split.
2025-05-03 15:23:59,472:INFO:Set up index.
2025-05-03 15:23:59,472:INFO:Assigning column types.
2025-05-03 15:23:59,479:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 15:23:59,480:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,488:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,492:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,558:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,599:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,599:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,611:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,611:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,611:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,702:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,779:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,780:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 15:23:59,785:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,790:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,853:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,894:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,901:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,901:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:23:59,905:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,912:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:23:59,970:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,012:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,012:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,012:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,012:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 15:24:00,019:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,074:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,130:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,130:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,137:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,196:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,238:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,239:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,239:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,240:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 15:24:00,305:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,354:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,354:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,355:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,426:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,469:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,469:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,470:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,470:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 15:24:00,538:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,580:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,644:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:24:00,692:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,692:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 15:24:00,810:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,810:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,927:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:00,930:INFO:Preparing preprocessing pipeline...
2025-05-03 15:24:00,930:INFO:Set up simple imputation.
2025-05-03 15:24:00,933:INFO:Set up encoding of categorical features.
2025-05-03 15:24:00,934:INFO:Set up column name cleaning.
2025-05-03 15:24:01,053:INFO:Finished creating preprocessing pipeline.
2025-05-03 15:24:01,060:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:24:01,060:INFO:Creating final display dataframe.
2025-05-03 15:24:01,294:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 7)
5   Transformed train set shape           (2100, 7)
6    Transformed test set shape            (900, 7)
7               Ignore features                   5
8              Numeric features                   1
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                5bd7
2025-05-03 15:24:01,396:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:01,397:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:01,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:01,498:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:24:01,498:INFO:Logging experiment in loggers
2025-05-03 15:24:02,046:INFO:SubProcess save_model() called ==================================
2025-05-03 15:24:02,067:INFO:Initializing save_model()
2025-05-03 15:24:02,067:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpw18f4pa_\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 15:24:02,067:INFO:Adding model into prep_pipe
2025-05-03 15:24:02,067:WARNING:Only Model saved as it was a pipeline.
2025-05-03 15:24:02,067:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpw18f4pa_\Transformation Pipeline.pkl saved in current working directory
2025-05-03 15:24:02,088:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:24:02,088:INFO:save_model() successfully completed......................................
2025-05-03 15:24:02,294:INFO:SubProcess save_model() end ==================================
2025-05-03 15:24:02,388:INFO:setup() successfully completed in 2.06s...............
2025-05-03 15:24:02,845:INFO:Initializing compare_models()
2025-05-03 15:24:02,845:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 15:24:02,845:INFO:Checking exceptions
2025-05-03 15:24:02,845:INFO:Preparing display monitor
2025-05-03 15:24:02,845:INFO:Initializing Linear Regression
2025-05-03 15:24:02,845:INFO:Total runtime is 0.0 minutes
2025-05-03 15:24:02,845:INFO:SubProcess create_model() called ==================================
2025-05-03 15:24:02,845:INFO:Initializing create_model()
2025-05-03 15:24:02,845:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CACB6DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:02,845:INFO:Checking exceptions
2025-05-03 15:24:02,845:INFO:Importing libraries
2025-05-03 15:24:02,845:INFO:Copying training dataset
2025-05-03 15:24:02,852:INFO:Defining folds
2025-05-03 15:24:02,852:INFO:Declaring metric variables
2025-05-03 15:24:02,852:INFO:Importing untrained model
2025-05-03 15:24:02,852:INFO:Linear Regression Imported successfully
2025-05-03 15:24:02,852:INFO:Starting cross validation
2025-05-03 15:24:02,852:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:03,173:INFO:Calculating mean and std
2025-05-03 15:24:03,173:INFO:Creating metrics dataframe
2025-05-03 15:24:03,176:INFO:Uploading results into container
2025-05-03 15:24:03,177:INFO:Uploading model into container now
2025-05-03 15:24:03,177:INFO:_master_model_container: 1
2025-05-03 15:24:03,177:INFO:_display_container: 2
2025-05-03 15:24:03,177:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:24:03,177:INFO:create_model() successfully completed......................................
2025-05-03 15:24:03,424:INFO:SubProcess create_model() end ==================================
2025-05-03 15:24:03,425:INFO:Creating metrics dataframe
2025-05-03 15:24:03,428:INFO:Initializing Ridge Regression
2025-05-03 15:24:03,428:INFO:Total runtime is 0.009723583857218424 minutes
2025-05-03 15:24:03,428:INFO:SubProcess create_model() called ==================================
2025-05-03 15:24:03,428:INFO:Initializing create_model()
2025-05-03 15:24:03,428:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CACB6DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:03,428:INFO:Checking exceptions
2025-05-03 15:24:03,428:INFO:Importing libraries
2025-05-03 15:24:03,428:INFO:Copying training dataset
2025-05-03 15:24:03,428:INFO:Defining folds
2025-05-03 15:24:03,428:INFO:Declaring metric variables
2025-05-03 15:24:03,428:INFO:Importing untrained model
2025-05-03 15:24:03,428:INFO:Ridge Regression Imported successfully
2025-05-03 15:24:03,428:INFO:Starting cross validation
2025-05-03 15:24:03,435:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:03,603:INFO:Calculating mean and std
2025-05-03 15:24:03,603:INFO:Creating metrics dataframe
2025-05-03 15:24:03,603:INFO:Uploading results into container
2025-05-03 15:24:03,603:INFO:Uploading model into container now
2025-05-03 15:24:03,603:INFO:_master_model_container: 2
2025-05-03 15:24:03,603:INFO:_display_container: 2
2025-05-03 15:24:03,603:INFO:Ridge(random_state=4)
2025-05-03 15:24:03,603:INFO:create_model() successfully completed......................................
2025-05-03 15:24:03,790:INFO:SubProcess create_model() end ==================================
2025-05-03 15:24:03,790:INFO:Creating metrics dataframe
2025-05-03 15:24:03,797:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 15:24:03,797:INFO:Total runtime is 0.01586652596791585 minutes
2025-05-03 15:24:03,797:INFO:SubProcess create_model() called ==================================
2025-05-03 15:24:03,797:INFO:Initializing create_model()
2025-05-03 15:24:03,797:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CACB6DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:03,797:INFO:Checking exceptions
2025-05-03 15:24:03,797:INFO:Importing libraries
2025-05-03 15:24:03,797:INFO:Copying training dataset
2025-05-03 15:24:03,801:INFO:Defining folds
2025-05-03 15:24:03,801:INFO:Declaring metric variables
2025-05-03 15:24:03,801:INFO:Importing untrained model
2025-05-03 15:24:03,802:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:24:03,802:INFO:Starting cross validation
2025-05-03 15:24:03,803:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:04,305:INFO:Calculating mean and std
2025-05-03 15:24:04,306:INFO:Creating metrics dataframe
2025-05-03 15:24:04,310:INFO:Uploading results into container
2025-05-03 15:24:04,311:INFO:Uploading model into container now
2025-05-03 15:24:04,311:INFO:_master_model_container: 3
2025-05-03 15:24:04,311:INFO:_display_container: 2
2025-05-03 15:24:04,312:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:04,312:INFO:create_model() successfully completed......................................
2025-05-03 15:24:04,484:INFO:SubProcess create_model() end ==================================
2025-05-03 15:24:04,484:INFO:Creating metrics dataframe
2025-05-03 15:24:04,491:INFO:Initializing Random Forest Regressor
2025-05-03 15:24:04,491:INFO:Total runtime is 0.027427872021993 minutes
2025-05-03 15:24:04,491:INFO:SubProcess create_model() called ==================================
2025-05-03 15:24:04,491:INFO:Initializing create_model()
2025-05-03 15:24:04,491:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CACB6DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:04,491:INFO:Checking exceptions
2025-05-03 15:24:04,491:INFO:Importing libraries
2025-05-03 15:24:04,491:INFO:Copying training dataset
2025-05-03 15:24:04,491:INFO:Defining folds
2025-05-03 15:24:04,491:INFO:Declaring metric variables
2025-05-03 15:24:04,491:INFO:Importing untrained model
2025-05-03 15:24:04,491:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:24:04,491:INFO:Starting cross validation
2025-05-03 15:24:04,497:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:04,977:INFO:Calculating mean and std
2025-05-03 15:24:04,977:INFO:Creating metrics dataframe
2025-05-03 15:24:04,977:INFO:Uploading results into container
2025-05-03 15:24:04,977:INFO:Uploading model into container now
2025-05-03 15:24:04,977:INFO:_master_model_container: 4
2025-05-03 15:24:04,977:INFO:_display_container: 2
2025-05-03 15:24:04,977:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:04,977:INFO:create_model() successfully completed......................................
2025-05-03 15:24:05,131:INFO:SubProcess create_model() end ==================================
2025-05-03 15:24:05,131:INFO:Creating metrics dataframe
2025-05-03 15:24:05,135:INFO:Initializing Extra Trees Regressor
2025-05-03 15:24:05,135:INFO:Total runtime is 0.03817120393117269 minutes
2025-05-03 15:24:05,135:INFO:SubProcess create_model() called ==================================
2025-05-03 15:24:05,136:INFO:Initializing create_model()
2025-05-03 15:24:05,136:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210CACB6DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:05,136:INFO:Checking exceptions
2025-05-03 15:24:05,136:INFO:Importing libraries
2025-05-03 15:24:05,136:INFO:Copying training dataset
2025-05-03 15:24:05,139:INFO:Defining folds
2025-05-03 15:24:05,139:INFO:Declaring metric variables
2025-05-03 15:24:05,139:INFO:Importing untrained model
2025-05-03 15:24:05,140:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:24:05,140:INFO:Starting cross validation
2025-05-03 15:24:05,141:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:05,613:INFO:Calculating mean and std
2025-05-03 15:24:05,613:INFO:Creating metrics dataframe
2025-05-03 15:24:05,617:INFO:Uploading results into container
2025-05-03 15:24:05,617:INFO:Uploading model into container now
2025-05-03 15:24:05,617:INFO:_master_model_container: 5
2025-05-03 15:24:05,617:INFO:_display_container: 2
2025-05-03 15:24:05,618:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:05,618:INFO:create_model() successfully completed......................................
2025-05-03 15:24:05,782:INFO:SubProcess create_model() end ==================================
2025-05-03 15:24:05,782:INFO:Creating metrics dataframe
2025-05-03 15:24:05,782:INFO:Initializing create_model()
2025-05-03 15:24:05,782:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:05,782:INFO:Checking exceptions
2025-05-03 15:24:05,782:INFO:Importing libraries
2025-05-03 15:24:05,782:INFO:Copying training dataset
2025-05-03 15:24:05,798:INFO:Defining folds
2025-05-03 15:24:05,798:INFO:Declaring metric variables
2025-05-03 15:24:05,798:INFO:Importing untrained model
2025-05-03 15:24:05,798:INFO:Declaring custom model
2025-05-03 15:24:05,798:INFO:Ridge Regression Imported successfully
2025-05-03 15:24:05,798:INFO:Cross validation set to False
2025-05-03 15:24:05,798:INFO:Fitting Model
2025-05-03 15:24:05,833:INFO:Ridge(random_state=4)
2025-05-03 15:24:05,833:INFO:create_model() successfully completed......................................
2025-05-03 15:24:05,988:INFO:Creating Dashboard logs
2025-05-03 15:24:05,988:INFO:Model: Ridge Regression
2025-05-03 15:24:06,052:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:24:06,863:INFO:Initializing predict_model()
2025-05-03 15:24:06,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CADA2950>)
2025-05-03 15:24:06,863:INFO:Checking exceptions
2025-05-03 15:24:06,863:INFO:Preloading libraries
2025-05-03 15:24:07,050:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:07,917:INFO:Creating Dashboard logs
2025-05-03 15:24:07,918:INFO:Model: Linear Regression
2025-05-03 15:24:08,003:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:24:08,410:INFO:Creating Dashboard logs
2025-05-03 15:24:08,410:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:24:08,439:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:24:08,707:INFO:Creating Dashboard logs
2025-05-03 15:24:08,707:INFO:Model: Random Forest Regressor
2025-05-03 15:24:08,722:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:24:09,019:INFO:Creating Dashboard logs
2025-05-03 15:24:09,019:INFO:Model: Extra Trees Regressor
2025-05-03 15:24:09,035:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:24:09,304:INFO:_master_model_container: 5
2025-05-03 15:24:09,304:INFO:_display_container: 2
2025-05-03 15:24:09,304:INFO:Ridge(random_state=4)
2025-05-03 15:24:09,304:INFO:compare_models() successfully completed......................................
2025-05-03 15:24:09,379:INFO:Initializing create_model()
2025-05-03 15:24:09,379:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:09,379:INFO:Checking exceptions
2025-05-03 15:24:09,395:INFO:Importing libraries
2025-05-03 15:24:09,395:INFO:Copying training dataset
2025-05-03 15:24:09,395:INFO:Defining folds
2025-05-03 15:24:09,395:INFO:Declaring metric variables
2025-05-03 15:24:09,395:INFO:Importing untrained model
2025-05-03 15:24:09,395:INFO:Linear Regression Imported successfully
2025-05-03 15:24:09,395:INFO:Starting cross validation
2025-05-03 15:24:09,395:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:09,519:INFO:Calculating mean and std
2025-05-03 15:24:09,519:INFO:Creating metrics dataframe
2025-05-03 15:24:09,519:INFO:Finalizing model
2025-05-03 15:24:09,566:INFO:Creating Dashboard logs
2025-05-03 15:24:09,566:INFO:Model: Linear Regression
2025-05-03 15:24:09,597:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:24:09,692:INFO:Initializing predict_model()
2025-05-03 15:24:09,692:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CADA2A70>)
2025-05-03 15:24:09,692:INFO:Checking exceptions
2025-05-03 15:24:09,692:INFO:Preloading libraries
2025-05-03 15:24:09,819:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:10,238:INFO:Uploading results into container
2025-05-03 15:24:10,238:INFO:Uploading model into container now
2025-05-03 15:24:10,238:INFO:_master_model_container: 6
2025-05-03 15:24:10,238:INFO:_display_container: 3
2025-05-03 15:24:10,238:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:24:10,238:INFO:create_model() successfully completed......................................
2025-05-03 15:24:10,410:INFO:Initializing plot_model()
2025-05-03 15:24:10,410:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, system=True)
2025-05-03 15:24:10,410:INFO:Checking exceptions
2025-05-03 15:24:10,410:INFO:Preloading libraries
2025-05-03 15:24:10,410:INFO:Copying training dataset
2025-05-03 15:24:10,410:INFO:Plot type: feature
2025-05-03 15:24:10,504:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:24:10,643:INFO:Saving 'Feature Importance.png'
2025-05-03 15:24:10,738:INFO:Visual Rendered Successfully
2025-05-03 15:24:10,875:INFO:plot_model() successfully completed......................................
2025-05-03 15:24:10,952:INFO:Initializing create_model()
2025-05-03 15:24:10,952:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:10,952:INFO:Checking exceptions
2025-05-03 15:24:10,953:INFO:Importing libraries
2025-05-03 15:24:10,953:INFO:Copying training dataset
2025-05-03 15:24:10,957:INFO:Defining folds
2025-05-03 15:24:10,958:INFO:Declaring metric variables
2025-05-03 15:24:10,958:INFO:Importing untrained model
2025-05-03 15:24:10,959:INFO:Ridge Regression Imported successfully
2025-05-03 15:24:10,959:INFO:Starting cross validation
2025-05-03 15:24:10,960:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:11,082:INFO:Calculating mean and std
2025-05-03 15:24:11,082:INFO:Creating metrics dataframe
2025-05-03 15:24:11,084:INFO:Finalizing model
2025-05-03 15:24:11,129:INFO:Creating Dashboard logs
2025-05-03 15:24:11,129:INFO:Model: Ridge Regression
2025-05-03 15:24:11,144:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:24:11,254:INFO:Initializing predict_model()
2025-05-03 15:24:11,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CADA0310>)
2025-05-03 15:24:11,254:INFO:Checking exceptions
2025-05-03 15:24:11,254:INFO:Preloading libraries
2025-05-03 15:24:11,351:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:11,789:INFO:Uploading results into container
2025-05-03 15:24:11,790:INFO:Uploading model into container now
2025-05-03 15:24:11,790:INFO:_master_model_container: 7
2025-05-03 15:24:11,791:INFO:_display_container: 4
2025-05-03 15:24:11,791:INFO:Ridge(random_state=4)
2025-05-03 15:24:11,791:INFO:create_model() successfully completed......................................
2025-05-03 15:24:12,074:INFO:Initializing plot_model()
2025-05-03 15:24:12,074:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, system=True)
2025-05-03 15:24:12,074:INFO:Checking exceptions
2025-05-03 15:24:12,077:INFO:Preloading libraries
2025-05-03 15:24:12,077:INFO:Copying training dataset
2025-05-03 15:24:12,077:INFO:Plot type: feature
2025-05-03 15:24:12,200:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:24:12,393:INFO:Saving 'Feature Importance.png'
2025-05-03 15:24:12,546:INFO:Visual Rendered Successfully
2025-05-03 15:24:12,763:INFO:plot_model() successfully completed......................................
2025-05-03 15:24:12,865:INFO:Initializing create_model()
2025-05-03 15:24:12,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:12,865:INFO:Checking exceptions
2025-05-03 15:24:12,865:INFO:Importing libraries
2025-05-03 15:24:12,865:INFO:Copying training dataset
2025-05-03 15:24:12,873:INFO:Defining folds
2025-05-03 15:24:12,873:INFO:Declaring metric variables
2025-05-03 15:24:12,873:INFO:Importing untrained model
2025-05-03 15:24:12,873:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:24:12,873:INFO:Starting cross validation
2025-05-03 15:24:12,873:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:13,435:INFO:Calculating mean and std
2025-05-03 15:24:13,435:INFO:Creating metrics dataframe
2025-05-03 15:24:13,435:INFO:Finalizing model
2025-05-03 15:24:13,520:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 15:24:13,520:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000095 seconds.
2025-05-03 15:24:13,520:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 15:24:13,520:INFO:[LightGBM] [Info] Total Bins 164
2025-05-03 15:24:13,520:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 6
2025-05-03 15:24:13,520:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 15:24:13,600:INFO:Creating Dashboard logs
2025-05-03 15:24:13,601:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:24:13,631:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:24:13,751:INFO:Initializing predict_model()
2025-05-03 15:24:13,751:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5DF30>)
2025-05-03 15:24:13,751:INFO:Checking exceptions
2025-05-03 15:24:13,751:INFO:Preloading libraries
2025-05-03 15:24:13,861:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:14,343:INFO:Uploading results into container
2025-05-03 15:24:14,343:INFO:Uploading model into container now
2025-05-03 15:24:14,358:INFO:_master_model_container: 8
2025-05-03 15:24:14,358:INFO:_display_container: 5
2025-05-03 15:24:14,359:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:14,360:INFO:create_model() successfully completed......................................
2025-05-03 15:24:14,571:INFO:Initializing plot_model()
2025-05-03 15:24:14,571:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, system=True)
2025-05-03 15:24:14,571:INFO:Checking exceptions
2025-05-03 15:24:14,571:INFO:Preloading libraries
2025-05-03 15:24:14,571:INFO:Copying training dataset
2025-05-03 15:24:14,571:INFO:Plot type: feature
2025-05-03 15:24:14,571:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:24:14,658:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:24:14,767:INFO:Saving 'Feature Importance.png'
2025-05-03 15:24:14,881:INFO:Visual Rendered Successfully
2025-05-03 15:24:15,039:INFO:plot_model() successfully completed......................................
2025-05-03 15:24:15,130:INFO:Initializing create_model()
2025-05-03 15:24:15,130:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:15,130:INFO:Checking exceptions
2025-05-03 15:24:15,131:INFO:Importing libraries
2025-05-03 15:24:15,131:INFO:Copying training dataset
2025-05-03 15:24:15,131:INFO:Defining folds
2025-05-03 15:24:15,131:INFO:Declaring metric variables
2025-05-03 15:24:15,131:INFO:Importing untrained model
2025-05-03 15:24:15,131:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:24:15,131:INFO:Starting cross validation
2025-05-03 15:24:15,137:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:15,672:INFO:Calculating mean and std
2025-05-03 15:24:15,672:INFO:Creating metrics dataframe
2025-05-03 15:24:15,672:INFO:Finalizing model
2025-05-03 15:24:15,871:INFO:Creating Dashboard logs
2025-05-03 15:24:15,871:INFO:Model: Random Forest Regressor
2025-05-03 15:24:15,903:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:24:16,018:INFO:Initializing predict_model()
2025-05-03 15:24:16,018:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5EA70>)
2025-05-03 15:24:16,018:INFO:Checking exceptions
2025-05-03 15:24:16,018:INFO:Preloading libraries
2025-05-03 15:24:16,164:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:16,625:INFO:Uploading results into container
2025-05-03 15:24:16,625:INFO:Uploading model into container now
2025-05-03 15:24:16,625:INFO:_master_model_container: 9
2025-05-03 15:24:16,625:INFO:_display_container: 6
2025-05-03 15:24:16,625:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:16,625:INFO:create_model() successfully completed......................................
2025-05-03 15:24:16,833:INFO:Initializing plot_model()
2025-05-03 15:24:16,833:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, system=True)
2025-05-03 15:24:16,833:INFO:Checking exceptions
2025-05-03 15:24:16,854:INFO:Preloading libraries
2025-05-03 15:24:16,884:INFO:Copying training dataset
2025-05-03 15:24:16,884:INFO:Plot type: feature
2025-05-03 15:24:16,884:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:24:16,945:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:24:17,055:INFO:Saving 'Feature Importance.png'
2025-05-03 15:24:17,157:INFO:Visual Rendered Successfully
2025-05-03 15:24:17,307:INFO:plot_model() successfully completed......................................
2025-05-03 15:24:17,394:INFO:Initializing create_model()
2025-05-03 15:24:17,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:24:17,394:INFO:Checking exceptions
2025-05-03 15:24:17,394:INFO:Importing libraries
2025-05-03 15:24:17,394:INFO:Copying training dataset
2025-05-03 15:24:17,400:INFO:Defining folds
2025-05-03 15:24:17,400:INFO:Declaring metric variables
2025-05-03 15:24:17,400:INFO:Importing untrained model
2025-05-03 15:24:17,400:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:24:17,400:INFO:Starting cross validation
2025-05-03 15:24:17,400:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:24:17,823:INFO:Calculating mean and std
2025-05-03 15:24:17,823:INFO:Creating metrics dataframe
2025-05-03 15:24:17,823:INFO:Finalizing model
2025-05-03 15:24:18,018:INFO:Creating Dashboard logs
2025-05-03 15:24:18,019:INFO:Model: Extra Trees Regressor
2025-05-03 15:24:18,036:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:24:18,142:INFO:Initializing predict_model()
2025-05-03 15:24:18,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5F9A0>)
2025-05-03 15:24:18,142:INFO:Checking exceptions
2025-05-03 15:24:18,142:INFO:Preloading libraries
2025-05-03 15:24:18,294:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:24:18,826:INFO:Uploading results into container
2025-05-03 15:24:18,826:INFO:Uploading model into container now
2025-05-03 15:24:18,826:INFO:_master_model_container: 10
2025-05-03 15:24:18,826:INFO:_display_container: 7
2025-05-03 15:24:18,826:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:24:18,826:INFO:create_model() successfully completed......................................
2025-05-03 15:24:19,046:INFO:Initializing plot_model()
2025-05-03 15:24:19,046:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF17648B0>, system=True)
2025-05-03 15:24:19,046:INFO:Checking exceptions
2025-05-03 15:24:19,078:INFO:Preloading libraries
2025-05-03 15:24:19,110:INFO:Copying training dataset
2025-05-03 15:24:19,110:INFO:Plot type: feature
2025-05-03 15:24:19,110:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:24:19,204:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:24:19,315:INFO:Saving 'Feature Importance.png'
2025-05-03 15:24:19,407:INFO:Visual Rendered Successfully
2025-05-03 15:24:19,588:INFO:plot_model() successfully completed......................................
2025-05-03 15:26:46,174:INFO:PyCaret RegressionExperiment
2025-05-03 15:26:46,174:INFO:Logging name: automl_bigdata_exp
2025-05-03 15:26:46,175:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 15:26:46,175:INFO:version 3.3.2
2025-05-03 15:26:46,175:INFO:Initializing setup()
2025-05-03 15:26:46,175:INFO:self.USI: 6c72
2025-05-03 15:26:46,175:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'X_test', '_available_plots', 'fold_generator', 'USI', 'logging_param', 'y_test', 'y', 'memory', 'X', 'data', 'transform_target_param', 'idx', 'exp_id', '_ml_usecase', 'y_train', 'X_train', 'target_param', 'gpu_param', 'exp_name_log', 'pipeline', 'gpu_n_jobs_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed'}
2025-05-03 15:26:46,175:INFO:Checking environment
2025-05-03 15:26:46,175:INFO:python_version: 3.10.11
2025-05-03 15:26:46,175:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 15:26:46,175:INFO:machine: AMD64
2025-05-03 15:26:46,175:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 15:26:46,179:INFO:Memory: svmem(total=8403075072, available=782524416, percent=90.7, used=7620550656, free=782524416)
2025-05-03 15:26:46,179:INFO:Physical Core: 6
2025-05-03 15:26:46,179:INFO:Logical Core: 12
2025-05-03 15:26:46,179:INFO:Checking libraries
2025-05-03 15:26:46,179:INFO:System:
2025-05-03 15:26:46,179:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 15:26:46,179:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 15:26:46,179:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 15:26:46,179:INFO:PyCaret required dependencies:
2025-05-03 15:26:46,179:INFO:                 pip: 23.0.1
2025-05-03 15:26:46,179:INFO:          setuptools: 65.5.0
2025-05-03 15:26:46,179:INFO:             pycaret: 3.3.2
2025-05-03 15:26:46,179:INFO:             IPython: 8.36.0
2025-05-03 15:26:46,179:INFO:          ipywidgets: 8.1.6
2025-05-03 15:26:46,179:INFO:                tqdm: 4.67.1
2025-05-03 15:26:46,179:INFO:               numpy: 1.26.4
2025-05-03 15:26:46,179:INFO:              pandas: 1.5.3
2025-05-03 15:26:46,179:INFO:              jinja2: 3.1.6
2025-05-03 15:26:46,179:INFO:               scipy: 1.11.4
2025-05-03 15:26:46,179:INFO:              joblib: 1.3.2
2025-05-03 15:26:46,179:INFO:             sklearn: 1.4.2
2025-05-03 15:26:46,179:INFO:                pyod: 2.0.4
2025-05-03 15:26:46,179:INFO:            imblearn: 0.13.0
2025-05-03 15:26:46,180:INFO:   category_encoders: 2.7.0
2025-05-03 15:26:46,180:INFO:            lightgbm: 4.6.0
2025-05-03 15:26:46,180:INFO:               numba: 0.61.0
2025-05-03 15:26:46,180:INFO:            requests: 2.32.3
2025-05-03 15:26:46,180:INFO:          matplotlib: 3.7.5
2025-05-03 15:26:46,180:INFO:          scikitplot: 0.3.7
2025-05-03 15:26:46,180:INFO:         yellowbrick: 1.5
2025-05-03 15:26:46,180:INFO:              plotly: 5.24.1
2025-05-03 15:26:46,180:INFO:    plotly-resampler: Not installed
2025-05-03 15:26:46,180:INFO:             kaleido: 0.2.1
2025-05-03 15:26:46,180:INFO:           schemdraw: 0.15
2025-05-03 15:26:46,180:INFO:         statsmodels: 0.14.4
2025-05-03 15:26:46,180:INFO:              sktime: 0.26.0
2025-05-03 15:26:46,180:INFO:               tbats: 1.1.3
2025-05-03 15:26:46,180:INFO:            pmdarima: 2.0.4
2025-05-03 15:26:46,180:INFO:              psutil: 7.0.0
2025-05-03 15:26:46,180:INFO:          markupsafe: 3.0.2
2025-05-03 15:26:46,180:INFO:             pickle5: Not installed
2025-05-03 15:26:46,180:INFO:         cloudpickle: 2.2.1
2025-05-03 15:26:46,180:INFO:         deprecation: 2.1.0
2025-05-03 15:26:46,180:INFO:              xxhash: 3.5.0
2025-05-03 15:26:46,180:INFO:           wurlitzer: Not installed
2025-05-03 15:26:46,180:INFO:PyCaret optional dependencies:
2025-05-03 15:26:46,181:INFO:                shap: 0.47.2
2025-05-03 15:26:46,181:INFO:           interpret: Not installed
2025-05-03 15:26:46,181:INFO:                umap: Not installed
2025-05-03 15:26:46,181:INFO:     ydata_profiling: 4.16.1
2025-05-03 15:26:46,181:INFO:  explainerdashboard: Not installed
2025-05-03 15:26:46,181:INFO:             autoviz: Not installed
2025-05-03 15:26:46,181:INFO:           fairlearn: Not installed
2025-05-03 15:26:46,181:INFO:          deepchecks: Not installed
2025-05-03 15:26:46,181:INFO:             xgboost: Not installed
2025-05-03 15:26:46,181:INFO:            catboost: Not installed
2025-05-03 15:26:46,181:INFO:              kmodes: Not installed
2025-05-03 15:26:46,181:INFO:             mlxtend: Not installed
2025-05-03 15:26:46,181:INFO:       statsforecast: Not installed
2025-05-03 15:26:46,181:INFO:        tune_sklearn: Not installed
2025-05-03 15:26:46,181:INFO:                 ray: Not installed
2025-05-03 15:26:46,181:INFO:            hyperopt: Not installed
2025-05-03 15:26:46,181:INFO:              optuna: 4.3.0
2025-05-03 15:26:46,181:INFO:               skopt: Not installed
2025-05-03 15:26:46,181:INFO:              mlflow: 1.30.0
2025-05-03 15:26:46,181:INFO:              gradio: Not installed
2025-05-03 15:26:46,181:INFO:             fastapi: 0.115.12
2025-05-03 15:26:46,181:INFO:             uvicorn: 0.34.2
2025-05-03 15:26:46,181:INFO:              m2cgen: Not installed
2025-05-03 15:26:46,181:INFO:           evidently: 0.7.3
2025-05-03 15:26:46,181:INFO:               fugue: Not installed
2025-05-03 15:26:46,181:INFO:           streamlit: Not installed
2025-05-03 15:26:46,181:INFO:             prophet: Not installed
2025-05-03 15:26:46,181:INFO:None
2025-05-03 15:26:46,181:INFO:Set up data.
2025-05-03 15:26:46,186:INFO:Set up folding strategy.
2025-05-03 15:26:46,186:INFO:Set up train/test split.
2025-05-03 15:26:46,189:INFO:Set up index.
2025-05-03 15:26:46,189:INFO:Assigning column types.
2025-05-03 15:26:46,192:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 15:26:46,192:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,196:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,200:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,254:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,295:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,296:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,300:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,304:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,348:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,397:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,398:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,398:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 15:26:46,402:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,406:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,451:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,493:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,493:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,493:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,501:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,501:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,561:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,598:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,598:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,598:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,598:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 15:26:46,598:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,662:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,707:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,707:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,707:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,707:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,766:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,816:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,816:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,816:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 15:26:46,878:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,910:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:46,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:46,985:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:47,028:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 15:26:47,028:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,028:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,028:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 15:26:47,077:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:47,125:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,125:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,176:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 15:26:47,229:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,229:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,229:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 15:26:47,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,431:INFO:Preparing preprocessing pipeline...
2025-05-03 15:26:47,431:INFO:Set up simple imputation.
2025-05-03 15:26:47,431:INFO:Set up encoding of categorical features.
2025-05-03 15:26:47,431:INFO:Set up column name cleaning.
2025-05-03 15:26:47,487:INFO:Finished creating preprocessing pipeline.
2025-05-03 15:26:47,487:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:26:47,487:INFO:Creating final display dataframe.
2025-05-03 15:26:47,642:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 6)
5   Transformed train set shape           (2100, 6)
6    Transformed test set shape            (900, 6)
7               Ignore features                   6
8              Numeric features                   1
9          Categorical features                   1
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                6c72
2025-05-03 15:26:47,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,840:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 15:26:47,840:INFO:Logging experiment in loggers
2025-05-03 15:26:47,917:INFO:SubProcess save_model() called ==================================
2025-05-03 15:26:47,933:INFO:Initializing save_model()
2025-05-03 15:26:47,933:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmptw300193\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 15:26:47,933:INFO:Adding model into prep_pipe
2025-05-03 15:26:47,933:WARNING:Only Model saved as it was a pipeline.
2025-05-03 15:26:47,943:INFO:C:\Users\Nghia\AppData\Local\Temp\tmptw300193\Transformation Pipeline.pkl saved in current working directory
2025-05-03 15:26:47,949:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 15:26:47,949:INFO:save_model() successfully completed......................................
2025-05-03 15:26:48,097:INFO:SubProcess save_model() end ==================================
2025-05-03 15:26:48,129:INFO:setup() successfully completed in 1.67s...............
2025-05-03 15:26:48,201:INFO:Initializing compare_models()
2025-05-03 15:26:48,201:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 15:26:48,201:INFO:Checking exceptions
2025-05-03 15:26:48,201:INFO:Preparing display monitor
2025-05-03 15:26:48,201:INFO:Initializing Linear Regression
2025-05-03 15:26:48,201:INFO:Total runtime is 0.0 minutes
2025-05-03 15:26:48,201:INFO:SubProcess create_model() called ==================================
2025-05-03 15:26:48,201:INFO:Initializing create_model()
2025-05-03 15:26:48,201:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF12A3010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:48,201:INFO:Checking exceptions
2025-05-03 15:26:48,201:INFO:Importing libraries
2025-05-03 15:26:48,201:INFO:Copying training dataset
2025-05-03 15:26:48,201:INFO:Defining folds
2025-05-03 15:26:48,201:INFO:Declaring metric variables
2025-05-03 15:26:48,201:INFO:Importing untrained model
2025-05-03 15:26:48,201:INFO:Linear Regression Imported successfully
2025-05-03 15:26:48,201:INFO:Starting cross validation
2025-05-03 15:26:48,201:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:48,316:INFO:Calculating mean and std
2025-05-03 15:26:48,316:INFO:Creating metrics dataframe
2025-05-03 15:26:48,316:INFO:Uploading results into container
2025-05-03 15:26:48,316:INFO:Uploading model into container now
2025-05-03 15:26:48,316:INFO:_master_model_container: 1
2025-05-03 15:26:48,316:INFO:_display_container: 2
2025-05-03 15:26:48,316:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:26:48,316:INFO:create_model() successfully completed......................................
2025-05-03 15:26:48,458:INFO:SubProcess create_model() end ==================================
2025-05-03 15:26:48,458:INFO:Creating metrics dataframe
2025-05-03 15:26:48,472:INFO:Initializing Ridge Regression
2025-05-03 15:26:48,472:INFO:Total runtime is 0.004515381654103597 minutes
2025-05-03 15:26:48,472:INFO:SubProcess create_model() called ==================================
2025-05-03 15:26:48,472:INFO:Initializing create_model()
2025-05-03 15:26:48,472:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF12A3010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:48,472:INFO:Checking exceptions
2025-05-03 15:26:48,472:INFO:Importing libraries
2025-05-03 15:26:48,472:INFO:Copying training dataset
2025-05-03 15:26:48,472:INFO:Defining folds
2025-05-03 15:26:48,472:INFO:Declaring metric variables
2025-05-03 15:26:48,472:INFO:Importing untrained model
2025-05-03 15:26:48,472:INFO:Ridge Regression Imported successfully
2025-05-03 15:26:48,472:INFO:Starting cross validation
2025-05-03 15:26:48,472:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:48,584:INFO:Calculating mean and std
2025-05-03 15:26:48,584:INFO:Creating metrics dataframe
2025-05-03 15:26:48,584:INFO:Uploading results into container
2025-05-03 15:26:48,584:INFO:Uploading model into container now
2025-05-03 15:26:48,584:INFO:_master_model_container: 2
2025-05-03 15:26:48,584:INFO:_display_container: 2
2025-05-03 15:26:48,584:INFO:Ridge(random_state=4)
2025-05-03 15:26:48,584:INFO:create_model() successfully completed......................................
2025-05-03 15:26:48,736:INFO:SubProcess create_model() end ==================================
2025-05-03 15:26:48,736:INFO:Creating metrics dataframe
2025-05-03 15:26:48,736:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 15:26:48,736:INFO:Total runtime is 0.008914514382680257 minutes
2025-05-03 15:26:48,736:INFO:SubProcess create_model() called ==================================
2025-05-03 15:26:48,736:INFO:Initializing create_model()
2025-05-03 15:26:48,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF12A3010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:48,736:INFO:Checking exceptions
2025-05-03 15:26:48,736:INFO:Importing libraries
2025-05-03 15:26:48,736:INFO:Copying training dataset
2025-05-03 15:26:48,743:INFO:Defining folds
2025-05-03 15:26:48,743:INFO:Declaring metric variables
2025-05-03 15:26:48,743:INFO:Importing untrained model
2025-05-03 15:26:48,743:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:26:48,743:INFO:Starting cross validation
2025-05-03 15:26:48,743:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:49,181:INFO:Calculating mean and std
2025-05-03 15:26:49,182:INFO:Creating metrics dataframe
2025-05-03 15:26:49,186:INFO:Uploading results into container
2025-05-03 15:26:49,186:INFO:Uploading model into container now
2025-05-03 15:26:49,187:INFO:_master_model_container: 3
2025-05-03 15:26:49,187:INFO:_display_container: 2
2025-05-03 15:26:49,188:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:26:49,188:INFO:create_model() successfully completed......................................
2025-05-03 15:26:49,360:INFO:SubProcess create_model() end ==================================
2025-05-03 15:26:49,360:INFO:Creating metrics dataframe
2025-05-03 15:26:49,365:INFO:Initializing Random Forest Regressor
2025-05-03 15:26:49,365:INFO:Total runtime is 0.019388890266418456 minutes
2025-05-03 15:26:49,365:INFO:SubProcess create_model() called ==================================
2025-05-03 15:26:49,365:INFO:Initializing create_model()
2025-05-03 15:26:49,365:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF12A3010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:49,365:INFO:Checking exceptions
2025-05-03 15:26:49,365:INFO:Importing libraries
2025-05-03 15:26:49,365:INFO:Copying training dataset
2025-05-03 15:26:49,368:INFO:Defining folds
2025-05-03 15:26:49,369:INFO:Declaring metric variables
2025-05-03 15:26:49,369:INFO:Importing untrained model
2025-05-03 15:26:49,369:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:26:49,369:INFO:Starting cross validation
2025-05-03 15:26:49,370:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:49,708:INFO:Calculating mean and std
2025-05-03 15:26:49,708:INFO:Creating metrics dataframe
2025-05-03 15:26:49,708:INFO:Uploading results into container
2025-05-03 15:26:49,708:INFO:Uploading model into container now
2025-05-03 15:26:49,708:INFO:_master_model_container: 4
2025-05-03 15:26:49,708:INFO:_display_container: 2
2025-05-03 15:26:49,708:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:26:49,708:INFO:create_model() successfully completed......................................
2025-05-03 15:26:49,861:INFO:SubProcess create_model() end ==================================
2025-05-03 15:26:49,861:INFO:Creating metrics dataframe
2025-05-03 15:26:49,861:INFO:Initializing Extra Trees Regressor
2025-05-03 15:26:49,861:INFO:Total runtime is 0.027662523587544757 minutes
2025-05-03 15:26:49,861:INFO:SubProcess create_model() called ==================================
2025-05-03 15:26:49,861:INFO:Initializing create_model()
2025-05-03 15:26:49,861:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020FF12A3010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:49,861:INFO:Checking exceptions
2025-05-03 15:26:49,861:INFO:Importing libraries
2025-05-03 15:26:49,861:INFO:Copying training dataset
2025-05-03 15:26:49,861:INFO:Defining folds
2025-05-03 15:26:49,861:INFO:Declaring metric variables
2025-05-03 15:26:49,861:INFO:Importing untrained model
2025-05-03 15:26:49,861:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:26:49,861:INFO:Starting cross validation
2025-05-03 15:26:49,861:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:50,132:INFO:Calculating mean and std
2025-05-03 15:26:50,132:INFO:Creating metrics dataframe
2025-05-03 15:26:50,132:INFO:Uploading results into container
2025-05-03 15:26:50,132:INFO:Uploading model into container now
2025-05-03 15:26:50,132:INFO:_master_model_container: 5
2025-05-03 15:26:50,132:INFO:_display_container: 2
2025-05-03 15:26:50,132:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:26:50,132:INFO:create_model() successfully completed......................................
2025-05-03 15:26:50,306:INFO:SubProcess create_model() end ==================================
2025-05-03 15:26:50,306:INFO:Creating metrics dataframe
2025-05-03 15:26:50,321:INFO:Initializing create_model()
2025-05-03 15:26:50,321:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:50,321:INFO:Checking exceptions
2025-05-03 15:26:50,321:INFO:Importing libraries
2025-05-03 15:26:50,321:INFO:Copying training dataset
2025-05-03 15:26:50,321:INFO:Defining folds
2025-05-03 15:26:50,321:INFO:Declaring metric variables
2025-05-03 15:26:50,321:INFO:Importing untrained model
2025-05-03 15:26:50,321:INFO:Declaring custom model
2025-05-03 15:26:50,321:INFO:Ridge Regression Imported successfully
2025-05-03 15:26:50,321:INFO:Cross validation set to False
2025-05-03 15:26:50,321:INFO:Fitting Model
2025-05-03 15:26:50,353:INFO:Ridge(random_state=4)
2025-05-03 15:26:50,353:INFO:create_model() successfully completed......................................
2025-05-03 15:26:50,505:INFO:Creating Dashboard logs
2025-05-03 15:26:50,505:INFO:Model: Ridge Regression
2025-05-03 15:26:50,530:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:26:50,625:INFO:Initializing predict_model()
2025-05-03 15:26:50,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FFAC0>)
2025-05-03 15:26:50,625:INFO:Checking exceptions
2025-05-03 15:26:50,625:INFO:Preloading libraries
2025-05-03 15:26:50,698:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:26:51,083:INFO:Creating Dashboard logs
2025-05-03 15:26:51,090:INFO:Model: Linear Regression
2025-05-03 15:26:51,111:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:26:51,410:INFO:Creating Dashboard logs
2025-05-03 15:26:51,410:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:26:51,445:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:26:51,786:INFO:Creating Dashboard logs
2025-05-03 15:26:51,786:INFO:Model: Random Forest Regressor
2025-05-03 15:26:51,801:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:26:52,113:INFO:Creating Dashboard logs
2025-05-03 15:26:52,113:INFO:Model: Extra Trees Regressor
2025-05-03 15:26:52,137:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:26:52,429:INFO:_master_model_container: 5
2025-05-03 15:26:52,429:INFO:_display_container: 2
2025-05-03 15:26:52,429:INFO:Ridge(random_state=4)
2025-05-03 15:26:52,429:INFO:compare_models() successfully completed......................................
2025-05-03 15:26:52,507:INFO:Initializing create_model()
2025-05-03 15:26:52,507:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:52,507:INFO:Checking exceptions
2025-05-03 15:26:52,507:INFO:Importing libraries
2025-05-03 15:26:52,507:INFO:Copying training dataset
2025-05-03 15:26:52,507:INFO:Defining folds
2025-05-03 15:26:52,507:INFO:Declaring metric variables
2025-05-03 15:26:52,507:INFO:Importing untrained model
2025-05-03 15:26:52,507:INFO:Linear Regression Imported successfully
2025-05-03 15:26:52,507:INFO:Starting cross validation
2025-05-03 15:26:52,507:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:52,618:INFO:Calculating mean and std
2025-05-03 15:26:52,618:INFO:Creating metrics dataframe
2025-05-03 15:26:52,618:INFO:Finalizing model
2025-05-03 15:26:52,649:INFO:Creating Dashboard logs
2025-05-03 15:26:52,649:INFO:Model: Linear Regression
2025-05-03 15:26:52,660:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 15:26:52,773:INFO:Initializing predict_model()
2025-05-03 15:26:52,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FD000>)
2025-05-03 15:26:52,773:INFO:Checking exceptions
2025-05-03 15:26:52,773:INFO:Preloading libraries
2025-05-03 15:26:52,832:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:26:53,202:INFO:Uploading results into container
2025-05-03 15:26:53,202:INFO:Uploading model into container now
2025-05-03 15:26:53,202:INFO:_master_model_container: 6
2025-05-03 15:26:53,202:INFO:_display_container: 3
2025-05-03 15:26:53,202:INFO:LinearRegression(n_jobs=-1)
2025-05-03 15:26:53,202:INFO:create_model() successfully completed......................................
2025-05-03 15:26:53,391:INFO:Initializing plot_model()
2025-05-03 15:26:53,391:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, system=True)
2025-05-03 15:26:53,391:INFO:Checking exceptions
2025-05-03 15:26:53,406:INFO:Preloading libraries
2025-05-03 15:26:53,406:INFO:Copying training dataset
2025-05-03 15:26:53,406:INFO:Plot type: feature
2025-05-03 15:26:53,472:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:26:53,576:INFO:Saving 'Feature Importance.png'
2025-05-03 15:26:53,674:INFO:Visual Rendered Successfully
2025-05-03 15:26:53,833:INFO:plot_model() successfully completed......................................
2025-05-03 15:26:53,926:INFO:Initializing create_model()
2025-05-03 15:26:53,926:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:53,926:INFO:Checking exceptions
2025-05-03 15:26:53,926:INFO:Importing libraries
2025-05-03 15:26:53,926:INFO:Copying training dataset
2025-05-03 15:26:53,931:INFO:Defining folds
2025-05-03 15:26:53,931:INFO:Declaring metric variables
2025-05-03 15:26:53,931:INFO:Importing untrained model
2025-05-03 15:26:53,931:INFO:Ridge Regression Imported successfully
2025-05-03 15:26:53,931:INFO:Starting cross validation
2025-05-03 15:26:53,931:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:54,023:INFO:Calculating mean and std
2025-05-03 15:26:54,023:INFO:Creating metrics dataframe
2025-05-03 15:26:54,023:INFO:Finalizing model
2025-05-03 15:26:54,056:INFO:Creating Dashboard logs
2025-05-03 15:26:54,056:INFO:Model: Ridge Regression
2025-05-03 15:26:54,078:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 15:26:54,214:INFO:Initializing predict_model()
2025-05-03 15:26:54,214:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CADA0E50>)
2025-05-03 15:26:54,214:INFO:Checking exceptions
2025-05-03 15:26:54,214:INFO:Preloading libraries
2025-05-03 15:26:54,300:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:26:54,660:INFO:Uploading results into container
2025-05-03 15:26:54,660:INFO:Uploading model into container now
2025-05-03 15:26:54,660:INFO:_master_model_container: 7
2025-05-03 15:26:54,660:INFO:_display_container: 4
2025-05-03 15:26:54,660:INFO:Ridge(random_state=4)
2025-05-03 15:26:54,660:INFO:create_model() successfully completed......................................
2025-05-03 15:26:54,847:INFO:Initializing plot_model()
2025-05-03 15:26:54,847:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, system=True)
2025-05-03 15:26:54,847:INFO:Checking exceptions
2025-05-03 15:26:54,847:INFO:Preloading libraries
2025-05-03 15:26:54,847:INFO:Copying training dataset
2025-05-03 15:26:54,847:INFO:Plot type: feature
2025-05-03 15:26:54,928:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:26:55,021:INFO:Saving 'Feature Importance.png'
2025-05-03 15:26:55,136:INFO:Visual Rendered Successfully
2025-05-03 15:26:55,289:INFO:plot_model() successfully completed......................................
2025-05-03 15:26:55,368:INFO:Initializing create_model()
2025-05-03 15:26:55,368:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:55,368:INFO:Checking exceptions
2025-05-03 15:26:55,368:INFO:Importing libraries
2025-05-03 15:26:55,368:INFO:Copying training dataset
2025-05-03 15:26:55,368:INFO:Defining folds
2025-05-03 15:26:55,368:INFO:Declaring metric variables
2025-05-03 15:26:55,368:INFO:Importing untrained model
2025-05-03 15:26:55,368:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 15:26:55,368:INFO:Starting cross validation
2025-05-03 15:26:55,368:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:55,833:INFO:Calculating mean and std
2025-05-03 15:26:55,833:INFO:Creating metrics dataframe
2025-05-03 15:26:55,833:INFO:Finalizing model
2025-05-03 15:26:55,882:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 15:26:55,882:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000105 seconds.
2025-05-03 15:26:55,882:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 15:26:55,882:INFO:[LightGBM] [Info] Total Bins 103
2025-05-03 15:26:55,882:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 5
2025-05-03 15:26:55,882:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 15:26:55,984:INFO:Creating Dashboard logs
2025-05-03 15:26:55,984:INFO:Model: Light Gradient Boosting Machine
2025-05-03 15:26:56,011:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 15:26:56,130:INFO:Initializing predict_model()
2025-05-03 15:26:56,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5F010>)
2025-05-03 15:26:56,130:INFO:Checking exceptions
2025-05-03 15:26:56,130:INFO:Preloading libraries
2025-05-03 15:26:56,201:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:26:56,632:INFO:Uploading results into container
2025-05-03 15:26:56,632:INFO:Uploading model into container now
2025-05-03 15:26:56,632:INFO:_master_model_container: 8
2025-05-03 15:26:56,632:INFO:_display_container: 5
2025-05-03 15:26:56,632:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:26:56,632:INFO:create_model() successfully completed......................................
2025-05-03 15:26:56,842:INFO:Initializing plot_model()
2025-05-03 15:26:56,842:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, system=True)
2025-05-03 15:26:56,842:INFO:Checking exceptions
2025-05-03 15:26:56,842:INFO:Preloading libraries
2025-05-03 15:26:56,847:INFO:Copying training dataset
2025-05-03 15:26:56,847:INFO:Plot type: feature
2025-05-03 15:26:56,847:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:26:56,897:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:26:57,013:INFO:Saving 'Feature Importance.png'
2025-05-03 15:26:57,105:INFO:Visual Rendered Successfully
2025-05-03 15:26:57,272:INFO:plot_model() successfully completed......................................
2025-05-03 15:26:57,390:INFO:Initializing create_model()
2025-05-03 15:26:57,390:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:57,390:INFO:Checking exceptions
2025-05-03 15:26:57,390:INFO:Importing libraries
2025-05-03 15:26:57,406:INFO:Copying training dataset
2025-05-03 15:26:57,406:INFO:Defining folds
2025-05-03 15:26:57,406:INFO:Declaring metric variables
2025-05-03 15:26:57,406:INFO:Importing untrained model
2025-05-03 15:26:57,406:INFO:Random Forest Regressor Imported successfully
2025-05-03 15:26:57,406:INFO:Starting cross validation
2025-05-03 15:26:57,406:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:57,832:INFO:Calculating mean and std
2025-05-03 15:26:57,832:INFO:Creating metrics dataframe
2025-05-03 15:26:57,832:INFO:Finalizing model
2025-05-03 15:26:57,975:INFO:Creating Dashboard logs
2025-05-03 15:26:57,975:INFO:Model: Random Forest Regressor
2025-05-03 15:26:57,997:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:26:58,107:INFO:Initializing predict_model()
2025-05-03 15:26:58,107:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210C58FD630>)
2025-05-03 15:26:58,107:INFO:Checking exceptions
2025-05-03 15:26:58,107:INFO:Preloading libraries
2025-05-03 15:26:58,224:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:26:58,598:INFO:Uploading results into container
2025-05-03 15:26:58,598:INFO:Uploading model into container now
2025-05-03 15:26:58,598:INFO:_master_model_container: 9
2025-05-03 15:26:58,598:INFO:_display_container: 6
2025-05-03 15:26:58,598:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:26:58,598:INFO:create_model() successfully completed......................................
2025-05-03 15:26:58,849:INFO:Initializing plot_model()
2025-05-03 15:26:58,849:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, system=True)
2025-05-03 15:26:58,850:INFO:Checking exceptions
2025-05-03 15:26:58,879:INFO:Preloading libraries
2025-05-03 15:26:58,879:INFO:Copying training dataset
2025-05-03 15:26:58,879:INFO:Plot type: feature
2025-05-03 15:26:58,879:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:26:58,961:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:26:59,051:INFO:Saving 'Feature Importance.png'
2025-05-03 15:26:59,144:INFO:Visual Rendered Successfully
2025-05-03 15:26:59,306:INFO:plot_model() successfully completed......................................
2025-05-03 15:26:59,395:INFO:Initializing create_model()
2025-05-03 15:26:59,395:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 15:26:59,395:INFO:Checking exceptions
2025-05-03 15:26:59,395:INFO:Importing libraries
2025-05-03 15:26:59,395:INFO:Copying training dataset
2025-05-03 15:26:59,404:INFO:Defining folds
2025-05-03 15:26:59,404:INFO:Declaring metric variables
2025-05-03 15:26:59,404:INFO:Importing untrained model
2025-05-03 15:26:59,404:INFO:Extra Trees Regressor Imported successfully
2025-05-03 15:26:59,404:INFO:Starting cross validation
2025-05-03 15:26:59,404:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 15:26:59,723:INFO:Calculating mean and std
2025-05-03 15:26:59,723:INFO:Creating metrics dataframe
2025-05-03 15:26:59,723:INFO:Finalizing model
2025-05-03 15:26:59,832:INFO:Creating Dashboard logs
2025-05-03 15:26:59,832:INFO:Model: Extra Trees Regressor
2025-05-03 15:26:59,854:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 15:26:59,961:INFO:Initializing predict_model()
2025-05-03 15:26:59,961:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210CAD5F5B0>)
2025-05-03 15:26:59,961:INFO:Checking exceptions
2025-05-03 15:26:59,961:INFO:Preloading libraries
2025-05-03 15:27:00,052:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 15:27:00,567:INFO:Uploading results into container
2025-05-03 15:27:00,567:INFO:Uploading model into container now
2025-05-03 15:27:00,567:INFO:_master_model_container: 10
2025-05-03 15:27:00,567:INFO:_display_container: 7
2025-05-03 15:27:00,567:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 15:27:00,567:INFO:create_model() successfully completed......................................
2025-05-03 15:27:00,863:INFO:Initializing plot_model()
2025-05-03 15:27:00,863:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020FF45AA260>, system=True)
2025-05-03 15:27:00,863:INFO:Checking exceptions
2025-05-03 15:27:00,894:INFO:Preloading libraries
2025-05-03 15:27:00,910:INFO:Copying training dataset
2025-05-03 15:27:00,910:INFO:Plot type: feature
2025-05-03 15:27:00,910:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 15:27:00,972:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 15:27:01,082:INFO:Saving 'Feature Importance.png'
2025-05-03 15:27:01,190:INFO:Visual Rendered Successfully
2025-05-03 15:27:01,332:INFO:plot_model() successfully completed......................................
2025-05-03 20:35:34,830:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 20:35:34,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 20:35:34,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 20:35:34,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 20:39:00,299:INFO:PyCaret RegressionExperiment
2025-05-03 20:39:00,299:INFO:Logging name: automl_bigdata_exp
2025-05-03 20:39:00,299:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 20:39:00,299:INFO:version 3.3.2
2025-05-03 20:39:00,299:INFO:Initializing setup()
2025-05-03 20:39:00,299:INFO:self.USI: 2ce5
2025-05-03 20:39:00,299:INFO:self._variable_keys: {'_ml_usecase', 'X', 'transform_target_param', 'y', 'fold_generator', 'exp_name_log', 'X_train', 'memory', 'exp_id', 'fold_shuffle_param', 'USI', 'logging_param', 'n_jobs_param', '_available_plots', 'X_test', 'y_train', 'y_test', 'pipeline', 'gpu_param', 'gpu_n_jobs_param', 'seed', 'target_param', 'html_param', 'data', 'fold_groups_param', 'idx', 'log_plots_param'}
2025-05-03 20:39:00,299:INFO:Checking environment
2025-05-03 20:39:00,299:INFO:python_version: 3.10.11
2025-05-03 20:39:00,299:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 20:39:00,299:INFO:machine: AMD64
2025-05-03 20:39:00,306:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 20:39:00,313:INFO:Memory: svmem(total=8403075072, available=1059278848, percent=87.4, used=7343796224, free=1059278848)
2025-05-03 20:39:00,313:INFO:Physical Core: 6
2025-05-03 20:39:00,313:INFO:Logical Core: 12
2025-05-03 20:39:00,313:INFO:Checking libraries
2025-05-03 20:39:00,313:INFO:System:
2025-05-03 20:39:00,313:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 20:39:00,313:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 20:39:00,313:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 20:39:00,313:INFO:PyCaret required dependencies:
2025-05-03 20:39:00,404:INFO:                 pip: 23.0.1
2025-05-03 20:39:00,404:INFO:          setuptools: 65.5.0
2025-05-03 20:39:00,404:INFO:             pycaret: 3.3.2
2025-05-03 20:39:00,404:INFO:             IPython: 8.36.0
2025-05-03 20:39:00,404:INFO:          ipywidgets: 8.1.6
2025-05-03 20:39:00,404:INFO:                tqdm: 4.67.1
2025-05-03 20:39:00,404:INFO:               numpy: 1.26.4
2025-05-03 20:39:00,404:INFO:              pandas: 1.5.3
2025-05-03 20:39:00,404:INFO:              jinja2: 3.1.6
2025-05-03 20:39:00,404:INFO:               scipy: 1.11.4
2025-05-03 20:39:00,404:INFO:              joblib: 1.3.2
2025-05-03 20:39:00,405:INFO:             sklearn: 1.4.2
2025-05-03 20:39:00,405:INFO:                pyod: 2.0.4
2025-05-03 20:39:00,405:INFO:            imblearn: 0.13.0
2025-05-03 20:39:00,405:INFO:   category_encoders: 2.7.0
2025-05-03 20:39:00,405:INFO:            lightgbm: 4.6.0
2025-05-03 20:39:00,405:INFO:               numba: 0.61.0
2025-05-03 20:39:00,405:INFO:            requests: 2.32.3
2025-05-03 20:39:00,405:INFO:          matplotlib: 3.7.5
2025-05-03 20:39:00,405:INFO:          scikitplot: 0.3.7
2025-05-03 20:39:00,405:INFO:         yellowbrick: 1.5
2025-05-03 20:39:00,405:INFO:              plotly: 5.24.1
2025-05-03 20:39:00,405:INFO:    plotly-resampler: Not installed
2025-05-03 20:39:00,405:INFO:             kaleido: 0.2.1
2025-05-03 20:39:00,405:INFO:           schemdraw: 0.15
2025-05-03 20:39:00,405:INFO:         statsmodels: 0.14.4
2025-05-03 20:39:00,405:INFO:              sktime: 0.26.0
2025-05-03 20:39:00,405:INFO:               tbats: 1.1.3
2025-05-03 20:39:00,405:INFO:            pmdarima: 2.0.4
2025-05-03 20:39:00,405:INFO:              psutil: 7.0.0
2025-05-03 20:39:00,405:INFO:          markupsafe: 3.0.2
2025-05-03 20:39:00,405:INFO:             pickle5: Not installed
2025-05-03 20:39:00,405:INFO:         cloudpickle: 2.2.1
2025-05-03 20:39:00,405:INFO:         deprecation: 2.1.0
2025-05-03 20:39:00,405:INFO:              xxhash: 3.5.0
2025-05-03 20:39:00,405:INFO:           wurlitzer: Not installed
2025-05-03 20:39:00,405:INFO:PyCaret optional dependencies:
2025-05-03 20:39:00,416:INFO:                shap: 0.47.2
2025-05-03 20:39:00,416:INFO:           interpret: Not installed
2025-05-03 20:39:00,416:INFO:                umap: Not installed
2025-05-03 20:39:00,416:INFO:     ydata_profiling: 4.16.1
2025-05-03 20:39:00,416:INFO:  explainerdashboard: Not installed
2025-05-03 20:39:00,416:INFO:             autoviz: Not installed
2025-05-03 20:39:00,416:INFO:           fairlearn: Not installed
2025-05-03 20:39:00,416:INFO:          deepchecks: Not installed
2025-05-03 20:39:00,416:INFO:             xgboost: Not installed
2025-05-03 20:39:00,416:INFO:            catboost: Not installed
2025-05-03 20:39:00,416:INFO:              kmodes: Not installed
2025-05-03 20:39:00,416:INFO:             mlxtend: Not installed
2025-05-03 20:39:00,416:INFO:       statsforecast: Not installed
2025-05-03 20:39:00,416:INFO:        tune_sklearn: Not installed
2025-05-03 20:39:00,416:INFO:                 ray: Not installed
2025-05-03 20:39:00,416:INFO:            hyperopt: Not installed
2025-05-03 20:39:00,416:INFO:              optuna: 4.3.0
2025-05-03 20:39:00,416:INFO:               skopt: Not installed
2025-05-03 20:39:00,416:INFO:              mlflow: 1.30.0
2025-05-03 20:39:00,416:INFO:              gradio: Not installed
2025-05-03 20:39:00,416:INFO:             fastapi: 0.115.12
2025-05-03 20:39:00,416:INFO:             uvicorn: 0.34.2
2025-05-03 20:39:00,417:INFO:              m2cgen: Not installed
2025-05-03 20:39:00,417:INFO:           evidently: 0.7.3
2025-05-03 20:39:00,417:INFO:               fugue: Not installed
2025-05-03 20:39:00,417:INFO:           streamlit: Not installed
2025-05-03 20:39:00,417:INFO:             prophet: Not installed
2025-05-03 20:39:00,417:INFO:None
2025-05-03 20:39:00,417:INFO:Set up data.
2025-05-03 20:39:00,425:INFO:Set up folding strategy.
2025-05-03 20:39:00,425:INFO:Set up train/test split.
2025-05-03 20:39:00,432:INFO:Set up index.
2025-05-03 20:39:00,433:INFO:Assigning column types.
2025-05-03 20:39:00,436:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 20:39:00,436:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,441:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,445:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,500:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,535:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,542:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,542:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,542:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,542:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,549:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,597:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,639:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,639:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,639:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,639:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 20:39:00,646:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,646:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,695:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,736:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,736:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,736:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,743:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,750:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,799:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,841:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,841:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 20:39:00,854:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,910:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,952:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:00,952:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,952:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:00,959:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,014:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,056:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,063:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,063:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 20:39:01,125:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,167:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,167:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,167:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,236:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,279:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,279:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,279:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,279:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 20:39:01,341:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,389:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,452:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 20:39:01,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,494:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 20:39:01,605:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,708:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,708:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:01,708:INFO:Preparing preprocessing pipeline...
2025-05-03 20:39:01,708:INFO:Set up simple imputation.
2025-05-03 20:39:01,715:INFO:Set up encoding of categorical features.
2025-05-03 20:39:01,716:INFO:Set up column name cleaning.
2025-05-03 20:39:01,827:INFO:Finished creating preprocessing pipeline.
2025-05-03 20:39:01,834:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 20:39:01,834:INFO:Creating final display dataframe.
2025-05-03 20:39:02,050:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                2ce5
2025-05-03 20:39:02,153:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:02,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:02,252:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:02,253:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 20:39:02,254:INFO:Logging experiment in loggers
2025-05-03 20:39:02,347:INFO:SubProcess save_model() called ==================================
2025-05-03 20:39:02,371:INFO:Initializing save_model()
2025-05-03 20:39:02,371:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpc1xffkeq\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 20:39:02,371:INFO:Adding model into prep_pipe
2025-05-03 20:39:02,371:WARNING:Only Model saved as it was a pipeline.
2025-05-03 20:39:02,376:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpc1xffkeq\Transformation Pipeline.pkl saved in current working directory
2025-05-03 20:39:02,389:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 20:39:02,389:INFO:save_model() successfully completed......................................
2025-05-03 20:39:02,684:INFO:SubProcess save_model() end ==================================
2025-05-03 20:39:02,696:INFO:setup() successfully completed in 1.96s...............
2025-05-03 20:39:02,781:INFO:Initializing compare_models()
2025-05-03 20:39:02,781:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 20:39:02,781:INFO:Checking exceptions
2025-05-03 20:39:02,783:INFO:Preparing display monitor
2025-05-03 20:39:02,786:INFO:Initializing Linear Regression
2025-05-03 20:39:02,786:INFO:Total runtime is 1.0112921396891275e-05 minutes
2025-05-03 20:39:02,786:INFO:SubProcess create_model() called ==================================
2025-05-03 20:39:02,786:INFO:Initializing create_model()
2025-05-03 20:39:02,786:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAD92FE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:02,786:INFO:Checking exceptions
2025-05-03 20:39:02,786:INFO:Importing libraries
2025-05-03 20:39:02,786:INFO:Copying training dataset
2025-05-03 20:39:02,787:INFO:Defining folds
2025-05-03 20:39:02,787:INFO:Declaring metric variables
2025-05-03 20:39:02,787:INFO:Importing untrained model
2025-05-03 20:39:02,787:INFO:Linear Regression Imported successfully
2025-05-03 20:39:02,787:INFO:Starting cross validation
2025-05-03 20:39:02,796:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:07,075:INFO:Calculating mean and std
2025-05-03 20:39:07,075:INFO:Creating metrics dataframe
2025-05-03 20:39:07,081:INFO:Uploading results into container
2025-05-03 20:39:07,081:INFO:Uploading model into container now
2025-05-03 20:39:07,081:INFO:_master_model_container: 1
2025-05-03 20:39:07,081:INFO:_display_container: 2
2025-05-03 20:39:07,081:INFO:LinearRegression(n_jobs=-1)
2025-05-03 20:39:07,081:INFO:create_model() successfully completed......................................
2025-05-03 20:39:07,248:INFO:SubProcess create_model() end ==================================
2025-05-03 20:39:07,248:INFO:Creating metrics dataframe
2025-05-03 20:39:07,264:INFO:Initializing Ridge Regression
2025-05-03 20:39:07,264:INFO:Total runtime is 0.07464316685994467 minutes
2025-05-03 20:39:07,264:INFO:SubProcess create_model() called ==================================
2025-05-03 20:39:07,264:INFO:Initializing create_model()
2025-05-03 20:39:07,264:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAD92FE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:07,264:INFO:Checking exceptions
2025-05-03 20:39:07,264:INFO:Importing libraries
2025-05-03 20:39:07,264:INFO:Copying training dataset
2025-05-03 20:39:07,264:INFO:Defining folds
2025-05-03 20:39:07,264:INFO:Declaring metric variables
2025-05-03 20:39:07,264:INFO:Importing untrained model
2025-05-03 20:39:07,264:INFO:Ridge Regression Imported successfully
2025-05-03 20:39:07,264:INFO:Starting cross validation
2025-05-03 20:39:07,264:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:11,069:INFO:Calculating mean and std
2025-05-03 20:39:11,069:INFO:Creating metrics dataframe
2025-05-03 20:39:11,077:INFO:Uploading results into container
2025-05-03 20:39:11,077:INFO:Uploading model into container now
2025-05-03 20:39:11,077:INFO:_master_model_container: 2
2025-05-03 20:39:11,077:INFO:_display_container: 2
2025-05-03 20:39:11,077:INFO:Ridge(random_state=4)
2025-05-03 20:39:11,077:INFO:create_model() successfully completed......................................
2025-05-03 20:39:11,340:INFO:SubProcess create_model() end ==================================
2025-05-03 20:39:11,340:INFO:Creating metrics dataframe
2025-05-03 20:39:11,340:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 20:39:11,340:INFO:Total runtime is 0.14257758458455405 minutes
2025-05-03 20:39:11,340:INFO:SubProcess create_model() called ==================================
2025-05-03 20:39:11,340:INFO:Initializing create_model()
2025-05-03 20:39:11,340:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAD92FE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:11,340:INFO:Checking exceptions
2025-05-03 20:39:11,340:INFO:Importing libraries
2025-05-03 20:39:11,340:INFO:Copying training dataset
2025-05-03 20:39:11,340:INFO:Defining folds
2025-05-03 20:39:11,340:INFO:Declaring metric variables
2025-05-03 20:39:11,340:INFO:Importing untrained model
2025-05-03 20:39:11,340:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 20:39:11,340:INFO:Starting cross validation
2025-05-03 20:39:11,340:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:15,124:INFO:Calculating mean and std
2025-05-03 20:39:15,124:INFO:Creating metrics dataframe
2025-05-03 20:39:15,124:INFO:Uploading results into container
2025-05-03 20:39:15,124:INFO:Uploading model into container now
2025-05-03 20:39:15,124:INFO:_master_model_container: 3
2025-05-03 20:39:15,124:INFO:_display_container: 2
2025-05-03 20:39:15,124:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:15,124:INFO:create_model() successfully completed......................................
2025-05-03 20:39:15,332:INFO:SubProcess create_model() end ==================================
2025-05-03 20:39:15,332:INFO:Creating metrics dataframe
2025-05-03 20:39:15,348:INFO:Initializing Random Forest Regressor
2025-05-03 20:39:15,348:INFO:Total runtime is 0.2093848506609599 minutes
2025-05-03 20:39:15,348:INFO:SubProcess create_model() called ==================================
2025-05-03 20:39:15,348:INFO:Initializing create_model()
2025-05-03 20:39:15,348:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAD92FE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:15,348:INFO:Checking exceptions
2025-05-03 20:39:15,348:INFO:Importing libraries
2025-05-03 20:39:15,348:INFO:Copying training dataset
2025-05-03 20:39:15,348:INFO:Defining folds
2025-05-03 20:39:15,348:INFO:Declaring metric variables
2025-05-03 20:39:15,348:INFO:Importing untrained model
2025-05-03 20:39:15,348:INFO:Random Forest Regressor Imported successfully
2025-05-03 20:39:15,348:INFO:Starting cross validation
2025-05-03 20:39:15,348:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:16,054:INFO:Calculating mean and std
2025-05-03 20:39:16,055:INFO:Creating metrics dataframe
2025-05-03 20:39:16,061:INFO:Uploading results into container
2025-05-03 20:39:16,062:INFO:Uploading model into container now
2025-05-03 20:39:16,063:INFO:_master_model_container: 4
2025-05-03 20:39:16,063:INFO:_display_container: 2
2025-05-03 20:39:16,064:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:16,064:INFO:create_model() successfully completed......................................
2025-05-03 20:39:16,356:INFO:SubProcess create_model() end ==================================
2025-05-03 20:39:16,356:INFO:Creating metrics dataframe
2025-05-03 20:39:16,360:INFO:Initializing Extra Trees Regressor
2025-05-03 20:39:16,360:INFO:Total runtime is 0.22624380985895795 minutes
2025-05-03 20:39:16,360:INFO:SubProcess create_model() called ==================================
2025-05-03 20:39:16,361:INFO:Initializing create_model()
2025-05-03 20:39:16,361:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAD92FE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:16,361:INFO:Checking exceptions
2025-05-03 20:39:16,361:INFO:Importing libraries
2025-05-03 20:39:16,361:INFO:Copying training dataset
2025-05-03 20:39:16,364:INFO:Defining folds
2025-05-03 20:39:16,364:INFO:Declaring metric variables
2025-05-03 20:39:16,364:INFO:Importing untrained model
2025-05-03 20:39:16,364:INFO:Extra Trees Regressor Imported successfully
2025-05-03 20:39:16,364:INFO:Starting cross validation
2025-05-03 20:39:16,365:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:16,798:INFO:Calculating mean and std
2025-05-03 20:39:16,798:INFO:Creating metrics dataframe
2025-05-03 20:39:16,798:INFO:Uploading results into container
2025-05-03 20:39:16,798:INFO:Uploading model into container now
2025-05-03 20:39:16,798:INFO:_master_model_container: 5
2025-05-03 20:39:16,798:INFO:_display_container: 2
2025-05-03 20:39:16,798:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:16,798:INFO:create_model() successfully completed......................................
2025-05-03 20:39:16,958:INFO:SubProcess create_model() end ==================================
2025-05-03 20:39:16,958:INFO:Creating metrics dataframe
2025-05-03 20:39:16,964:INFO:Initializing create_model()
2025-05-03 20:39:16,964:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:16,964:INFO:Checking exceptions
2025-05-03 20:39:16,964:INFO:Importing libraries
2025-05-03 20:39:16,964:INFO:Copying training dataset
2025-05-03 20:39:16,964:INFO:Defining folds
2025-05-03 20:39:16,964:INFO:Declaring metric variables
2025-05-03 20:39:16,964:INFO:Importing untrained model
2025-05-03 20:39:16,964:INFO:Declaring custom model
2025-05-03 20:39:16,964:INFO:Ridge Regression Imported successfully
2025-05-03 20:39:16,964:INFO:Cross validation set to False
2025-05-03 20:39:16,964:INFO:Fitting Model
2025-05-03 20:39:17,013:INFO:Ridge(random_state=4)
2025-05-03 20:39:17,013:INFO:create_model() successfully completed......................................
2025-05-03 20:39:17,161:INFO:Creating Dashboard logs
2025-05-03 20:39:17,162:INFO:Model: Ridge Regression
2025-05-03 20:39:17,185:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 20:39:17,281:INFO:Initializing predict_model()
2025-05-03 20:39:17,281:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADF2050>)
2025-05-03 20:39:17,281:INFO:Checking exceptions
2025-05-03 20:39:17,281:INFO:Preloading libraries
2025-05-03 20:39:17,385:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:17,562:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 20:39:17,798:INFO:Creating Dashboard logs
2025-05-03 20:39:17,798:INFO:Model: Linear Regression
2025-05-03 20:39:17,825:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 20:39:18,159:INFO:Creating Dashboard logs
2025-05-03 20:39:18,159:INFO:Model: Random Forest Regressor
2025-05-03 20:39:18,180:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 20:39:18,478:INFO:Creating Dashboard logs
2025-05-03 20:39:18,478:INFO:Model: Light Gradient Boosting Machine
2025-05-03 20:39:18,499:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 20:39:18,812:INFO:Creating Dashboard logs
2025-05-03 20:39:18,812:INFO:Model: Extra Trees Regressor
2025-05-03 20:39:18,833:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 20:39:19,156:INFO:_master_model_container: 5
2025-05-03 20:39:19,156:INFO:_display_container: 2
2025-05-03 20:39:19,156:INFO:Ridge(random_state=4)
2025-05-03 20:39:19,156:INFO:compare_models() successfully completed......................................
2025-05-03 20:39:19,242:INFO:Initializing create_model()
2025-05-03 20:39:19,242:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:19,242:INFO:Checking exceptions
2025-05-03 20:39:19,242:INFO:Importing libraries
2025-05-03 20:39:19,242:INFO:Copying training dataset
2025-05-03 20:39:19,242:INFO:Defining folds
2025-05-03 20:39:19,242:INFO:Declaring metric variables
2025-05-03 20:39:19,242:INFO:Importing untrained model
2025-05-03 20:39:19,242:INFO:Linear Regression Imported successfully
2025-05-03 20:39:19,242:INFO:Starting cross validation
2025-05-03 20:39:19,249:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:19,374:INFO:Calculating mean and std
2025-05-03 20:39:19,374:INFO:Creating metrics dataframe
2025-05-03 20:39:19,374:INFO:Finalizing model
2025-05-03 20:39:19,416:INFO:Creating Dashboard logs
2025-05-03 20:39:19,416:INFO:Model: Linear Regression
2025-05-03 20:39:19,437:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 20:39:19,536:INFO:Initializing predict_model()
2025-05-03 20:39:19,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADF1870>)
2025-05-03 20:39:19,536:INFO:Checking exceptions
2025-05-03 20:39:19,536:INFO:Preloading libraries
2025-05-03 20:39:19,638:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:20,057:INFO:Uploading results into container
2025-05-03 20:39:20,058:INFO:Uploading model into container now
2025-05-03 20:39:20,058:INFO:_master_model_container: 6
2025-05-03 20:39:20,058:INFO:_display_container: 3
2025-05-03 20:39:20,058:INFO:LinearRegression(n_jobs=-1)
2025-05-03 20:39:20,058:INFO:create_model() successfully completed......................................
2025-05-03 20:39:20,256:INFO:Initializing plot_model()
2025-05-03 20:39:20,256:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, system=True)
2025-05-03 20:39:20,256:INFO:Checking exceptions
2025-05-03 20:39:20,263:INFO:Preloading libraries
2025-05-03 20:39:20,263:INFO:Copying training dataset
2025-05-03 20:39:20,263:INFO:Plot type: feature
2025-05-03 20:39:20,388:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 20:39:20,659:INFO:Saving 'Feature Importance.png'
2025-05-03 20:39:20,798:INFO:Visual Rendered Successfully
2025-05-03 20:39:20,978:INFO:plot_model() successfully completed......................................
2025-05-03 20:39:21,076:INFO:Initializing create_model()
2025-05-03 20:39:21,076:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:21,076:INFO:Checking exceptions
2025-05-03 20:39:21,076:INFO:Importing libraries
2025-05-03 20:39:21,076:INFO:Copying training dataset
2025-05-03 20:39:21,083:INFO:Defining folds
2025-05-03 20:39:21,083:INFO:Declaring metric variables
2025-05-03 20:39:21,083:INFO:Importing untrained model
2025-05-03 20:39:21,083:INFO:Ridge Regression Imported successfully
2025-05-03 20:39:21,083:INFO:Starting cross validation
2025-05-03 20:39:21,083:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:21,219:INFO:Calculating mean and std
2025-05-03 20:39:21,220:INFO:Creating metrics dataframe
2025-05-03 20:39:21,224:INFO:Finalizing model
2025-05-03 20:39:21,274:INFO:Creating Dashboard logs
2025-05-03 20:39:21,274:INFO:Model: Ridge Regression
2025-05-03 20:39:21,295:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 20:39:21,394:INFO:Initializing predict_model()
2025-05-03 20:39:21,394:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AAE5C0D0>)
2025-05-03 20:39:21,394:INFO:Checking exceptions
2025-05-03 20:39:21,394:INFO:Preloading libraries
2025-05-03 20:39:21,529:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:22,027:INFO:Uploading results into container
2025-05-03 20:39:22,034:INFO:Uploading model into container now
2025-05-03 20:39:22,034:INFO:_master_model_container: 7
2025-05-03 20:39:22,034:INFO:_display_container: 4
2025-05-03 20:39:22,034:INFO:Ridge(random_state=4)
2025-05-03 20:39:22,034:INFO:create_model() successfully completed......................................
2025-05-03 20:39:22,242:INFO:Initializing plot_model()
2025-05-03 20:39:22,242:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, system=True)
2025-05-03 20:39:22,242:INFO:Checking exceptions
2025-05-03 20:39:22,242:INFO:Preloading libraries
2025-05-03 20:39:22,249:INFO:Copying training dataset
2025-05-03 20:39:22,249:INFO:Plot type: feature
2025-05-03 20:39:22,346:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 20:39:22,443:INFO:Saving 'Feature Importance.png'
2025-05-03 20:39:22,539:INFO:Visual Rendered Successfully
2025-05-03 20:39:22,693:INFO:plot_model() successfully completed......................................
2025-05-03 20:39:22,777:INFO:Initializing create_model()
2025-05-03 20:39:22,777:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:22,777:INFO:Checking exceptions
2025-05-03 20:39:22,777:INFO:Importing libraries
2025-05-03 20:39:22,777:INFO:Copying training dataset
2025-05-03 20:39:22,784:INFO:Defining folds
2025-05-03 20:39:22,784:INFO:Declaring metric variables
2025-05-03 20:39:22,784:INFO:Importing untrained model
2025-05-03 20:39:22,784:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 20:39:22,784:INFO:Starting cross validation
2025-05-03 20:39:22,784:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:23,444:INFO:Calculating mean and std
2025-05-03 20:39:23,445:INFO:Creating metrics dataframe
2025-05-03 20:39:23,447:INFO:Finalizing model
2025-05-03 20:39:23,535:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 20:39:23,535:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000051 seconds.
2025-05-03 20:39:23,535:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-05-03 20:39:23,536:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-05-03 20:39:23,536:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 20:39:23,536:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 20:39:23,537:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 20:39:23,597:INFO:Creating Dashboard logs
2025-05-03 20:39:23,598:INFO:Model: Light Gradient Boosting Machine
2025-05-03 20:39:23,624:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 20:39:23,742:INFO:Initializing predict_model()
2025-05-03 20:39:23,742:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AAE5C040>)
2025-05-03 20:39:23,742:INFO:Checking exceptions
2025-05-03 20:39:23,742:INFO:Preloading libraries
2025-05-03 20:39:23,854:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:24,325:INFO:Uploading results into container
2025-05-03 20:39:24,325:INFO:Uploading model into container now
2025-05-03 20:39:24,332:INFO:_master_model_container: 8
2025-05-03 20:39:24,332:INFO:_display_container: 5
2025-05-03 20:39:24,332:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:24,332:INFO:create_model() successfully completed......................................
2025-05-03 20:39:24,506:INFO:Initializing plot_model()
2025-05-03 20:39:24,513:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, system=True)
2025-05-03 20:39:24,514:INFO:Checking exceptions
2025-05-03 20:39:24,514:INFO:Preloading libraries
2025-05-03 20:39:24,520:INFO:Copying training dataset
2025-05-03 20:39:24,520:INFO:Plot type: feature
2025-05-03 20:39:24,520:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 20:39:24,582:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 20:39:24,686:INFO:Saving 'Feature Importance.png'
2025-05-03 20:39:24,791:INFO:Visual Rendered Successfully
2025-05-03 20:39:24,943:INFO:plot_model() successfully completed......................................
2025-05-03 20:39:25,027:INFO:Initializing create_model()
2025-05-03 20:39:25,027:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:25,027:INFO:Checking exceptions
2025-05-03 20:39:25,027:INFO:Importing libraries
2025-05-03 20:39:25,027:INFO:Copying training dataset
2025-05-03 20:39:25,034:INFO:Defining folds
2025-05-03 20:39:25,034:INFO:Declaring metric variables
2025-05-03 20:39:25,034:INFO:Importing untrained model
2025-05-03 20:39:25,034:INFO:Random Forest Regressor Imported successfully
2025-05-03 20:39:25,034:INFO:Starting cross validation
2025-05-03 20:39:25,034:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:25,645:INFO:Calculating mean and std
2025-05-03 20:39:25,645:INFO:Creating metrics dataframe
2025-05-03 20:39:25,645:INFO:Finalizing model
2025-05-03 20:39:25,853:INFO:Creating Dashboard logs
2025-05-03 20:39:25,853:INFO:Model: Random Forest Regressor
2025-05-03 20:39:25,895:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 20:39:26,319:INFO:Initializing predict_model()
2025-05-03 20:39:26,319:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB713400>)
2025-05-03 20:39:26,319:INFO:Checking exceptions
2025-05-03 20:39:26,319:INFO:Preloading libraries
2025-05-03 20:39:26,450:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:27,297:INFO:Uploading results into container
2025-05-03 20:39:27,304:INFO:Uploading model into container now
2025-05-03 20:39:27,304:INFO:_master_model_container: 9
2025-05-03 20:39:27,304:INFO:_display_container: 6
2025-05-03 20:39:27,304:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:27,304:INFO:create_model() successfully completed......................................
2025-05-03 20:39:27,630:INFO:Initializing plot_model()
2025-05-03 20:39:27,630:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, system=True)
2025-05-03 20:39:27,630:INFO:Checking exceptions
2025-05-03 20:39:27,651:INFO:Preloading libraries
2025-05-03 20:39:27,686:INFO:Copying training dataset
2025-05-03 20:39:27,686:INFO:Plot type: feature
2025-05-03 20:39:27,686:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 20:39:27,749:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 20:39:27,851:INFO:Saving 'Feature Importance.png'
2025-05-03 20:39:27,971:INFO:Visual Rendered Successfully
2025-05-03 20:39:28,128:INFO:plot_model() successfully completed......................................
2025-05-03 20:39:28,568:INFO:Initializing create_model()
2025-05-03 20:39:28,568:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 20:39:28,568:INFO:Checking exceptions
2025-05-03 20:39:28,568:INFO:Importing libraries
2025-05-03 20:39:28,568:INFO:Copying training dataset
2025-05-03 20:39:28,575:INFO:Defining folds
2025-05-03 20:39:28,575:INFO:Declaring metric variables
2025-05-03 20:39:28,575:INFO:Importing untrained model
2025-05-03 20:39:28,575:INFO:Extra Trees Regressor Imported successfully
2025-05-03 20:39:28,575:INFO:Starting cross validation
2025-05-03 20:39:28,575:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 20:39:29,068:INFO:Calculating mean and std
2025-05-03 20:39:29,068:INFO:Creating metrics dataframe
2025-05-03 20:39:29,068:INFO:Finalizing model
2025-05-03 20:39:29,262:INFO:Creating Dashboard logs
2025-05-03 20:39:29,262:INFO:Model: Extra Trees Regressor
2025-05-03 20:39:29,325:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 20:39:29,908:INFO:Initializing predict_model()
2025-05-03 20:39:29,908:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB712B00>)
2025-05-03 20:39:29,908:INFO:Checking exceptions
2025-05-03 20:39:29,908:INFO:Preloading libraries
2025-05-03 20:39:30,088:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 20:39:30,901:INFO:Uploading results into container
2025-05-03 20:39:30,902:INFO:Uploading model into container now
2025-05-03 20:39:30,903:INFO:_master_model_container: 10
2025-05-03 20:39:30,903:INFO:_display_container: 7
2025-05-03 20:39:30,903:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 20:39:30,903:INFO:create_model() successfully completed......................................
2025-05-03 20:39:31,235:INFO:Initializing plot_model()
2025-05-03 20:39:31,235:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AAAF5450>, system=True)
2025-05-03 20:39:31,235:INFO:Checking exceptions
2025-05-03 20:39:31,255:INFO:Preloading libraries
2025-05-03 20:39:31,297:INFO:Copying training dataset
2025-05-03 20:39:31,297:INFO:Plot type: feature
2025-05-03 20:39:31,297:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 20:39:31,366:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 20:39:31,464:INFO:Saving 'Feature Importance.png'
2025-05-03 20:39:31,568:INFO:Visual Rendered Successfully
2025-05-03 20:39:31,727:INFO:plot_model() successfully completed......................................
2025-05-03 21:04:28,830:INFO:PyCaret RegressionExperiment
2025-05-03 21:04:28,830:INFO:Logging name: automl_bigdata_exp
2025-05-03 21:04:28,830:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 21:04:28,830:INFO:version 3.3.2
2025-05-03 21:04:28,830:INFO:Initializing setup()
2025-05-03 21:04:28,830:INFO:self.USI: 4c81
2025-05-03 21:04:28,830:INFO:self._variable_keys: {'_ml_usecase', 'X', 'transform_target_param', 'y', 'fold_generator', 'exp_name_log', 'X_train', 'memory', 'exp_id', 'fold_shuffle_param', 'USI', 'logging_param', 'n_jobs_param', '_available_plots', 'X_test', 'y_train', 'y_test', 'pipeline', 'gpu_param', 'gpu_n_jobs_param', 'seed', 'target_param', 'html_param', 'data', 'fold_groups_param', 'idx', 'log_plots_param'}
2025-05-03 21:04:28,830:INFO:Checking environment
2025-05-03 21:04:28,830:INFO:python_version: 3.10.11
2025-05-03 21:04:28,831:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 21:04:28,831:INFO:machine: AMD64
2025-05-03 21:04:28,831:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 21:04:28,837:INFO:Memory: svmem(total=8403075072, available=1215643648, percent=85.5, used=7187431424, free=1215643648)
2025-05-03 21:04:28,838:INFO:Physical Core: 6
2025-05-03 21:04:28,838:INFO:Logical Core: 12
2025-05-03 21:04:28,838:INFO:Checking libraries
2025-05-03 21:04:28,838:INFO:System:
2025-05-03 21:04:28,838:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 21:04:28,838:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 21:04:28,838:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 21:04:28,838:INFO:PyCaret required dependencies:
2025-05-03 21:04:28,839:INFO:                 pip: 23.0.1
2025-05-03 21:04:28,839:INFO:          setuptools: 65.5.0
2025-05-03 21:04:28,839:INFO:             pycaret: 3.3.2
2025-05-03 21:04:28,839:INFO:             IPython: 8.36.0
2025-05-03 21:04:28,839:INFO:          ipywidgets: 8.1.6
2025-05-03 21:04:28,839:INFO:                tqdm: 4.67.1
2025-05-03 21:04:28,839:INFO:               numpy: 1.26.4
2025-05-03 21:04:28,839:INFO:              pandas: 1.5.3
2025-05-03 21:04:28,839:INFO:              jinja2: 3.1.6
2025-05-03 21:04:28,839:INFO:               scipy: 1.11.4
2025-05-03 21:04:28,839:INFO:              joblib: 1.3.2
2025-05-03 21:04:28,839:INFO:             sklearn: 1.4.2
2025-05-03 21:04:28,839:INFO:                pyod: 2.0.4
2025-05-03 21:04:28,839:INFO:            imblearn: 0.13.0
2025-05-03 21:04:28,839:INFO:   category_encoders: 2.7.0
2025-05-03 21:04:28,839:INFO:            lightgbm: 4.6.0
2025-05-03 21:04:28,840:INFO:               numba: 0.61.0
2025-05-03 21:04:28,840:INFO:            requests: 2.32.3
2025-05-03 21:04:28,841:INFO:          matplotlib: 3.7.5
2025-05-03 21:04:28,841:INFO:          scikitplot: 0.3.7
2025-05-03 21:04:28,841:INFO:         yellowbrick: 1.5
2025-05-03 21:04:28,841:INFO:              plotly: 5.24.1
2025-05-03 21:04:28,841:INFO:    plotly-resampler: Not installed
2025-05-03 21:04:28,841:INFO:             kaleido: 0.2.1
2025-05-03 21:04:28,841:INFO:           schemdraw: 0.15
2025-05-03 21:04:28,841:INFO:         statsmodels: 0.14.4
2025-05-03 21:04:28,841:INFO:              sktime: 0.26.0
2025-05-03 21:04:28,841:INFO:               tbats: 1.1.3
2025-05-03 21:04:28,841:INFO:            pmdarima: 2.0.4
2025-05-03 21:04:28,841:INFO:              psutil: 7.0.0
2025-05-03 21:04:28,841:INFO:          markupsafe: 3.0.2
2025-05-03 21:04:28,841:INFO:             pickle5: Not installed
2025-05-03 21:04:28,841:INFO:         cloudpickle: 2.2.1
2025-05-03 21:04:28,841:INFO:         deprecation: 2.1.0
2025-05-03 21:04:28,841:INFO:              xxhash: 3.5.0
2025-05-03 21:04:28,842:INFO:           wurlitzer: Not installed
2025-05-03 21:04:28,842:INFO:PyCaret optional dependencies:
2025-05-03 21:04:28,842:INFO:                shap: 0.47.2
2025-05-03 21:04:28,842:INFO:           interpret: Not installed
2025-05-03 21:04:28,842:INFO:                umap: Not installed
2025-05-03 21:04:28,842:INFO:     ydata_profiling: 4.16.1
2025-05-03 21:04:28,842:INFO:  explainerdashboard: Not installed
2025-05-03 21:04:28,842:INFO:             autoviz: Not installed
2025-05-03 21:04:28,842:INFO:           fairlearn: Not installed
2025-05-03 21:04:28,842:INFO:          deepchecks: Not installed
2025-05-03 21:04:28,842:INFO:             xgboost: Not installed
2025-05-03 21:04:28,842:INFO:            catboost: Not installed
2025-05-03 21:04:28,842:INFO:              kmodes: Not installed
2025-05-03 21:04:28,842:INFO:             mlxtend: Not installed
2025-05-03 21:04:28,842:INFO:       statsforecast: Not installed
2025-05-03 21:04:28,842:INFO:        tune_sklearn: Not installed
2025-05-03 21:04:28,842:INFO:                 ray: Not installed
2025-05-03 21:04:28,842:INFO:            hyperopt: Not installed
2025-05-03 21:04:28,842:INFO:              optuna: 4.3.0
2025-05-03 21:04:28,842:INFO:               skopt: Not installed
2025-05-03 21:04:28,842:INFO:              mlflow: 1.30.0
2025-05-03 21:04:28,842:INFO:              gradio: Not installed
2025-05-03 21:04:28,842:INFO:             fastapi: 0.115.12
2025-05-03 21:04:28,842:INFO:             uvicorn: 0.34.2
2025-05-03 21:04:28,842:INFO:              m2cgen: Not installed
2025-05-03 21:04:28,842:INFO:           evidently: 0.7.3
2025-05-03 21:04:28,842:INFO:               fugue: Not installed
2025-05-03 21:04:28,842:INFO:           streamlit: Not installed
2025-05-03 21:04:28,842:INFO:             prophet: Not installed
2025-05-03 21:04:28,842:INFO:None
2025-05-03 21:04:28,842:INFO:Set up data.
2025-05-03 21:04:28,848:INFO:Set up folding strategy.
2025-05-03 21:04:28,854:INFO:Set up train/test split.
2025-05-03 21:04:28,862:INFO:Set up index.
2025-05-03 21:04:28,862:INFO:Assigning column types.
2025-05-03 21:04:28,869:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 21:04:28,869:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,876:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,881:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,939:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,980:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:28,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:28,980:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,987:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:04:28,994:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,043:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,091:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,091:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,091:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 21:04:29,091:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,098:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,154:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,196:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,202:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,203:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,210:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,272:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,330:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,331:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,332:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 21:04:29,344:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,408:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,453:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,453:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,460:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,517:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,564:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,564:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,564:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,568:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 21:04:29,633:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,675:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,675:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,675:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,737:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,786:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,786:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,786:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,786:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 21:04:29,849:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:29,890:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:29,971:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:04:30,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,015:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 21:04:30,119:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,119:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,216:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,216:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,223:INFO:Preparing preprocessing pipeline...
2025-05-03 21:04:30,223:INFO:Set up simple imputation.
2025-05-03 21:04:30,223:INFO:Set up encoding of categorical features.
2025-05-03 21:04:30,230:INFO:Set up column name cleaning.
2025-05-03 21:04:30,313:INFO:Finished creating preprocessing pipeline.
2025-05-03 21:04:30,326:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:04:30,327:INFO:Creating final display dataframe.
2025-05-03 21:04:30,527:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                4c81
2025-05-03 21:04:30,632:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,632:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,751:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:04:30,753:INFO:Logging experiment in loggers
2025-05-03 21:04:30,837:INFO:SubProcess save_model() called ==================================
2025-05-03 21:04:30,853:INFO:Initializing save_model()
2025-05-03 21:04:30,853:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpjtcds3kk\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 21:04:30,854:INFO:Adding model into prep_pipe
2025-05-03 21:04:30,854:WARNING:Only Model saved as it was a pipeline.
2025-05-03 21:04:30,859:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpjtcds3kk\Transformation Pipeline.pkl saved in current working directory
2025-05-03 21:04:30,867:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:04:30,868:INFO:save_model() successfully completed......................................
2025-05-03 21:04:31,286:INFO:SubProcess save_model() end ==================================
2025-05-03 21:04:31,306:INFO:setup() successfully completed in 1.94s...............
2025-05-03 21:04:31,389:INFO:Initializing compare_models()
2025-05-03 21:04:31,389:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 21:04:31,389:INFO:Checking exceptions
2025-05-03 21:04:31,390:INFO:Preparing display monitor
2025-05-03 21:04:31,394:INFO:Initializing Linear Regression
2025-05-03 21:04:31,394:INFO:Total runtime is 0.0 minutes
2025-05-03 21:04:31,394:INFO:SubProcess create_model() called ==================================
2025-05-03 21:04:31,394:INFO:Initializing create_model()
2025-05-03 21:04:31,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AD838CD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:31,394:INFO:Checking exceptions
2025-05-03 21:04:31,394:INFO:Importing libraries
2025-05-03 21:04:31,394:INFO:Copying training dataset
2025-05-03 21:04:31,397:INFO:Defining folds
2025-05-03 21:04:31,397:INFO:Declaring metric variables
2025-05-03 21:04:31,397:INFO:Importing untrained model
2025-05-03 21:04:31,397:INFO:Linear Regression Imported successfully
2025-05-03 21:04:31,397:INFO:Starting cross validation
2025-05-03 21:04:31,397:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:36,877:INFO:Calculating mean and std
2025-05-03 21:04:36,877:INFO:Creating metrics dataframe
2025-05-03 21:04:36,883:INFO:Uploading results into container
2025-05-03 21:04:36,883:INFO:Uploading model into container now
2025-05-03 21:04:36,883:INFO:_master_model_container: 1
2025-05-03 21:04:36,883:INFO:_display_container: 2
2025-05-03 21:04:36,883:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:04:36,883:INFO:create_model() successfully completed......................................
2025-05-03 21:04:37,139:INFO:SubProcess create_model() end ==================================
2025-05-03 21:04:37,139:INFO:Creating metrics dataframe
2025-05-03 21:04:37,146:INFO:Initializing Ridge Regression
2025-05-03 21:04:37,146:INFO:Total runtime is 0.09586732784907023 minutes
2025-05-03 21:04:37,146:INFO:SubProcess create_model() called ==================================
2025-05-03 21:04:37,146:INFO:Initializing create_model()
2025-05-03 21:04:37,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AD838CD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:37,146:INFO:Checking exceptions
2025-05-03 21:04:37,146:INFO:Importing libraries
2025-05-03 21:04:37,146:INFO:Copying training dataset
2025-05-03 21:04:37,146:INFO:Defining folds
2025-05-03 21:04:37,146:INFO:Declaring metric variables
2025-05-03 21:04:37,146:INFO:Importing untrained model
2025-05-03 21:04:37,146:INFO:Ridge Regression Imported successfully
2025-05-03 21:04:37,146:INFO:Starting cross validation
2025-05-03 21:04:37,146:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:40,522:INFO:Calculating mean and std
2025-05-03 21:04:40,522:INFO:Creating metrics dataframe
2025-05-03 21:04:40,529:INFO:Uploading results into container
2025-05-03 21:04:40,529:INFO:Uploading model into container now
2025-05-03 21:04:40,529:INFO:_master_model_container: 2
2025-05-03 21:04:40,529:INFO:_display_container: 2
2025-05-03 21:04:40,529:INFO:Ridge(random_state=4)
2025-05-03 21:04:40,529:INFO:create_model() successfully completed......................................
2025-05-03 21:04:40,792:INFO:SubProcess create_model() end ==================================
2025-05-03 21:04:40,792:INFO:Creating metrics dataframe
2025-05-03 21:04:40,792:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 21:04:40,792:INFO:Total runtime is 0.15662901798884074 minutes
2025-05-03 21:04:40,792:INFO:SubProcess create_model() called ==================================
2025-05-03 21:04:40,792:INFO:Initializing create_model()
2025-05-03 21:04:40,792:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AD838CD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:40,792:INFO:Checking exceptions
2025-05-03 21:04:40,792:INFO:Importing libraries
2025-05-03 21:04:40,792:INFO:Copying training dataset
2025-05-03 21:04:40,799:INFO:Defining folds
2025-05-03 21:04:40,799:INFO:Declaring metric variables
2025-05-03 21:04:40,799:INFO:Importing untrained model
2025-05-03 21:04:40,799:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:04:40,799:INFO:Starting cross validation
2025-05-03 21:04:40,799:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:44,445:INFO:Calculating mean and std
2025-05-03 21:04:44,445:INFO:Creating metrics dataframe
2025-05-03 21:04:44,452:INFO:Uploading results into container
2025-05-03 21:04:44,452:INFO:Uploading model into container now
2025-05-03 21:04:44,452:INFO:_master_model_container: 3
2025-05-03 21:04:44,452:INFO:_display_container: 2
2025-05-03 21:04:44,452:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:44,452:INFO:create_model() successfully completed......................................
2025-05-03 21:04:44,639:INFO:SubProcess create_model() end ==================================
2025-05-03 21:04:44,639:INFO:Creating metrics dataframe
2025-05-03 21:04:44,639:INFO:Initializing Random Forest Regressor
2025-05-03 21:04:44,639:INFO:Total runtime is 0.22074517806371052 minutes
2025-05-03 21:04:44,639:INFO:SubProcess create_model() called ==================================
2025-05-03 21:04:44,639:INFO:Initializing create_model()
2025-05-03 21:04:44,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AD838CD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:44,639:INFO:Checking exceptions
2025-05-03 21:04:44,639:INFO:Importing libraries
2025-05-03 21:04:44,639:INFO:Copying training dataset
2025-05-03 21:04:44,646:INFO:Defining folds
2025-05-03 21:04:44,646:INFO:Declaring metric variables
2025-05-03 21:04:44,646:INFO:Importing untrained model
2025-05-03 21:04:44,646:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:04:44,646:INFO:Starting cross validation
2025-05-03 21:04:44,646:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:45,375:INFO:Calculating mean and std
2025-05-03 21:04:45,375:INFO:Creating metrics dataframe
2025-05-03 21:04:45,377:INFO:Uploading results into container
2025-05-03 21:04:45,377:INFO:Uploading model into container now
2025-05-03 21:04:45,377:INFO:_master_model_container: 4
2025-05-03 21:04:45,377:INFO:_display_container: 2
2025-05-03 21:04:45,377:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:45,377:INFO:create_model() successfully completed......................................
2025-05-03 21:04:45,554:INFO:SubProcess create_model() end ==================================
2025-05-03 21:04:45,554:INFO:Creating metrics dataframe
2025-05-03 21:04:45,559:INFO:Initializing Extra Trees Regressor
2025-05-03 21:04:45,559:INFO:Total runtime is 0.23608606259028117 minutes
2025-05-03 21:04:45,559:INFO:SubProcess create_model() called ==================================
2025-05-03 21:04:45,559:INFO:Initializing create_model()
2025-05-03 21:04:45,559:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AD838CD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:45,559:INFO:Checking exceptions
2025-05-03 21:04:45,559:INFO:Importing libraries
2025-05-03 21:04:45,559:INFO:Copying training dataset
2025-05-03 21:04:45,563:INFO:Defining folds
2025-05-03 21:04:45,563:INFO:Declaring metric variables
2025-05-03 21:04:45,563:INFO:Importing untrained model
2025-05-03 21:04:45,563:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:04:45,565:INFO:Starting cross validation
2025-05-03 21:04:45,565:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:46,048:INFO:Calculating mean and std
2025-05-03 21:04:46,048:INFO:Creating metrics dataframe
2025-05-03 21:04:46,050:INFO:Uploading results into container
2025-05-03 21:04:46,050:INFO:Uploading model into container now
2025-05-03 21:04:46,055:INFO:_master_model_container: 5
2025-05-03 21:04:46,055:INFO:_display_container: 2
2025-05-03 21:04:46,055:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:46,055:INFO:create_model() successfully completed......................................
2025-05-03 21:04:46,208:INFO:SubProcess create_model() end ==================================
2025-05-03 21:04:46,208:INFO:Creating metrics dataframe
2025-05-03 21:04:46,215:INFO:Initializing create_model()
2025-05-03 21:04:46,215:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:46,215:INFO:Checking exceptions
2025-05-03 21:04:46,215:INFO:Importing libraries
2025-05-03 21:04:46,215:INFO:Copying training dataset
2025-05-03 21:04:46,215:INFO:Defining folds
2025-05-03 21:04:46,215:INFO:Declaring metric variables
2025-05-03 21:04:46,215:INFO:Importing untrained model
2025-05-03 21:04:46,215:INFO:Declaring custom model
2025-05-03 21:04:46,215:INFO:Ridge Regression Imported successfully
2025-05-03 21:04:46,222:INFO:Cross validation set to False
2025-05-03 21:04:46,222:INFO:Fitting Model
2025-05-03 21:04:46,263:INFO:Ridge(random_state=4)
2025-05-03 21:04:46,263:INFO:create_model() successfully completed......................................
2025-05-03 21:04:46,416:INFO:Creating Dashboard logs
2025-05-03 21:04:46,416:INFO:Model: Ridge Regression
2025-05-03 21:04:46,437:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:04:46,555:INFO:Initializing predict_model()
2025-05-03 21:04:46,555:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDFA30>)
2025-05-03 21:04:46,555:INFO:Checking exceptions
2025-05-03 21:04:46,555:INFO:Preloading libraries
2025-05-03 21:04:46,652:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:47,072:INFO:Creating Dashboard logs
2025-05-03 21:04:47,072:INFO:Model: Linear Regression
2025-05-03 21:04:47,100:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:04:47,490:INFO:Creating Dashboard logs
2025-05-03 21:04:47,491:INFO:Model: Random Forest Regressor
2025-05-03 21:04:47,514:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:04:47,798:INFO:Creating Dashboard logs
2025-05-03 21:04:47,798:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:04:47,819:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:04:48,110:INFO:Creating Dashboard logs
2025-05-03 21:04:48,110:INFO:Model: Extra Trees Regressor
2025-05-03 21:04:48,125:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:04:48,416:INFO:_master_model_container: 5
2025-05-03 21:04:48,416:INFO:_display_container: 2
2025-05-03 21:04:48,416:INFO:Ridge(random_state=4)
2025-05-03 21:04:48,416:INFO:compare_models() successfully completed......................................
2025-05-03 21:04:48,507:INFO:Initializing create_model()
2025-05-03 21:04:48,507:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:48,507:INFO:Checking exceptions
2025-05-03 21:04:48,507:INFO:Importing libraries
2025-05-03 21:04:48,507:INFO:Copying training dataset
2025-05-03 21:04:48,514:INFO:Defining folds
2025-05-03 21:04:48,514:INFO:Declaring metric variables
2025-05-03 21:04:48,514:INFO:Importing untrained model
2025-05-03 21:04:48,514:INFO:Linear Regression Imported successfully
2025-05-03 21:04:48,514:INFO:Starting cross validation
2025-05-03 21:04:48,514:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:48,645:INFO:Calculating mean and std
2025-05-03 21:04:48,645:INFO:Creating metrics dataframe
2025-05-03 21:04:48,645:INFO:Finalizing model
2025-05-03 21:04:48,694:INFO:Creating Dashboard logs
2025-05-03 21:04:48,694:INFO:Model: Linear Regression
2025-05-03 21:04:48,715:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:04:48,812:INFO:Initializing predict_model()
2025-05-03 21:04:48,812:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDF5B0>)
2025-05-03 21:04:48,812:INFO:Checking exceptions
2025-05-03 21:04:48,812:INFO:Preloading libraries
2025-05-03 21:04:48,909:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:49,317:INFO:Uploading results into container
2025-05-03 21:04:49,317:INFO:Uploading model into container now
2025-05-03 21:04:49,318:INFO:_master_model_container: 6
2025-05-03 21:04:49,318:INFO:_display_container: 3
2025-05-03 21:04:49,318:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:04:49,318:INFO:create_model() successfully completed......................................
2025-05-03 21:04:49,514:INFO:Initializing plot_model()
2025-05-03 21:04:49,514:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, system=True)
2025-05-03 21:04:49,514:INFO:Checking exceptions
2025-05-03 21:04:49,514:INFO:Preloading libraries
2025-05-03 21:04:49,514:INFO:Copying training dataset
2025-05-03 21:04:49,514:INFO:Plot type: feature
2025-05-03 21:04:49,627:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:04:49,791:INFO:Saving 'Feature Importance.png'
2025-05-03 21:04:49,888:INFO:Visual Rendered Successfully
2025-05-03 21:04:50,041:INFO:plot_model() successfully completed......................................
2025-05-03 21:04:50,138:INFO:Initializing create_model()
2025-05-03 21:04:50,138:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:50,138:INFO:Checking exceptions
2025-05-03 21:04:50,138:INFO:Importing libraries
2025-05-03 21:04:50,138:INFO:Copying training dataset
2025-05-03 21:04:50,145:INFO:Defining folds
2025-05-03 21:04:50,145:INFO:Declaring metric variables
2025-05-03 21:04:50,145:INFO:Importing untrained model
2025-05-03 21:04:50,145:INFO:Ridge Regression Imported successfully
2025-05-03 21:04:50,145:INFO:Starting cross validation
2025-05-03 21:04:50,145:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:50,298:INFO:Calculating mean and std
2025-05-03 21:04:50,298:INFO:Creating metrics dataframe
2025-05-03 21:04:50,298:INFO:Finalizing model
2025-05-03 21:04:50,347:INFO:Creating Dashboard logs
2025-05-03 21:04:50,347:INFO:Model: Ridge Regression
2025-05-03 21:04:50,367:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:04:50,458:INFO:Initializing predict_model()
2025-05-03 21:04:50,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AA261510>)
2025-05-03 21:04:50,458:INFO:Checking exceptions
2025-05-03 21:04:50,458:INFO:Preloading libraries
2025-05-03 21:04:50,548:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:50,951:INFO:Uploading results into container
2025-05-03 21:04:50,951:INFO:Uploading model into container now
2025-05-03 21:04:50,951:INFO:_master_model_container: 7
2025-05-03 21:04:50,951:INFO:_display_container: 4
2025-05-03 21:04:50,951:INFO:Ridge(random_state=4)
2025-05-03 21:04:50,951:INFO:create_model() successfully completed......................................
2025-05-03 21:04:51,192:INFO:Initializing plot_model()
2025-05-03 21:04:51,192:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, system=True)
2025-05-03 21:04:51,192:INFO:Checking exceptions
2025-05-03 21:04:51,194:INFO:Preloading libraries
2025-05-03 21:04:51,195:INFO:Copying training dataset
2025-05-03 21:04:51,195:INFO:Plot type: feature
2025-05-03 21:04:51,291:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:04:51,388:INFO:Saving 'Feature Importance.png'
2025-05-03 21:04:51,500:INFO:Visual Rendered Successfully
2025-05-03 21:04:51,681:INFO:plot_model() successfully completed......................................
2025-05-03 21:04:51,765:INFO:Initializing create_model()
2025-05-03 21:04:51,765:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:51,765:INFO:Checking exceptions
2025-05-03 21:04:51,766:INFO:Importing libraries
2025-05-03 21:04:51,767:INFO:Copying training dataset
2025-05-03 21:04:51,770:INFO:Defining folds
2025-05-03 21:04:51,770:INFO:Declaring metric variables
2025-05-03 21:04:51,770:INFO:Importing untrained model
2025-05-03 21:04:51,771:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:04:51,771:INFO:Starting cross validation
2025-05-03 21:04:51,772:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:52,249:INFO:Calculating mean and std
2025-05-03 21:04:52,249:INFO:Creating metrics dataframe
2025-05-03 21:04:52,249:INFO:Finalizing model
2025-05-03 21:04:52,325:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 21:04:52,325:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000099 seconds.
2025-05-03 21:04:52,325:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 21:04:52,325:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 21:04:52,325:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 21:04:52,325:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 21:04:52,388:INFO:Creating Dashboard logs
2025-05-03 21:04:52,388:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:04:52,412:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:04:52,550:INFO:Initializing predict_model()
2025-05-03 21:04:52,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDCE50>)
2025-05-03 21:04:52,551:INFO:Checking exceptions
2025-05-03 21:04:52,551:INFO:Preloading libraries
2025-05-03 21:04:52,688:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:53,221:INFO:Uploading results into container
2025-05-03 21:04:53,221:INFO:Uploading model into container now
2025-05-03 21:04:53,221:INFO:_master_model_container: 8
2025-05-03 21:04:53,221:INFO:_display_container: 5
2025-05-03 21:04:53,221:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:53,221:INFO:create_model() successfully completed......................................
2025-05-03 21:04:53,403:INFO:Initializing plot_model()
2025-05-03 21:04:53,403:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, system=True)
2025-05-03 21:04:53,403:INFO:Checking exceptions
2025-05-03 21:04:53,403:INFO:Preloading libraries
2025-05-03 21:04:53,409:INFO:Copying training dataset
2025-05-03 21:04:53,409:INFO:Plot type: feature
2025-05-03 21:04:53,409:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:04:53,478:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:04:53,617:INFO:Saving 'Feature Importance.png'
2025-05-03 21:04:53,722:INFO:Visual Rendered Successfully
2025-05-03 21:04:53,905:INFO:plot_model() successfully completed......................................
2025-05-03 21:04:54,003:INFO:Initializing create_model()
2025-05-03 21:04:54,003:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:54,003:INFO:Checking exceptions
2025-05-03 21:04:54,005:INFO:Importing libraries
2025-05-03 21:04:54,005:INFO:Copying training dataset
2025-05-03 21:04:54,009:INFO:Defining folds
2025-05-03 21:04:54,009:INFO:Declaring metric variables
2025-05-03 21:04:54,009:INFO:Importing untrained model
2025-05-03 21:04:54,009:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:04:54,010:INFO:Starting cross validation
2025-05-03 21:04:54,011:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:54,673:INFO:Calculating mean and std
2025-05-03 21:04:54,673:INFO:Creating metrics dataframe
2025-05-03 21:04:54,673:INFO:Finalizing model
2025-05-03 21:04:54,888:INFO:Creating Dashboard logs
2025-05-03 21:04:54,888:INFO:Model: Random Forest Regressor
2025-05-03 21:04:54,909:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:04:55,020:INFO:Initializing predict_model()
2025-05-03 21:04:55,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AD9AE0E0>)
2025-05-03 21:04:55,020:INFO:Checking exceptions
2025-05-03 21:04:55,020:INFO:Preloading libraries
2025-05-03 21:04:55,166:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:55,659:INFO:Uploading results into container
2025-05-03 21:04:55,659:INFO:Uploading model into container now
2025-05-03 21:04:55,659:INFO:_master_model_container: 9
2025-05-03 21:04:55,659:INFO:_display_container: 6
2025-05-03 21:04:55,659:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:55,659:INFO:create_model() successfully completed......................................
2025-05-03 21:04:55,867:INFO:Initializing plot_model()
2025-05-03 21:04:55,867:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, system=True)
2025-05-03 21:04:55,867:INFO:Checking exceptions
2025-05-03 21:04:55,888:INFO:Preloading libraries
2025-05-03 21:04:55,923:INFO:Copying training dataset
2025-05-03 21:04:55,923:INFO:Plot type: feature
2025-05-03 21:04:55,923:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:04:55,997:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:04:56,106:INFO:Saving 'Feature Importance.png'
2025-05-03 21:04:56,222:INFO:Visual Rendered Successfully
2025-05-03 21:04:56,396:INFO:plot_model() successfully completed......................................
2025-05-03 21:04:56,513:INFO:Initializing create_model()
2025-05-03 21:04:56,513:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:04:56,513:INFO:Checking exceptions
2025-05-03 21:04:56,513:INFO:Importing libraries
2025-05-03 21:04:56,513:INFO:Copying training dataset
2025-05-03 21:04:56,520:INFO:Defining folds
2025-05-03 21:04:56,520:INFO:Declaring metric variables
2025-05-03 21:04:56,520:INFO:Importing untrained model
2025-05-03 21:04:56,520:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:04:56,520:INFO:Starting cross validation
2025-05-03 21:04:56,520:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:04:57,028:INFO:Calculating mean and std
2025-05-03 21:04:57,028:INFO:Creating metrics dataframe
2025-05-03 21:04:57,028:INFO:Finalizing model
2025-05-03 21:04:57,200:INFO:Creating Dashboard logs
2025-05-03 21:04:57,200:INFO:Model: Extra Trees Regressor
2025-05-03 21:04:57,242:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:04:57,569:INFO:Initializing predict_model()
2025-05-03 21:04:57,569:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDD120>)
2025-05-03 21:04:57,569:INFO:Checking exceptions
2025-05-03 21:04:57,569:INFO:Preloading libraries
2025-05-03 21:04:57,721:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:04:58,339:INFO:Uploading results into container
2025-05-03 21:04:58,341:INFO:Uploading model into container now
2025-05-03 21:04:58,342:INFO:_master_model_container: 10
2025-05-03 21:04:58,342:INFO:_display_container: 7
2025-05-03 21:04:58,342:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:04:58,342:INFO:create_model() successfully completed......................................
2025-05-03 21:04:58,589:INFO:Initializing plot_model()
2025-05-03 21:04:58,589:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AA3161A0>, system=True)
2025-05-03 21:04:58,589:INFO:Checking exceptions
2025-05-03 21:04:58,610:INFO:Preloading libraries
2025-05-03 21:04:58,659:INFO:Copying training dataset
2025-05-03 21:04:58,659:INFO:Plot type: feature
2025-05-03 21:04:58,659:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:04:58,728:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:04:58,832:INFO:Saving 'Feature Importance.png'
2025-05-03 21:04:58,943:INFO:Visual Rendered Successfully
2025-05-03 21:04:59,117:INFO:plot_model() successfully completed......................................
2025-05-03 21:07:52,498:INFO:PyCaret RegressionExperiment
2025-05-03 21:07:52,498:INFO:Logging name: automl_bigdata_exp
2025-05-03 21:07:52,498:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 21:07:52,498:INFO:version 3.3.2
2025-05-03 21:07:52,498:INFO:Initializing setup()
2025-05-03 21:07:52,498:INFO:self.USI: 774a
2025-05-03 21:07:52,498:INFO:self._variable_keys: {'_ml_usecase', 'X', 'transform_target_param', 'y', 'fold_generator', 'exp_name_log', 'X_train', 'memory', 'exp_id', 'fold_shuffle_param', 'USI', 'logging_param', 'n_jobs_param', '_available_plots', 'X_test', 'y_train', 'y_test', 'pipeline', 'gpu_param', 'gpu_n_jobs_param', 'seed', 'target_param', 'html_param', 'data', 'fold_groups_param', 'idx', 'log_plots_param'}
2025-05-03 21:07:52,498:INFO:Checking environment
2025-05-03 21:07:52,498:INFO:python_version: 3.10.11
2025-05-03 21:07:52,498:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 21:07:52,498:INFO:machine: AMD64
2025-05-03 21:07:52,498:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 21:07:52,502:INFO:Memory: svmem(total=8403075072, available=608743424, percent=92.8, used=7794331648, free=608743424)
2025-05-03 21:07:52,502:INFO:Physical Core: 6
2025-05-03 21:07:52,502:INFO:Logical Core: 12
2025-05-03 21:07:52,502:INFO:Checking libraries
2025-05-03 21:07:52,502:INFO:System:
2025-05-03 21:07:52,502:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 21:07:52,502:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 21:07:52,502:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 21:07:52,502:INFO:PyCaret required dependencies:
2025-05-03 21:07:52,502:INFO:                 pip: 23.0.1
2025-05-03 21:07:52,502:INFO:          setuptools: 65.5.0
2025-05-03 21:07:52,502:INFO:             pycaret: 3.3.2
2025-05-03 21:07:52,502:INFO:             IPython: 8.36.0
2025-05-03 21:07:52,502:INFO:          ipywidgets: 8.1.6
2025-05-03 21:07:52,502:INFO:                tqdm: 4.67.1
2025-05-03 21:07:52,503:INFO:               numpy: 1.26.4
2025-05-03 21:07:52,503:INFO:              pandas: 1.5.3
2025-05-03 21:07:52,503:INFO:              jinja2: 3.1.6
2025-05-03 21:07:52,503:INFO:               scipy: 1.11.4
2025-05-03 21:07:52,503:INFO:              joblib: 1.3.2
2025-05-03 21:07:52,503:INFO:             sklearn: 1.4.2
2025-05-03 21:07:52,503:INFO:                pyod: 2.0.4
2025-05-03 21:07:52,503:INFO:            imblearn: 0.13.0
2025-05-03 21:07:52,503:INFO:   category_encoders: 2.7.0
2025-05-03 21:07:52,503:INFO:            lightgbm: 4.6.0
2025-05-03 21:07:52,503:INFO:               numba: 0.61.0
2025-05-03 21:07:52,503:INFO:            requests: 2.32.3
2025-05-03 21:07:52,503:INFO:          matplotlib: 3.7.5
2025-05-03 21:07:52,503:INFO:          scikitplot: 0.3.7
2025-05-03 21:07:52,503:INFO:         yellowbrick: 1.5
2025-05-03 21:07:52,503:INFO:              plotly: 5.24.1
2025-05-03 21:07:52,503:INFO:    plotly-resampler: Not installed
2025-05-03 21:07:52,503:INFO:             kaleido: 0.2.1
2025-05-03 21:07:52,503:INFO:           schemdraw: 0.15
2025-05-03 21:07:52,503:INFO:         statsmodels: 0.14.4
2025-05-03 21:07:52,503:INFO:              sktime: 0.26.0
2025-05-03 21:07:52,503:INFO:               tbats: 1.1.3
2025-05-03 21:07:52,503:INFO:            pmdarima: 2.0.4
2025-05-03 21:07:52,503:INFO:              psutil: 7.0.0
2025-05-03 21:07:52,504:INFO:          markupsafe: 3.0.2
2025-05-03 21:07:52,504:INFO:             pickle5: Not installed
2025-05-03 21:07:52,504:INFO:         cloudpickle: 2.2.1
2025-05-03 21:07:52,504:INFO:         deprecation: 2.1.0
2025-05-03 21:07:52,504:INFO:              xxhash: 3.5.0
2025-05-03 21:07:52,504:INFO:           wurlitzer: Not installed
2025-05-03 21:07:52,504:INFO:PyCaret optional dependencies:
2025-05-03 21:07:52,504:INFO:                shap: 0.47.2
2025-05-03 21:07:52,504:INFO:           interpret: Not installed
2025-05-03 21:07:52,504:INFO:                umap: Not installed
2025-05-03 21:07:52,504:INFO:     ydata_profiling: 4.16.1
2025-05-03 21:07:52,504:INFO:  explainerdashboard: Not installed
2025-05-03 21:07:52,504:INFO:             autoviz: Not installed
2025-05-03 21:07:52,504:INFO:           fairlearn: Not installed
2025-05-03 21:07:52,504:INFO:          deepchecks: Not installed
2025-05-03 21:07:52,504:INFO:             xgboost: Not installed
2025-05-03 21:07:52,504:INFO:            catboost: Not installed
2025-05-03 21:07:52,505:INFO:              kmodes: Not installed
2025-05-03 21:07:52,505:INFO:             mlxtend: Not installed
2025-05-03 21:07:52,505:INFO:       statsforecast: Not installed
2025-05-03 21:07:52,505:INFO:        tune_sklearn: Not installed
2025-05-03 21:07:52,505:INFO:                 ray: Not installed
2025-05-03 21:07:52,505:INFO:            hyperopt: Not installed
2025-05-03 21:07:52,505:INFO:              optuna: 4.3.0
2025-05-03 21:07:52,505:INFO:               skopt: Not installed
2025-05-03 21:07:52,505:INFO:              mlflow: 1.30.0
2025-05-03 21:07:52,505:INFO:              gradio: Not installed
2025-05-03 21:07:52,505:INFO:             fastapi: 0.115.12
2025-05-03 21:07:52,505:INFO:             uvicorn: 0.34.2
2025-05-03 21:07:52,505:INFO:              m2cgen: Not installed
2025-05-03 21:07:52,505:INFO:           evidently: 0.7.3
2025-05-03 21:07:52,505:INFO:               fugue: Not installed
2025-05-03 21:07:52,505:INFO:           streamlit: Not installed
2025-05-03 21:07:52,505:INFO:             prophet: Not installed
2025-05-03 21:07:52,505:INFO:None
2025-05-03 21:07:52,505:INFO:Set up data.
2025-05-03 21:07:52,511:INFO:Set up folding strategy.
2025-05-03 21:07:52,512:INFO:Set up train/test split.
2025-05-03 21:07:52,516:INFO:Set up index.
2025-05-03 21:07:52,516:INFO:Assigning column types.
2025-05-03 21:07:52,519:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 21:07:52,519:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,525:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,529:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,589:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,655:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,658:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,669:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,675:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,733:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,781:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,781:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,781:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 21:07:52,788:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,788:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,851:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,892:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,892:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,892:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:52,899:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,906:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:52,980:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,039:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,045:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,045:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,046:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 21:07:53,060:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,130:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,184:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,192:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,192:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,204:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,268:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,316:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,323:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 21:07:53,399:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,448:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,518:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,566:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,573:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,574:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 21:07:53,643:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,699:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,768:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:07:53,828:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,828:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,829:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 21:07:53,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:53,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,059:INFO:Preparing preprocessing pipeline...
2025-05-03 21:07:54,059:INFO:Set up simple imputation.
2025-05-03 21:07:54,059:INFO:Set up encoding of categorical features.
2025-05-03 21:07:54,059:INFO:Set up column name cleaning.
2025-05-03 21:07:54,159:INFO:Finished creating preprocessing pipeline.
2025-05-03 21:07:54,163:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:07:54,163:INFO:Creating final display dataframe.
2025-05-03 21:07:54,443:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                774a
2025-05-03 21:07:54,560:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,686:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,686:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:07:54,687:INFO:Logging experiment in loggers
2025-05-03 21:07:54,786:INFO:SubProcess save_model() called ==================================
2025-05-03 21:07:54,805:INFO:Initializing save_model()
2025-05-03 21:07:54,805:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp4rrsye45\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 21:07:54,805:INFO:Adding model into prep_pipe
2025-05-03 21:07:54,805:WARNING:Only Model saved as it was a pipeline.
2025-05-03 21:07:54,810:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp4rrsye45\Transformation Pipeline.pkl saved in current working directory
2025-05-03 21:07:54,818:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:07:54,818:INFO:save_model() successfully completed......................................
2025-05-03 21:07:55,033:INFO:SubProcess save_model() end ==================================
2025-05-03 21:07:55,050:INFO:setup() successfully completed in 2.19s...............
2025-05-03 21:07:55,151:INFO:Initializing compare_models()
2025-05-03 21:07:55,151:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 21:07:55,151:INFO:Checking exceptions
2025-05-03 21:07:55,154:INFO:Preparing display monitor
2025-05-03 21:07:55,155:INFO:Initializing Linear Regression
2025-05-03 21:07:55,155:INFO:Total runtime is 0.0 minutes
2025-05-03 21:07:55,156:INFO:SubProcess create_model() called ==================================
2025-05-03 21:07:55,156:INFO:Initializing create_model()
2025-05-03 21:07:55,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAB61120>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:55,156:INFO:Checking exceptions
2025-05-03 21:07:55,156:INFO:Importing libraries
2025-05-03 21:07:55,156:INFO:Copying training dataset
2025-05-03 21:07:55,161:INFO:Defining folds
2025-05-03 21:07:55,161:INFO:Declaring metric variables
2025-05-03 21:07:55,161:INFO:Importing untrained model
2025-05-03 21:07:55,162:INFO:Linear Regression Imported successfully
2025-05-03 21:07:55,162:INFO:Starting cross validation
2025-05-03 21:07:55,163:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:07:55,383:INFO:Calculating mean and std
2025-05-03 21:07:55,383:INFO:Creating metrics dataframe
2025-05-03 21:07:55,390:INFO:Uploading results into container
2025-05-03 21:07:55,391:INFO:Uploading model into container now
2025-05-03 21:07:55,391:INFO:_master_model_container: 1
2025-05-03 21:07:55,391:INFO:_display_container: 2
2025-05-03 21:07:55,392:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:07:55,392:INFO:create_model() successfully completed......................................
2025-05-03 21:07:55,608:INFO:SubProcess create_model() end ==================================
2025-05-03 21:07:55,608:INFO:Creating metrics dataframe
2025-05-03 21:07:55,608:INFO:Initializing Ridge Regression
2025-05-03 21:07:55,608:INFO:Total runtime is 0.007545200983683268 minutes
2025-05-03 21:07:55,608:INFO:SubProcess create_model() called ==================================
2025-05-03 21:07:55,608:INFO:Initializing create_model()
2025-05-03 21:07:55,608:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAB61120>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:55,608:INFO:Checking exceptions
2025-05-03 21:07:55,608:INFO:Importing libraries
2025-05-03 21:07:55,608:INFO:Copying training dataset
2025-05-03 21:07:55,615:INFO:Defining folds
2025-05-03 21:07:55,615:INFO:Declaring metric variables
2025-05-03 21:07:55,615:INFO:Importing untrained model
2025-05-03 21:07:55,615:INFO:Ridge Regression Imported successfully
2025-05-03 21:07:55,615:INFO:Starting cross validation
2025-05-03 21:07:55,615:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:07:55,802:INFO:Calculating mean and std
2025-05-03 21:07:55,802:INFO:Creating metrics dataframe
2025-05-03 21:07:55,802:INFO:Uploading results into container
2025-05-03 21:07:55,802:INFO:Uploading model into container now
2025-05-03 21:07:55,802:INFO:_master_model_container: 2
2025-05-03 21:07:55,802:INFO:_display_container: 2
2025-05-03 21:07:55,802:INFO:Ridge(random_state=4)
2025-05-03 21:07:55,802:INFO:create_model() successfully completed......................................
2025-05-03 21:07:55,983:INFO:SubProcess create_model() end ==================================
2025-05-03 21:07:55,983:INFO:Creating metrics dataframe
2025-05-03 21:07:55,990:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 21:07:55,990:INFO:Total runtime is 0.013920843601226807 minutes
2025-05-03 21:07:55,990:INFO:SubProcess create_model() called ==================================
2025-05-03 21:07:55,990:INFO:Initializing create_model()
2025-05-03 21:07:55,990:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAB61120>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:55,990:INFO:Checking exceptions
2025-05-03 21:07:55,990:INFO:Importing libraries
2025-05-03 21:07:55,990:INFO:Copying training dataset
2025-05-03 21:07:55,996:INFO:Defining folds
2025-05-03 21:07:55,997:INFO:Declaring metric variables
2025-05-03 21:07:55,997:INFO:Importing untrained model
2025-05-03 21:07:55,997:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:07:55,997:INFO:Starting cross validation
2025-05-03 21:07:55,997:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:07:56,579:INFO:Calculating mean and std
2025-05-03 21:07:56,579:INFO:Creating metrics dataframe
2025-05-03 21:07:56,579:INFO:Uploading results into container
2025-05-03 21:07:56,579:INFO:Uploading model into container now
2025-05-03 21:07:56,579:INFO:_master_model_container: 3
2025-05-03 21:07:56,579:INFO:_display_container: 2
2025-05-03 21:07:56,579:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:07:56,579:INFO:create_model() successfully completed......................................
2025-05-03 21:07:56,767:INFO:SubProcess create_model() end ==================================
2025-05-03 21:07:56,767:INFO:Creating metrics dataframe
2025-05-03 21:07:56,774:INFO:Initializing Random Forest Regressor
2025-05-03 21:07:56,774:INFO:Total runtime is 0.02699032227198283 minutes
2025-05-03 21:07:56,774:INFO:SubProcess create_model() called ==================================
2025-05-03 21:07:56,774:INFO:Initializing create_model()
2025-05-03 21:07:56,774:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAB61120>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:56,774:INFO:Checking exceptions
2025-05-03 21:07:56,774:INFO:Importing libraries
2025-05-03 21:07:56,774:INFO:Copying training dataset
2025-05-03 21:07:56,781:INFO:Defining folds
2025-05-03 21:07:56,781:INFO:Declaring metric variables
2025-05-03 21:07:56,781:INFO:Importing untrained model
2025-05-03 21:07:56,781:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:07:56,781:INFO:Starting cross validation
2025-05-03 21:07:56,781:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:07:57,427:INFO:Calculating mean and std
2025-05-03 21:07:57,427:INFO:Creating metrics dataframe
2025-05-03 21:07:57,427:INFO:Uploading results into container
2025-05-03 21:07:57,427:INFO:Uploading model into container now
2025-05-03 21:07:57,427:INFO:_master_model_container: 4
2025-05-03 21:07:57,427:INFO:_display_container: 2
2025-05-03 21:07:57,427:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:07:57,427:INFO:create_model() successfully completed......................................
2025-05-03 21:07:57,620:INFO:SubProcess create_model() end ==================================
2025-05-03 21:07:57,620:INFO:Creating metrics dataframe
2025-05-03 21:07:57,620:INFO:Initializing Extra Trees Regressor
2025-05-03 21:07:57,620:INFO:Total runtime is 0.04108330806096395 minutes
2025-05-03 21:07:57,620:INFO:SubProcess create_model() called ==================================
2025-05-03 21:07:57,620:INFO:Initializing create_model()
2025-05-03 21:07:57,620:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AAB61120>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:57,620:INFO:Checking exceptions
2025-05-03 21:07:57,620:INFO:Importing libraries
2025-05-03 21:07:57,620:INFO:Copying training dataset
2025-05-03 21:07:57,620:INFO:Defining folds
2025-05-03 21:07:57,620:INFO:Declaring metric variables
2025-05-03 21:07:57,620:INFO:Importing untrained model
2025-05-03 21:07:57,620:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:07:57,620:INFO:Starting cross validation
2025-05-03 21:07:57,620:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:07:58,072:INFO:Calculating mean and std
2025-05-03 21:07:58,072:INFO:Creating metrics dataframe
2025-05-03 21:07:58,072:INFO:Uploading results into container
2025-05-03 21:07:58,072:INFO:Uploading model into container now
2025-05-03 21:07:58,072:INFO:_master_model_container: 5
2025-05-03 21:07:58,072:INFO:_display_container: 2
2025-05-03 21:07:58,072:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:07:58,072:INFO:create_model() successfully completed......................................
2025-05-03 21:07:58,247:INFO:SubProcess create_model() end ==================================
2025-05-03 21:07:58,247:INFO:Creating metrics dataframe
2025-05-03 21:07:58,252:INFO:Initializing create_model()
2025-05-03 21:07:58,252:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:07:58,252:INFO:Checking exceptions
2025-05-03 21:07:58,253:INFO:Importing libraries
2025-05-03 21:07:58,253:INFO:Copying training dataset
2025-05-03 21:07:58,256:INFO:Defining folds
2025-05-03 21:07:58,256:INFO:Declaring metric variables
2025-05-03 21:07:58,256:INFO:Importing untrained model
2025-05-03 21:07:58,257:INFO:Declaring custom model
2025-05-03 21:07:58,257:INFO:Ridge Regression Imported successfully
2025-05-03 21:07:58,258:INFO:Cross validation set to False
2025-05-03 21:07:58,258:INFO:Fitting Model
2025-05-03 21:07:58,296:INFO:Ridge(random_state=4)
2025-05-03 21:07:58,296:INFO:create_model() successfully completed......................................
2025-05-03 21:07:58,482:INFO:Creating Dashboard logs
2025-05-03 21:07:58,483:INFO:Model: Ridge Regression
2025-05-03 21:07:58,503:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:07:58,607:INFO:Initializing predict_model()
2025-05-03 21:07:58,607:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB712E60>)
2025-05-03 21:07:58,607:INFO:Checking exceptions
2025-05-03 21:07:58,607:INFO:Preloading libraries
2025-05-03 21:07:58,754:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:07:59,336:INFO:Creating Dashboard logs
2025-05-03 21:07:59,336:INFO:Model: Linear Regression
2025-05-03 21:07:59,356:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:07:59,629:INFO:Creating Dashboard logs
2025-05-03 21:07:59,630:INFO:Model: Random Forest Regressor
2025-05-03 21:07:59,650:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:08:00,115:INFO:Creating Dashboard logs
2025-05-03 21:08:00,116:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:08:00,137:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:08:00,462:INFO:Creating Dashboard logs
2025-05-03 21:08:00,462:INFO:Model: Extra Trees Regressor
2025-05-03 21:08:00,477:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:08:00,875:INFO:_master_model_container: 5
2025-05-03 21:08:00,875:INFO:_display_container: 2
2025-05-03 21:08:00,876:INFO:Ridge(random_state=4)
2025-05-03 21:08:00,876:INFO:compare_models() successfully completed......................................
2025-05-03 21:08:00,985:INFO:Initializing create_model()
2025-05-03 21:08:00,985:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:08:00,985:INFO:Checking exceptions
2025-05-03 21:08:00,986:INFO:Importing libraries
2025-05-03 21:08:00,986:INFO:Copying training dataset
2025-05-03 21:08:00,990:INFO:Defining folds
2025-05-03 21:08:00,990:INFO:Declaring metric variables
2025-05-03 21:08:00,990:INFO:Importing untrained model
2025-05-03 21:08:00,990:INFO:Linear Regression Imported successfully
2025-05-03 21:08:00,991:INFO:Starting cross validation
2025-05-03 21:08:00,991:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:08:01,137:INFO:Calculating mean and std
2025-05-03 21:08:01,137:INFO:Creating metrics dataframe
2025-05-03 21:08:01,137:INFO:Finalizing model
2025-05-03 21:08:01,193:INFO:Creating Dashboard logs
2025-05-03 21:08:01,193:INFO:Model: Linear Regression
2025-05-03 21:08:01,213:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:08:01,306:INFO:Initializing predict_model()
2025-05-03 21:08:01,306:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AAE6BEB0>)
2025-05-03 21:08:01,306:INFO:Checking exceptions
2025-05-03 21:08:01,306:INFO:Preloading libraries
2025-05-03 21:08:01,406:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:08:01,807:INFO:Uploading results into container
2025-05-03 21:08:01,807:INFO:Uploading model into container now
2025-05-03 21:08:01,807:INFO:_master_model_container: 6
2025-05-03 21:08:01,807:INFO:_display_container: 3
2025-05-03 21:08:01,807:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:08:01,807:INFO:create_model() successfully completed......................................
2025-05-03 21:08:02,041:INFO:Initializing plot_model()
2025-05-03 21:08:02,041:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, system=True)
2025-05-03 21:08:02,041:INFO:Checking exceptions
2025-05-03 21:08:02,043:INFO:Preloading libraries
2025-05-03 21:08:02,043:INFO:Copying training dataset
2025-05-03 21:08:02,043:INFO:Plot type: feature
2025-05-03 21:08:02,142:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:08:02,261:INFO:Saving 'Feature Importance.png'
2025-05-03 21:08:02,348:INFO:Visual Rendered Successfully
2025-05-03 21:08:02,474:INFO:plot_model() successfully completed......................................
2025-05-03 21:08:02,566:INFO:Initializing create_model()
2025-05-03 21:08:02,566:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:08:02,566:INFO:Checking exceptions
2025-05-03 21:08:02,567:INFO:Importing libraries
2025-05-03 21:08:02,567:INFO:Copying training dataset
2025-05-03 21:08:02,567:INFO:Defining folds
2025-05-03 21:08:02,567:INFO:Declaring metric variables
2025-05-03 21:08:02,567:INFO:Importing untrained model
2025-05-03 21:08:02,567:INFO:Ridge Regression Imported successfully
2025-05-03 21:08:02,567:INFO:Starting cross validation
2025-05-03 21:08:02,572:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:08:02,680:INFO:Calculating mean and std
2025-05-03 21:08:02,680:INFO:Creating metrics dataframe
2025-05-03 21:08:02,680:INFO:Finalizing model
2025-05-03 21:08:02,732:INFO:Creating Dashboard logs
2025-05-03 21:08:02,732:INFO:Model: Ridge Regression
2025-05-03 21:08:02,754:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:08:02,858:INFO:Initializing predict_model()
2025-05-03 21:08:02,858:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AA30EDD0>)
2025-05-03 21:08:02,858:INFO:Checking exceptions
2025-05-03 21:08:02,858:INFO:Preloading libraries
2025-05-03 21:08:02,949:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:08:03,404:INFO:Uploading results into container
2025-05-03 21:08:03,404:INFO:Uploading model into container now
2025-05-03 21:08:03,404:INFO:_master_model_container: 7
2025-05-03 21:08:03,404:INFO:_display_container: 4
2025-05-03 21:08:03,404:INFO:Ridge(random_state=4)
2025-05-03 21:08:03,404:INFO:create_model() successfully completed......................................
2025-05-03 21:08:03,618:INFO:Initializing plot_model()
2025-05-03 21:08:03,618:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, system=True)
2025-05-03 21:08:03,618:INFO:Checking exceptions
2025-05-03 21:08:03,619:INFO:Preloading libraries
2025-05-03 21:08:03,619:INFO:Copying training dataset
2025-05-03 21:08:03,619:INFO:Plot type: feature
2025-05-03 21:08:03,717:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:08:03,830:INFO:Saving 'Feature Importance.png'
2025-05-03 21:08:03,996:INFO:Visual Rendered Successfully
2025-05-03 21:08:04,225:INFO:plot_model() successfully completed......................................
2025-05-03 21:08:04,316:INFO:Initializing create_model()
2025-05-03 21:08:04,316:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:08:04,316:INFO:Checking exceptions
2025-05-03 21:08:04,316:INFO:Importing libraries
2025-05-03 21:08:04,316:INFO:Copying training dataset
2025-05-03 21:08:04,323:INFO:Defining folds
2025-05-03 21:08:04,323:INFO:Declaring metric variables
2025-05-03 21:08:04,323:INFO:Importing untrained model
2025-05-03 21:08:04,323:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:08:04,323:INFO:Starting cross validation
2025-05-03 21:08:04,323:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:08:04,940:INFO:Calculating mean and std
2025-05-03 21:08:04,942:INFO:Creating metrics dataframe
2025-05-03 21:08:04,942:INFO:Finalizing model
2025-05-03 21:08:05,006:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 21:08:05,006:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000128 seconds.
2025-05-03 21:08:05,006:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 21:08:05,006:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 21:08:05,006:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 21:08:05,006:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 21:08:05,069:INFO:Creating Dashboard logs
2025-05-03 21:08:05,069:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:08:05,107:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:08:05,220:INFO:Initializing predict_model()
2025-05-03 21:08:05,220:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDC5E0>)
2025-05-03 21:08:05,220:INFO:Checking exceptions
2025-05-03 21:08:05,220:INFO:Preloading libraries
2025-05-03 21:08:05,332:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:08:05,809:INFO:Uploading results into container
2025-05-03 21:08:05,810:INFO:Uploading model into container now
2025-05-03 21:08:05,810:INFO:_master_model_container: 8
2025-05-03 21:08:05,810:INFO:_display_container: 5
2025-05-03 21:08:05,811:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:08:05,811:INFO:create_model() successfully completed......................................
2025-05-03 21:08:06,005:INFO:Initializing plot_model()
2025-05-03 21:08:06,005:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, system=True)
2025-05-03 21:08:06,005:INFO:Checking exceptions
2025-05-03 21:08:06,005:INFO:Preloading libraries
2025-05-03 21:08:06,014:INFO:Copying training dataset
2025-05-03 21:08:06,014:INFO:Plot type: feature
2025-05-03 21:08:06,015:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:08:06,076:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:08:06,184:INFO:Saving 'Feature Importance.png'
2025-05-03 21:08:06,309:INFO:Visual Rendered Successfully
2025-05-03 21:08:06,481:INFO:plot_model() successfully completed......................................
2025-05-03 21:08:06,576:INFO:Initializing create_model()
2025-05-03 21:08:06,576:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:08:06,576:INFO:Checking exceptions
2025-05-03 21:08:06,577:INFO:Importing libraries
2025-05-03 21:08:06,577:INFO:Copying training dataset
2025-05-03 21:08:06,580:INFO:Defining folds
2025-05-03 21:08:06,580:INFO:Declaring metric variables
2025-05-03 21:08:06,580:INFO:Importing untrained model
2025-05-03 21:08:06,581:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:08:06,581:INFO:Starting cross validation
2025-05-03 21:08:06,582:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:08:07,191:INFO:Calculating mean and std
2025-05-03 21:08:07,191:INFO:Creating metrics dataframe
2025-05-03 21:08:07,191:INFO:Finalizing model
2025-05-03 21:08:07,407:INFO:Creating Dashboard logs
2025-05-03 21:08:07,407:INFO:Model: Random Forest Regressor
2025-05-03 21:08:07,423:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:08:07,533:INFO:Initializing predict_model()
2025-05-03 21:08:07,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AD9ACF70>)
2025-05-03 21:08:07,533:INFO:Checking exceptions
2025-05-03 21:08:07,533:INFO:Preloading libraries
2025-05-03 21:08:07,705:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:08:08,274:INFO:Uploading results into container
2025-05-03 21:08:08,274:INFO:Uploading model into container now
2025-05-03 21:08:08,274:INFO:_master_model_container: 9
2025-05-03 21:08:08,274:INFO:_display_container: 6
2025-05-03 21:08:08,274:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:08:08,274:INFO:create_model() successfully completed......................................
2025-05-03 21:08:08,539:INFO:Initializing plot_model()
2025-05-03 21:08:08,540:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, system=True)
2025-05-03 21:08:08,540:INFO:Checking exceptions
2025-05-03 21:08:08,563:INFO:Preloading libraries
2025-05-03 21:08:08,596:INFO:Copying training dataset
2025-05-03 21:08:08,596:INFO:Plot type: feature
2025-05-03 21:08:08,597:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:08:08,663:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:08:08,757:INFO:Saving 'Feature Importance.png'
2025-05-03 21:08:08,874:INFO:Visual Rendered Successfully
2025-05-03 21:08:09,074:INFO:plot_model() successfully completed......................................
2025-05-03 21:08:09,168:INFO:Initializing create_model()
2025-05-03 21:08:09,168:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:08:09,168:INFO:Checking exceptions
2025-05-03 21:08:09,170:INFO:Importing libraries
2025-05-03 21:08:09,171:INFO:Copying training dataset
2025-05-03 21:08:09,177:INFO:Defining folds
2025-05-03 21:08:09,178:INFO:Declaring metric variables
2025-05-03 21:08:09,178:INFO:Importing untrained model
2025-05-03 21:08:09,178:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:08:09,179:INFO:Starting cross validation
2025-05-03 21:08:09,180:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:08:09,683:INFO:Calculating mean and std
2025-05-03 21:08:09,683:INFO:Creating metrics dataframe
2025-05-03 21:08:09,683:INFO:Finalizing model
2025-05-03 21:08:09,829:INFO:Creating Dashboard logs
2025-05-03 21:08:09,829:INFO:Model: Extra Trees Regressor
2025-05-03 21:08:09,850:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:08:09,949:INFO:Initializing predict_model()
2025-05-03 21:08:09,949:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDFA30>)
2025-05-03 21:08:09,949:INFO:Checking exceptions
2025-05-03 21:08:09,949:INFO:Preloading libraries
2025-05-03 21:08:10,086:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:08:10,574:INFO:Uploading results into container
2025-05-03 21:08:10,575:INFO:Uploading model into container now
2025-05-03 21:08:10,575:INFO:_master_model_container: 10
2025-05-03 21:08:10,575:INFO:_display_container: 7
2025-05-03 21:08:10,576:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:08:10,576:INFO:create_model() successfully completed......................................
2025-05-03 21:08:10,831:INFO:Initializing plot_model()
2025-05-03 21:08:10,831:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AD838790>, system=True)
2025-05-03 21:08:10,831:INFO:Checking exceptions
2025-05-03 21:08:10,868:INFO:Preloading libraries
2025-05-03 21:08:10,916:INFO:Copying training dataset
2025-05-03 21:08:10,916:INFO:Plot type: feature
2025-05-03 21:08:10,916:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:08:10,993:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:08:11,106:INFO:Saving 'Feature Importance.png'
2025-05-03 21:08:11,222:INFO:Visual Rendered Successfully
2025-05-03 21:08:11,391:INFO:plot_model() successfully completed......................................
2025-05-03 21:11:46,254:INFO:PyCaret RegressionExperiment
2025-05-03 21:11:46,254:INFO:Logging name: automl_bigdata_exp
2025-05-03 21:11:46,254:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 21:11:46,254:INFO:version 3.3.2
2025-05-03 21:11:46,254:INFO:Initializing setup()
2025-05-03 21:11:46,254:INFO:self.USI: cc74
2025-05-03 21:11:46,254:INFO:self._variable_keys: {'_ml_usecase', 'X', 'transform_target_param', 'y', 'fold_generator', 'exp_name_log', 'X_train', 'memory', 'exp_id', 'fold_shuffle_param', 'USI', 'logging_param', 'n_jobs_param', '_available_plots', 'X_test', 'y_train', 'y_test', 'pipeline', 'gpu_param', 'gpu_n_jobs_param', 'seed', 'target_param', 'html_param', 'data', 'fold_groups_param', 'idx', 'log_plots_param'}
2025-05-03 21:11:46,254:INFO:Checking environment
2025-05-03 21:11:46,254:INFO:python_version: 3.10.11
2025-05-03 21:11:46,254:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 21:11:46,254:INFO:machine: AMD64
2025-05-03 21:11:46,254:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 21:11:46,259:INFO:Memory: svmem(total=8403075072, available=471121920, percent=94.4, used=7931953152, free=471121920)
2025-05-03 21:11:46,259:INFO:Physical Core: 6
2025-05-03 21:11:46,259:INFO:Logical Core: 12
2025-05-03 21:11:46,259:INFO:Checking libraries
2025-05-03 21:11:46,259:INFO:System:
2025-05-03 21:11:46,259:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 21:11:46,259:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 21:11:46,260:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 21:11:46,260:INFO:PyCaret required dependencies:
2025-05-03 21:11:46,260:INFO:                 pip: 23.0.1
2025-05-03 21:11:46,260:INFO:          setuptools: 65.5.0
2025-05-03 21:11:46,260:INFO:             pycaret: 3.3.2
2025-05-03 21:11:46,260:INFO:             IPython: 8.36.0
2025-05-03 21:11:46,260:INFO:          ipywidgets: 8.1.6
2025-05-03 21:11:46,260:INFO:                tqdm: 4.67.1
2025-05-03 21:11:46,260:INFO:               numpy: 1.26.4
2025-05-03 21:11:46,260:INFO:              pandas: 1.5.3
2025-05-03 21:11:46,260:INFO:              jinja2: 3.1.6
2025-05-03 21:11:46,260:INFO:               scipy: 1.11.4
2025-05-03 21:11:46,260:INFO:              joblib: 1.3.2
2025-05-03 21:11:46,260:INFO:             sklearn: 1.4.2
2025-05-03 21:11:46,260:INFO:                pyod: 2.0.4
2025-05-03 21:11:46,260:INFO:            imblearn: 0.13.0
2025-05-03 21:11:46,260:INFO:   category_encoders: 2.7.0
2025-05-03 21:11:46,260:INFO:            lightgbm: 4.6.0
2025-05-03 21:11:46,260:INFO:               numba: 0.61.0
2025-05-03 21:11:46,260:INFO:            requests: 2.32.3
2025-05-03 21:11:46,260:INFO:          matplotlib: 3.7.5
2025-05-03 21:11:46,261:INFO:          scikitplot: 0.3.7
2025-05-03 21:11:46,261:INFO:         yellowbrick: 1.5
2025-05-03 21:11:46,261:INFO:              plotly: 5.24.1
2025-05-03 21:11:46,261:INFO:    plotly-resampler: Not installed
2025-05-03 21:11:46,261:INFO:             kaleido: 0.2.1
2025-05-03 21:11:46,261:INFO:           schemdraw: 0.15
2025-05-03 21:11:46,261:INFO:         statsmodels: 0.14.4
2025-05-03 21:11:46,261:INFO:              sktime: 0.26.0
2025-05-03 21:11:46,261:INFO:               tbats: 1.1.3
2025-05-03 21:11:46,261:INFO:            pmdarima: 2.0.4
2025-05-03 21:11:46,261:INFO:              psutil: 7.0.0
2025-05-03 21:11:46,261:INFO:          markupsafe: 3.0.2
2025-05-03 21:11:46,262:INFO:             pickle5: Not installed
2025-05-03 21:11:46,262:INFO:         cloudpickle: 2.2.1
2025-05-03 21:11:46,262:INFO:         deprecation: 2.1.0
2025-05-03 21:11:46,262:INFO:              xxhash: 3.5.0
2025-05-03 21:11:46,262:INFO:           wurlitzer: Not installed
2025-05-03 21:11:46,262:INFO:PyCaret optional dependencies:
2025-05-03 21:11:46,262:INFO:                shap: 0.47.2
2025-05-03 21:11:46,262:INFO:           interpret: Not installed
2025-05-03 21:11:46,262:INFO:                umap: Not installed
2025-05-03 21:11:46,262:INFO:     ydata_profiling: 4.16.1
2025-05-03 21:11:46,262:INFO:  explainerdashboard: Not installed
2025-05-03 21:11:46,262:INFO:             autoviz: Not installed
2025-05-03 21:11:46,262:INFO:           fairlearn: Not installed
2025-05-03 21:11:46,262:INFO:          deepchecks: Not installed
2025-05-03 21:11:46,262:INFO:             xgboost: Not installed
2025-05-03 21:11:46,262:INFO:            catboost: Not installed
2025-05-03 21:11:46,262:INFO:              kmodes: Not installed
2025-05-03 21:11:46,262:INFO:             mlxtend: Not installed
2025-05-03 21:11:46,262:INFO:       statsforecast: Not installed
2025-05-03 21:11:46,262:INFO:        tune_sklearn: Not installed
2025-05-03 21:11:46,262:INFO:                 ray: Not installed
2025-05-03 21:11:46,262:INFO:            hyperopt: Not installed
2025-05-03 21:11:46,262:INFO:              optuna: 4.3.0
2025-05-03 21:11:46,262:INFO:               skopt: Not installed
2025-05-03 21:11:46,262:INFO:              mlflow: 1.30.0
2025-05-03 21:11:46,262:INFO:              gradio: Not installed
2025-05-03 21:11:46,262:INFO:             fastapi: 0.115.12
2025-05-03 21:11:46,262:INFO:             uvicorn: 0.34.2
2025-05-03 21:11:46,262:INFO:              m2cgen: Not installed
2025-05-03 21:11:46,262:INFO:           evidently: 0.7.3
2025-05-03 21:11:46,262:INFO:               fugue: Not installed
2025-05-03 21:11:46,263:INFO:           streamlit: Not installed
2025-05-03 21:11:46,263:INFO:             prophet: Not installed
2025-05-03 21:11:46,263:INFO:None
2025-05-03 21:11:46,263:INFO:Set up data.
2025-05-03 21:11:46,271:INFO:Set up folding strategy.
2025-05-03 21:11:46,271:INFO:Set up train/test split.
2025-05-03 21:11:46,276:INFO:Set up index.
2025-05-03 21:11:46,277:INFO:Assigning column types.
2025-05-03 21:11:46,281:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 21:11:46,281:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,286:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,291:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,365:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,410:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,411:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,411:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,416:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,421:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,488:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,535:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,536:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,536:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 21:11:46,541:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,546:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,603:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,648:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,648:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,653:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,658:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,744:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,808:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,809:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,809:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,810:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 21:11:46,821:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,887:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,933:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:46,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:46,945:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,003:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,048:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,048:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,048:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,050:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 21:11:47,117:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,159:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,159:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,159:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,228:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,270:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,270:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,276:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,277:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 21:11:47,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,388:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,388:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,452:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:11:47,499:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,499:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 21:11:47,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:47,721:INFO:Preparing preprocessing pipeline...
2025-05-03 21:11:47,721:INFO:Set up simple imputation.
2025-05-03 21:11:47,721:INFO:Set up encoding of categorical features.
2025-05-03 21:11:47,721:INFO:Set up column name cleaning.
2025-05-03 21:11:47,797:INFO:Finished creating preprocessing pipeline.
2025-05-03 21:11:47,805:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:11:47,805:INFO:Creating final display dataframe.
2025-05-03 21:11:47,999:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                cc74
2025-05-03 21:11:48,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:48,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:48,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:48,214:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:11:48,214:INFO:Logging experiment in loggers
2025-05-03 21:11:48,297:INFO:SubProcess save_model() called ==================================
2025-05-03 21:11:48,311:INFO:Initializing save_model()
2025-05-03 21:11:48,311:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpm61oted_\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 21:11:48,311:INFO:Adding model into prep_pipe
2025-05-03 21:11:48,311:WARNING:Only Model saved as it was a pipeline.
2025-05-03 21:11:48,318:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpm61oted_\Transformation Pipeline.pkl saved in current working directory
2025-05-03 21:11:48,325:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:11:48,325:INFO:save_model() successfully completed......................................
2025-05-03 21:11:48,527:INFO:SubProcess save_model() end ==================================
2025-05-03 21:11:48,541:INFO:setup() successfully completed in 1.96s...............
2025-05-03 21:11:48,617:INFO:Initializing compare_models()
2025-05-03 21:11:48,617:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 21:11:48,617:INFO:Checking exceptions
2025-05-03 21:11:48,617:INFO:Preparing display monitor
2025-05-03 21:11:48,617:INFO:Initializing Linear Regression
2025-05-03 21:11:48,617:INFO:Total runtime is 0.0 minutes
2025-05-03 21:11:48,617:INFO:SubProcess create_model() called ==================================
2025-05-03 21:11:48,617:INFO:Initializing create_model()
2025-05-03 21:11:48,617:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB0A5420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:48,617:INFO:Checking exceptions
2025-05-03 21:11:48,617:INFO:Importing libraries
2025-05-03 21:11:48,617:INFO:Copying training dataset
2025-05-03 21:11:48,624:INFO:Defining folds
2025-05-03 21:11:48,624:INFO:Declaring metric variables
2025-05-03 21:11:48,624:INFO:Importing untrained model
2025-05-03 21:11:48,624:INFO:Linear Regression Imported successfully
2025-05-03 21:11:48,624:INFO:Starting cross validation
2025-05-03 21:11:48,624:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:48,770:INFO:Calculating mean and std
2025-05-03 21:11:48,770:INFO:Creating metrics dataframe
2025-05-03 21:11:48,770:INFO:Uploading results into container
2025-05-03 21:11:48,770:INFO:Uploading model into container now
2025-05-03 21:11:48,770:INFO:_master_model_container: 1
2025-05-03 21:11:48,770:INFO:_display_container: 2
2025-05-03 21:11:48,770:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:11:48,770:INFO:create_model() successfully completed......................................
2025-05-03 21:11:48,957:INFO:SubProcess create_model() end ==================================
2025-05-03 21:11:48,957:INFO:Creating metrics dataframe
2025-05-03 21:11:48,966:INFO:Initializing Ridge Regression
2025-05-03 21:11:48,966:INFO:Total runtime is 0.005816857020060222 minutes
2025-05-03 21:11:48,966:INFO:SubProcess create_model() called ==================================
2025-05-03 21:11:48,966:INFO:Initializing create_model()
2025-05-03 21:11:48,966:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB0A5420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:48,966:INFO:Checking exceptions
2025-05-03 21:11:48,966:INFO:Importing libraries
2025-05-03 21:11:48,966:INFO:Copying training dataset
2025-05-03 21:11:48,971:INFO:Defining folds
2025-05-03 21:11:48,971:INFO:Declaring metric variables
2025-05-03 21:11:48,971:INFO:Importing untrained model
2025-05-03 21:11:48,971:INFO:Ridge Regression Imported successfully
2025-05-03 21:11:48,971:INFO:Starting cross validation
2025-05-03 21:11:48,971:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:49,117:INFO:Calculating mean and std
2025-05-03 21:11:49,117:INFO:Creating metrics dataframe
2025-05-03 21:11:49,117:INFO:Uploading results into container
2025-05-03 21:11:49,117:INFO:Uploading model into container now
2025-05-03 21:11:49,117:INFO:_master_model_container: 2
2025-05-03 21:11:49,117:INFO:_display_container: 2
2025-05-03 21:11:49,117:INFO:Ridge(random_state=4)
2025-05-03 21:11:49,117:INFO:create_model() successfully completed......................................
2025-05-03 21:11:49,276:INFO:SubProcess create_model() end ==================================
2025-05-03 21:11:49,276:INFO:Creating metrics dataframe
2025-05-03 21:11:49,277:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 21:11:49,277:INFO:Total runtime is 0.01099722385406494 minutes
2025-05-03 21:11:49,277:INFO:SubProcess create_model() called ==================================
2025-05-03 21:11:49,277:INFO:Initializing create_model()
2025-05-03 21:11:49,277:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB0A5420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:49,277:INFO:Checking exceptions
2025-05-03 21:11:49,277:INFO:Importing libraries
2025-05-03 21:11:49,277:INFO:Copying training dataset
2025-05-03 21:11:49,284:INFO:Defining folds
2025-05-03 21:11:49,284:INFO:Declaring metric variables
2025-05-03 21:11:49,284:INFO:Importing untrained model
2025-05-03 21:11:49,284:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:11:49,284:INFO:Starting cross validation
2025-05-03 21:11:49,284:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:49,806:INFO:Calculating mean and std
2025-05-03 21:11:49,807:INFO:Creating metrics dataframe
2025-05-03 21:11:49,811:INFO:Uploading results into container
2025-05-03 21:11:49,811:INFO:Uploading model into container now
2025-05-03 21:11:49,812:INFO:_master_model_container: 3
2025-05-03 21:11:49,812:INFO:_display_container: 2
2025-05-03 21:11:49,812:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:11:49,813:INFO:create_model() successfully completed......................................
2025-05-03 21:11:49,987:INFO:SubProcess create_model() end ==================================
2025-05-03 21:11:49,987:INFO:Creating metrics dataframe
2025-05-03 21:11:49,991:INFO:Initializing Random Forest Regressor
2025-05-03 21:11:49,991:INFO:Total runtime is 0.022902007897694907 minutes
2025-05-03 21:11:49,991:INFO:SubProcess create_model() called ==================================
2025-05-03 21:11:49,991:INFO:Initializing create_model()
2025-05-03 21:11:49,991:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB0A5420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:49,991:INFO:Checking exceptions
2025-05-03 21:11:49,991:INFO:Importing libraries
2025-05-03 21:11:49,992:INFO:Copying training dataset
2025-05-03 21:11:49,995:INFO:Defining folds
2025-05-03 21:11:49,995:INFO:Declaring metric variables
2025-05-03 21:11:49,995:INFO:Importing untrained model
2025-05-03 21:11:49,995:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:11:49,995:INFO:Starting cross validation
2025-05-03 21:11:49,996:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:50,645:INFO:Calculating mean and std
2025-05-03 21:11:50,645:INFO:Creating metrics dataframe
2025-05-03 21:11:50,647:INFO:Uploading results into container
2025-05-03 21:11:50,647:INFO:Uploading model into container now
2025-05-03 21:11:50,647:INFO:_master_model_container: 4
2025-05-03 21:11:50,647:INFO:_display_container: 2
2025-05-03 21:11:50,647:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:11:50,647:INFO:create_model() successfully completed......................................
2025-05-03 21:11:50,825:INFO:SubProcess create_model() end ==================================
2025-05-03 21:11:50,825:INFO:Creating metrics dataframe
2025-05-03 21:11:50,825:INFO:Initializing Extra Trees Regressor
2025-05-03 21:11:50,825:INFO:Total runtime is 0.036803464094797775 minutes
2025-05-03 21:11:50,825:INFO:SubProcess create_model() called ==================================
2025-05-03 21:11:50,825:INFO:Initializing create_model()
2025-05-03 21:11:50,825:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB0A5420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:50,825:INFO:Checking exceptions
2025-05-03 21:11:50,825:INFO:Importing libraries
2025-05-03 21:11:50,825:INFO:Copying training dataset
2025-05-03 21:11:50,832:INFO:Defining folds
2025-05-03 21:11:50,832:INFO:Declaring metric variables
2025-05-03 21:11:50,832:INFO:Importing untrained model
2025-05-03 21:11:50,832:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:11:50,832:INFO:Starting cross validation
2025-05-03 21:11:50,832:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:51,357:INFO:Calculating mean and std
2025-05-03 21:11:51,358:INFO:Creating metrics dataframe
2025-05-03 21:11:51,363:INFO:Uploading results into container
2025-05-03 21:11:51,364:INFO:Uploading model into container now
2025-05-03 21:11:51,364:INFO:_master_model_container: 5
2025-05-03 21:11:51,364:INFO:_display_container: 2
2025-05-03 21:11:51,364:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:11:51,365:INFO:create_model() successfully completed......................................
2025-05-03 21:11:51,544:INFO:SubProcess create_model() end ==================================
2025-05-03 21:11:51,545:INFO:Creating metrics dataframe
2025-05-03 21:11:51,553:INFO:Initializing create_model()
2025-05-03 21:11:51,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:51,553:INFO:Checking exceptions
2025-05-03 21:11:51,554:INFO:Importing libraries
2025-05-03 21:11:51,554:INFO:Copying training dataset
2025-05-03 21:11:51,558:INFO:Defining folds
2025-05-03 21:11:51,558:INFO:Declaring metric variables
2025-05-03 21:11:51,558:INFO:Importing untrained model
2025-05-03 21:11:51,558:INFO:Declaring custom model
2025-05-03 21:11:51,558:INFO:Ridge Regression Imported successfully
2025-05-03 21:11:51,559:INFO:Cross validation set to False
2025-05-03 21:11:51,559:INFO:Fitting Model
2025-05-03 21:11:51,608:INFO:Ridge(random_state=4)
2025-05-03 21:11:51,608:INFO:create_model() successfully completed......................................
2025-05-03 21:11:51,776:INFO:Creating Dashboard logs
2025-05-03 21:11:51,776:INFO:Model: Ridge Regression
2025-05-03 21:11:51,797:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:11:51,895:INFO:Initializing predict_model()
2025-05-03 21:11:51,895:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B05E0>)
2025-05-03 21:11:51,895:INFO:Checking exceptions
2025-05-03 21:11:51,895:INFO:Preloading libraries
2025-05-03 21:11:51,992:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:11:52,394:INFO:Creating Dashboard logs
2025-05-03 21:11:52,394:INFO:Model: Linear Regression
2025-05-03 21:11:52,415:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:11:52,749:INFO:Creating Dashboard logs
2025-05-03 21:11:52,749:INFO:Model: Random Forest Regressor
2025-05-03 21:11:52,773:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:11:53,096:INFO:Creating Dashboard logs
2025-05-03 21:11:53,096:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:11:53,116:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:11:53,429:INFO:Creating Dashboard logs
2025-05-03 21:11:53,429:INFO:Model: Extra Trees Regressor
2025-05-03 21:11:53,449:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:11:53,833:INFO:_master_model_container: 5
2025-05-03 21:11:53,834:INFO:_display_container: 2
2025-05-03 21:11:53,834:INFO:Ridge(random_state=4)
2025-05-03 21:11:53,834:INFO:compare_models() successfully completed......................................
2025-05-03 21:11:53,945:INFO:Initializing create_model()
2025-05-03 21:11:53,945:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:53,945:INFO:Checking exceptions
2025-05-03 21:11:53,945:INFO:Importing libraries
2025-05-03 21:11:53,945:INFO:Copying training dataset
2025-05-03 21:11:53,950:INFO:Defining folds
2025-05-03 21:11:53,950:INFO:Declaring metric variables
2025-05-03 21:11:53,950:INFO:Importing untrained model
2025-05-03 21:11:53,952:INFO:Linear Regression Imported successfully
2025-05-03 21:11:53,952:INFO:Starting cross validation
2025-05-03 21:11:53,952:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:54,124:INFO:Calculating mean and std
2025-05-03 21:11:54,124:INFO:Creating metrics dataframe
2025-05-03 21:11:54,124:INFO:Finalizing model
2025-05-03 21:11:54,194:INFO:Creating Dashboard logs
2025-05-03 21:11:54,194:INFO:Model: Linear Regression
2025-05-03 21:11:54,216:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:11:54,344:INFO:Initializing predict_model()
2025-05-03 21:11:54,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B0EE0>)
2025-05-03 21:11:54,344:INFO:Checking exceptions
2025-05-03 21:11:54,344:INFO:Preloading libraries
2025-05-03 21:11:54,518:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:11:55,630:INFO:Uploading results into container
2025-05-03 21:11:55,646:INFO:Uploading model into container now
2025-05-03 21:11:55,646:INFO:_master_model_container: 6
2025-05-03 21:11:55,646:INFO:_display_container: 3
2025-05-03 21:11:55,646:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:11:55,646:INFO:create_model() successfully completed......................................
2025-05-03 21:11:56,127:INFO:Initializing plot_model()
2025-05-03 21:11:56,127:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, system=True)
2025-05-03 21:11:56,127:INFO:Checking exceptions
2025-05-03 21:11:56,133:INFO:Preloading libraries
2025-05-03 21:11:56,134:INFO:Copying training dataset
2025-05-03 21:11:56,134:INFO:Plot type: feature
2025-05-03 21:11:56,310:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:11:56,461:INFO:Saving 'Feature Importance.png'
2025-05-03 21:11:56,565:INFO:Visual Rendered Successfully
2025-05-03 21:11:56,831:INFO:plot_model() successfully completed......................................
2025-05-03 21:11:56,964:INFO:Initializing create_model()
2025-05-03 21:11:56,965:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:56,965:INFO:Checking exceptions
2025-05-03 21:11:56,965:INFO:Importing libraries
2025-05-03 21:11:56,967:INFO:Copying training dataset
2025-05-03 21:11:56,971:INFO:Defining folds
2025-05-03 21:11:56,971:INFO:Declaring metric variables
2025-05-03 21:11:56,972:INFO:Importing untrained model
2025-05-03 21:11:56,972:INFO:Ridge Regression Imported successfully
2025-05-03 21:11:56,972:INFO:Starting cross validation
2025-05-03 21:11:56,973:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:11:57,181:INFO:Calculating mean and std
2025-05-03 21:11:57,181:INFO:Creating metrics dataframe
2025-05-03 21:11:57,184:INFO:Finalizing model
2025-05-03 21:11:57,247:INFO:Creating Dashboard logs
2025-05-03 21:11:57,247:INFO:Model: Ridge Regression
2025-05-03 21:11:57,274:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:11:57,575:INFO:Initializing predict_model()
2025-05-03 21:11:57,575:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B2DD0>)
2025-05-03 21:11:57,575:INFO:Checking exceptions
2025-05-03 21:11:57,575:INFO:Preloading libraries
2025-05-03 21:11:57,781:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:11:58,718:INFO:Uploading results into container
2025-05-03 21:11:58,720:INFO:Uploading model into container now
2025-05-03 21:11:58,721:INFO:_master_model_container: 7
2025-05-03 21:11:58,721:INFO:_display_container: 4
2025-05-03 21:11:58,722:INFO:Ridge(random_state=4)
2025-05-03 21:11:58,722:INFO:create_model() successfully completed......................................
2025-05-03 21:11:58,978:INFO:Initializing plot_model()
2025-05-03 21:11:58,978:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, system=True)
2025-05-03 21:11:58,978:INFO:Checking exceptions
2025-05-03 21:11:58,984:INFO:Preloading libraries
2025-05-03 21:11:58,984:INFO:Copying training dataset
2025-05-03 21:11:58,984:INFO:Plot type: feature
2025-05-03 21:11:59,130:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:11:59,283:INFO:Saving 'Feature Importance.png'
2025-05-03 21:11:59,422:INFO:Visual Rendered Successfully
2025-05-03 21:11:59,630:INFO:plot_model() successfully completed......................................
2025-05-03 21:11:59,729:INFO:Initializing create_model()
2025-05-03 21:11:59,730:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:11:59,730:INFO:Checking exceptions
2025-05-03 21:11:59,731:INFO:Importing libraries
2025-05-03 21:11:59,731:INFO:Copying training dataset
2025-05-03 21:11:59,736:INFO:Defining folds
2025-05-03 21:11:59,736:INFO:Declaring metric variables
2025-05-03 21:11:59,736:INFO:Importing untrained model
2025-05-03 21:11:59,737:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:11:59,737:INFO:Starting cross validation
2025-05-03 21:11:59,738:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:12:00,346:INFO:Calculating mean and std
2025-05-03 21:12:00,347:INFO:Creating metrics dataframe
2025-05-03 21:12:00,349:INFO:Finalizing model
2025-05-03 21:12:00,418:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 21:12:00,418:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000111 seconds.
2025-05-03 21:12:00,419:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 21:12:00,419:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 21:12:00,419:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 21:12:00,420:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 21:12:00,502:INFO:Creating Dashboard logs
2025-05-03 21:12:00,503:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:12:00,531:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:12:00,652:INFO:Initializing predict_model()
2025-05-03 21:12:00,652:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B0550>)
2025-05-03 21:12:00,653:INFO:Checking exceptions
2025-05-03 21:12:00,653:INFO:Preloading libraries
2025-05-03 21:12:00,774:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:12:01,295:INFO:Uploading results into container
2025-05-03 21:12:01,296:INFO:Uploading model into container now
2025-05-03 21:12:01,296:INFO:_master_model_container: 8
2025-05-03 21:12:01,296:INFO:_display_container: 5
2025-05-03 21:12:01,297:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:12:01,297:INFO:create_model() successfully completed......................................
2025-05-03 21:12:01,589:INFO:Initializing plot_model()
2025-05-03 21:12:01,589:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, system=True)
2025-05-03 21:12:01,589:INFO:Checking exceptions
2025-05-03 21:12:01,589:INFO:Preloading libraries
2025-05-03 21:12:01,602:INFO:Copying training dataset
2025-05-03 21:12:01,602:INFO:Plot type: feature
2025-05-03 21:12:01,602:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:12:01,685:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:12:01,810:INFO:Saving 'Feature Importance.png'
2025-05-03 21:12:01,914:INFO:Visual Rendered Successfully
2025-05-03 21:12:02,084:INFO:plot_model() successfully completed......................................
2025-05-03 21:12:02,215:INFO:Initializing create_model()
2025-05-03 21:12:02,215:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:12:02,215:INFO:Checking exceptions
2025-05-03 21:12:02,217:INFO:Importing libraries
2025-05-03 21:12:02,217:INFO:Copying training dataset
2025-05-03 21:12:02,220:INFO:Defining folds
2025-05-03 21:12:02,221:INFO:Declaring metric variables
2025-05-03 21:12:02,221:INFO:Importing untrained model
2025-05-03 21:12:02,221:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:12:02,222:INFO:Starting cross validation
2025-05-03 21:12:02,223:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:12:02,935:INFO:Calculating mean and std
2025-05-03 21:12:02,935:INFO:Creating metrics dataframe
2025-05-03 21:12:02,935:INFO:Finalizing model
2025-05-03 21:12:03,150:INFO:Creating Dashboard logs
2025-05-03 21:12:03,150:INFO:Model: Random Forest Regressor
2025-05-03 21:12:03,171:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:12:03,263:INFO:Initializing predict_model()
2025-05-03 21:12:03,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B1240>)
2025-05-03 21:12:03,263:INFO:Checking exceptions
2025-05-03 21:12:03,263:INFO:Preloading libraries
2025-05-03 21:12:03,394:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:12:03,831:INFO:Uploading results into container
2025-05-03 21:12:03,831:INFO:Uploading model into container now
2025-05-03 21:12:03,831:INFO:_master_model_container: 9
2025-05-03 21:12:03,831:INFO:_display_container: 6
2025-05-03 21:12:03,831:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:12:03,831:INFO:create_model() successfully completed......................................
2025-05-03 21:12:04,072:INFO:Initializing plot_model()
2025-05-03 21:12:04,072:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, system=True)
2025-05-03 21:12:04,072:INFO:Checking exceptions
2025-05-03 21:12:04,106:INFO:Preloading libraries
2025-05-03 21:12:04,140:INFO:Copying training dataset
2025-05-03 21:12:04,140:INFO:Plot type: feature
2025-05-03 21:12:04,140:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:12:04,216:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:12:04,333:INFO:Saving 'Feature Importance.png'
2025-05-03 21:12:04,484:INFO:Visual Rendered Successfully
2025-05-03 21:12:04,640:INFO:plot_model() successfully completed......................................
2025-05-03 21:12:04,729:INFO:Initializing create_model()
2025-05-03 21:12:04,729:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:12:04,729:INFO:Checking exceptions
2025-05-03 21:12:04,729:INFO:Importing libraries
2025-05-03 21:12:04,729:INFO:Copying training dataset
2025-05-03 21:12:04,745:INFO:Defining folds
2025-05-03 21:12:04,745:INFO:Declaring metric variables
2025-05-03 21:12:04,745:INFO:Importing untrained model
2025-05-03 21:12:04,745:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:12:04,745:INFO:Starting cross validation
2025-05-03 21:12:04,745:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:12:05,345:INFO:Calculating mean and std
2025-05-03 21:12:05,345:INFO:Creating metrics dataframe
2025-05-03 21:12:05,345:INFO:Finalizing model
2025-05-03 21:12:05,524:INFO:Creating Dashboard logs
2025-05-03 21:12:05,524:INFO:Model: Extra Trees Regressor
2025-05-03 21:12:05,543:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:12:05,644:INFO:Initializing predict_model()
2025-05-03 21:12:05,644:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B05E0>)
2025-05-03 21:12:05,644:INFO:Checking exceptions
2025-05-03 21:12:05,644:INFO:Preloading libraries
2025-05-03 21:12:05,775:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:12:06,240:INFO:Uploading results into container
2025-05-03 21:12:06,240:INFO:Uploading model into container now
2025-05-03 21:12:06,240:INFO:_master_model_container: 10
2025-05-03 21:12:06,240:INFO:_display_container: 7
2025-05-03 21:12:06,240:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:12:06,240:INFO:create_model() successfully completed......................................
2025-05-03 21:12:06,477:INFO:Initializing plot_model()
2025-05-03 21:12:06,477:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB3C3B50>, system=True)
2025-05-03 21:12:06,477:INFO:Checking exceptions
2025-05-03 21:12:06,510:INFO:Preloading libraries
2025-05-03 21:12:06,559:INFO:Copying training dataset
2025-05-03 21:12:06,560:INFO:Plot type: feature
2025-05-03 21:12:06,560:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:12:06,646:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:12:06,755:INFO:Saving 'Feature Importance.png'
2025-05-03 21:12:06,860:INFO:Visual Rendered Successfully
2025-05-03 21:12:07,021:INFO:plot_model() successfully completed......................................
2025-05-03 21:13:14,040:INFO:PyCaret RegressionExperiment
2025-05-03 21:13:14,040:INFO:Logging name: automl_bigdata_exp
2025-05-03 21:13:14,041:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 21:13:14,041:INFO:version 3.3.2
2025-05-03 21:13:14,041:INFO:Initializing setup()
2025-05-03 21:13:14,041:INFO:self.USI: 3629
2025-05-03 21:13:14,041:INFO:self._variable_keys: {'_ml_usecase', 'X', 'transform_target_param', 'y', 'fold_generator', 'exp_name_log', 'X_train', 'memory', 'exp_id', 'fold_shuffle_param', 'USI', 'logging_param', 'n_jobs_param', '_available_plots', 'X_test', 'y_train', 'y_test', 'pipeline', 'gpu_param', 'gpu_n_jobs_param', 'seed', 'target_param', 'html_param', 'data', 'fold_groups_param', 'idx', 'log_plots_param'}
2025-05-03 21:13:14,041:INFO:Checking environment
2025-05-03 21:13:14,041:INFO:python_version: 3.10.11
2025-05-03 21:13:14,041:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 21:13:14,042:INFO:machine: AMD64
2025-05-03 21:13:14,042:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 21:13:14,055:INFO:Memory: svmem(total=8403075072, available=1218695168, percent=85.5, used=7184379904, free=1218695168)
2025-05-03 21:13:14,056:INFO:Physical Core: 6
2025-05-03 21:13:14,056:INFO:Logical Core: 12
2025-05-03 21:13:14,056:INFO:Checking libraries
2025-05-03 21:13:14,056:INFO:System:
2025-05-03 21:13:14,056:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 21:13:14,056:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 21:13:14,056:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 21:13:14,056:INFO:PyCaret required dependencies:
2025-05-03 21:13:14,056:INFO:                 pip: 23.0.1
2025-05-03 21:13:14,056:INFO:          setuptools: 65.5.0
2025-05-03 21:13:14,057:INFO:             pycaret: 3.3.2
2025-05-03 21:13:14,057:INFO:             IPython: 8.36.0
2025-05-03 21:13:14,057:INFO:          ipywidgets: 8.1.6
2025-05-03 21:13:14,057:INFO:                tqdm: 4.67.1
2025-05-03 21:13:14,057:INFO:               numpy: 1.26.4
2025-05-03 21:13:14,057:INFO:              pandas: 1.5.3
2025-05-03 21:13:14,057:INFO:              jinja2: 3.1.6
2025-05-03 21:13:14,057:INFO:               scipy: 1.11.4
2025-05-03 21:13:14,057:INFO:              joblib: 1.3.2
2025-05-03 21:13:14,058:INFO:             sklearn: 1.4.2
2025-05-03 21:13:14,058:INFO:                pyod: 2.0.4
2025-05-03 21:13:14,058:INFO:            imblearn: 0.13.0
2025-05-03 21:13:14,058:INFO:   category_encoders: 2.7.0
2025-05-03 21:13:14,058:INFO:            lightgbm: 4.6.0
2025-05-03 21:13:14,058:INFO:               numba: 0.61.0
2025-05-03 21:13:14,058:INFO:            requests: 2.32.3
2025-05-03 21:13:14,058:INFO:          matplotlib: 3.7.5
2025-05-03 21:13:14,058:INFO:          scikitplot: 0.3.7
2025-05-03 21:13:14,058:INFO:         yellowbrick: 1.5
2025-05-03 21:13:14,058:INFO:              plotly: 5.24.1
2025-05-03 21:13:14,058:INFO:    plotly-resampler: Not installed
2025-05-03 21:13:14,058:INFO:             kaleido: 0.2.1
2025-05-03 21:13:14,058:INFO:           schemdraw: 0.15
2025-05-03 21:13:14,059:INFO:         statsmodels: 0.14.4
2025-05-03 21:13:14,059:INFO:              sktime: 0.26.0
2025-05-03 21:13:14,059:INFO:               tbats: 1.1.3
2025-05-03 21:13:14,059:INFO:            pmdarima: 2.0.4
2025-05-03 21:13:14,059:INFO:              psutil: 7.0.0
2025-05-03 21:13:14,059:INFO:          markupsafe: 3.0.2
2025-05-03 21:13:14,059:INFO:             pickle5: Not installed
2025-05-03 21:13:14,059:INFO:         cloudpickle: 2.2.1
2025-05-03 21:13:14,059:INFO:         deprecation: 2.1.0
2025-05-03 21:13:14,059:INFO:              xxhash: 3.5.0
2025-05-03 21:13:14,059:INFO:           wurlitzer: Not installed
2025-05-03 21:13:14,059:INFO:PyCaret optional dependencies:
2025-05-03 21:13:14,059:INFO:                shap: 0.47.2
2025-05-03 21:13:14,059:INFO:           interpret: Not installed
2025-05-03 21:13:14,059:INFO:                umap: Not installed
2025-05-03 21:13:14,059:INFO:     ydata_profiling: 4.16.1
2025-05-03 21:13:14,059:INFO:  explainerdashboard: Not installed
2025-05-03 21:13:14,059:INFO:             autoviz: Not installed
2025-05-03 21:13:14,059:INFO:           fairlearn: Not installed
2025-05-03 21:13:14,059:INFO:          deepchecks: Not installed
2025-05-03 21:13:14,060:INFO:             xgboost: Not installed
2025-05-03 21:13:14,060:INFO:            catboost: Not installed
2025-05-03 21:13:14,060:INFO:              kmodes: Not installed
2025-05-03 21:13:14,060:INFO:             mlxtend: Not installed
2025-05-03 21:13:14,060:INFO:       statsforecast: Not installed
2025-05-03 21:13:14,060:INFO:        tune_sklearn: Not installed
2025-05-03 21:13:14,060:INFO:                 ray: Not installed
2025-05-03 21:13:14,060:INFO:            hyperopt: Not installed
2025-05-03 21:13:14,060:INFO:              optuna: 4.3.0
2025-05-03 21:13:14,060:INFO:               skopt: Not installed
2025-05-03 21:13:14,060:INFO:              mlflow: 1.30.0
2025-05-03 21:13:14,060:INFO:              gradio: Not installed
2025-05-03 21:13:14,060:INFO:             fastapi: 0.115.12
2025-05-03 21:13:14,060:INFO:             uvicorn: 0.34.2
2025-05-03 21:13:14,060:INFO:              m2cgen: Not installed
2025-05-03 21:13:14,060:INFO:           evidently: 0.7.3
2025-05-03 21:13:14,060:INFO:               fugue: Not installed
2025-05-03 21:13:14,060:INFO:           streamlit: Not installed
2025-05-03 21:13:14,061:INFO:             prophet: Not installed
2025-05-03 21:13:14,061:INFO:None
2025-05-03 21:13:14,061:INFO:Set up data.
2025-05-03 21:13:14,076:INFO:Set up folding strategy.
2025-05-03 21:13:14,077:INFO:Set up train/test split.
2025-05-03 21:13:14,084:INFO:Set up index.
2025-05-03 21:13:14,085:INFO:Assigning column types.
2025-05-03 21:13:14,099:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 21:13:14,099:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,110:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,123:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,223:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,275:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,276:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,277:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,277:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,282:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,288:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,356:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,408:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,409:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 21:13:14,414:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,420:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,487:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,539:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,540:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,541:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,548:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,554:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,616:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,675:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,676:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,676:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,676:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 21:13:14,686:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,747:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,807:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,864:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,908:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:14,908:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:14,909:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 21:13:14,977:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,022:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,023:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,023:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,090:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,134:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,134:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,135:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 21:13:15,200:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,315:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 21:13:15,361:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,362:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,362:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 21:13:15,463:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,463:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,569:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,569:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:15,571:INFO:Preparing preprocessing pipeline...
2025-05-03 21:13:15,571:INFO:Set up simple imputation.
2025-05-03 21:13:15,574:INFO:Set up encoding of categorical features.
2025-05-03 21:13:15,574:INFO:Set up column name cleaning.
2025-05-03 21:13:15,706:INFO:Finished creating preprocessing pipeline.
2025-05-03 21:13:15,713:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:13:15,713:INFO:Creating final display dataframe.
2025-05-03 21:13:15,913:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                3629
2025-05-03 21:13:16,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:16,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:16,145:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:16,145:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 21:13:16,145:INFO:Logging experiment in loggers
2025-05-03 21:13:16,692:INFO:SubProcess save_model() called ==================================
2025-05-03 21:13:16,708:INFO:Initializing save_model()
2025-05-03 21:13:16,708:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp2_ig7gj3\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 21:13:16,708:INFO:Adding model into prep_pipe
2025-05-03 21:13:16,708:WARNING:Only Model saved as it was a pipeline.
2025-05-03 21:13:16,708:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp2_ig7gj3\Transformation Pipeline.pkl saved in current working directory
2025-05-03 21:13:16,708:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 21:13:16,708:INFO:save_model() successfully completed......................................
2025-05-03 21:13:16,864:INFO:SubProcess save_model() end ==================================
2025-05-03 21:13:16,896:INFO:setup() successfully completed in 2.11s...............
2025-05-03 21:13:17,363:INFO:Initializing compare_models()
2025-05-03 21:13:17,363:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 21:13:17,363:INFO:Checking exceptions
2025-05-03 21:13:17,363:INFO:Preparing display monitor
2025-05-03 21:13:17,379:INFO:Initializing Linear Regression
2025-05-03 21:13:17,379:INFO:Total runtime is 0.0 minutes
2025-05-03 21:13:17,379:INFO:SubProcess create_model() called ==================================
2025-05-03 21:13:17,379:INFO:Initializing create_model()
2025-05-03 21:13:17,379:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB28AE00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:17,379:INFO:Checking exceptions
2025-05-03 21:13:17,379:INFO:Importing libraries
2025-05-03 21:13:17,379:INFO:Copying training dataset
2025-05-03 21:13:17,385:INFO:Defining folds
2025-05-03 21:13:17,385:INFO:Declaring metric variables
2025-05-03 21:13:17,385:INFO:Importing untrained model
2025-05-03 21:13:17,385:INFO:Linear Regression Imported successfully
2025-05-03 21:13:17,385:INFO:Starting cross validation
2025-05-03 21:13:17,385:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:17,629:INFO:Calculating mean and std
2025-05-03 21:13:17,629:INFO:Creating metrics dataframe
2025-05-03 21:13:17,632:INFO:Uploading results into container
2025-05-03 21:13:17,632:INFO:Uploading model into container now
2025-05-03 21:13:17,633:INFO:_master_model_container: 1
2025-05-03 21:13:17,633:INFO:_display_container: 2
2025-05-03 21:13:17,633:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:13:17,633:INFO:create_model() successfully completed......................................
2025-05-03 21:13:17,821:INFO:SubProcess create_model() end ==================================
2025-05-03 21:13:17,821:INFO:Creating metrics dataframe
2025-05-03 21:13:17,824:INFO:Initializing Ridge Regression
2025-05-03 21:13:17,824:INFO:Total runtime is 0.007418473561604817 minutes
2025-05-03 21:13:17,824:INFO:SubProcess create_model() called ==================================
2025-05-03 21:13:17,825:INFO:Initializing create_model()
2025-05-03 21:13:17,825:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB28AE00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:17,825:INFO:Checking exceptions
2025-05-03 21:13:17,825:INFO:Importing libraries
2025-05-03 21:13:17,825:INFO:Copying training dataset
2025-05-03 21:13:17,828:INFO:Defining folds
2025-05-03 21:13:17,828:INFO:Declaring metric variables
2025-05-03 21:13:17,828:INFO:Importing untrained model
2025-05-03 21:13:17,829:INFO:Ridge Regression Imported successfully
2025-05-03 21:13:17,829:INFO:Starting cross validation
2025-05-03 21:13:17,830:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:18,019:INFO:Calculating mean and std
2025-05-03 21:13:18,020:INFO:Creating metrics dataframe
2025-05-03 21:13:18,023:INFO:Uploading results into container
2025-05-03 21:13:18,024:INFO:Uploading model into container now
2025-05-03 21:13:18,025:INFO:_master_model_container: 2
2025-05-03 21:13:18,025:INFO:_display_container: 2
2025-05-03 21:13:18,025:INFO:Ridge(random_state=4)
2025-05-03 21:13:18,025:INFO:create_model() successfully completed......................................
2025-05-03 21:13:18,182:INFO:SubProcess create_model() end ==================================
2025-05-03 21:13:18,182:INFO:Creating metrics dataframe
2025-05-03 21:13:18,182:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 21:13:18,182:INFO:Total runtime is 0.013389790058135986 minutes
2025-05-03 21:13:18,182:INFO:SubProcess create_model() called ==================================
2025-05-03 21:13:18,182:INFO:Initializing create_model()
2025-05-03 21:13:18,182:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB28AE00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:18,182:INFO:Checking exceptions
2025-05-03 21:13:18,182:INFO:Importing libraries
2025-05-03 21:13:18,182:INFO:Copying training dataset
2025-05-03 21:13:18,196:INFO:Defining folds
2025-05-03 21:13:18,196:INFO:Declaring metric variables
2025-05-03 21:13:18,196:INFO:Importing untrained model
2025-05-03 21:13:18,198:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:13:18,198:INFO:Starting cross validation
2025-05-03 21:13:18,198:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:18,710:INFO:Calculating mean and std
2025-05-03 21:13:18,710:INFO:Creating metrics dataframe
2025-05-03 21:13:18,715:INFO:Uploading results into container
2025-05-03 21:13:18,715:INFO:Uploading model into container now
2025-05-03 21:13:18,716:INFO:_master_model_container: 3
2025-05-03 21:13:18,716:INFO:_display_container: 2
2025-05-03 21:13:18,717:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:18,717:INFO:create_model() successfully completed......................................
2025-05-03 21:13:18,878:INFO:SubProcess create_model() end ==================================
2025-05-03 21:13:18,878:INFO:Creating metrics dataframe
2025-05-03 21:13:18,883:INFO:Initializing Random Forest Regressor
2025-05-03 21:13:18,883:INFO:Total runtime is 0.02507574955622355 minutes
2025-05-03 21:13:18,883:INFO:SubProcess create_model() called ==================================
2025-05-03 21:13:18,883:INFO:Initializing create_model()
2025-05-03 21:13:18,883:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB28AE00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:18,883:INFO:Checking exceptions
2025-05-03 21:13:18,883:INFO:Importing libraries
2025-05-03 21:13:18,883:INFO:Copying training dataset
2025-05-03 21:13:18,888:INFO:Defining folds
2025-05-03 21:13:18,888:INFO:Declaring metric variables
2025-05-03 21:13:18,888:INFO:Importing untrained model
2025-05-03 21:13:18,888:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:13:18,889:INFO:Starting cross validation
2025-05-03 21:13:18,890:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:19,581:INFO:Calculating mean and std
2025-05-03 21:13:19,582:INFO:Creating metrics dataframe
2025-05-03 21:13:19,586:INFO:Uploading results into container
2025-05-03 21:13:19,587:INFO:Uploading model into container now
2025-05-03 21:13:19,587:INFO:_master_model_container: 4
2025-05-03 21:13:19,587:INFO:_display_container: 2
2025-05-03 21:13:19,588:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:19,588:INFO:create_model() successfully completed......................................
2025-05-03 21:13:19,769:INFO:SubProcess create_model() end ==================================
2025-05-03 21:13:19,769:INFO:Creating metrics dataframe
2025-05-03 21:13:19,774:INFO:Initializing Extra Trees Regressor
2025-05-03 21:13:19,774:INFO:Total runtime is 0.039912080764770506 minutes
2025-05-03 21:13:19,774:INFO:SubProcess create_model() called ==================================
2025-05-03 21:13:19,774:INFO:Initializing create_model()
2025-05-03 21:13:19,775:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000200AB28AE00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:19,775:INFO:Checking exceptions
2025-05-03 21:13:19,775:INFO:Importing libraries
2025-05-03 21:13:19,775:INFO:Copying training dataset
2025-05-03 21:13:19,778:INFO:Defining folds
2025-05-03 21:13:19,778:INFO:Declaring metric variables
2025-05-03 21:13:19,778:INFO:Importing untrained model
2025-05-03 21:13:19,778:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:13:19,779:INFO:Starting cross validation
2025-05-03 21:13:19,780:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:20,411:INFO:Calculating mean and std
2025-05-03 21:13:20,412:INFO:Creating metrics dataframe
2025-05-03 21:13:20,414:INFO:Uploading results into container
2025-05-03 21:13:20,415:INFO:Uploading model into container now
2025-05-03 21:13:20,415:INFO:_master_model_container: 5
2025-05-03 21:13:20,415:INFO:_display_container: 2
2025-05-03 21:13:20,415:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:20,415:INFO:create_model() successfully completed......................................
2025-05-03 21:13:20,620:INFO:SubProcess create_model() end ==================================
2025-05-03 21:13:20,620:INFO:Creating metrics dataframe
2025-05-03 21:13:20,628:INFO:Initializing create_model()
2025-05-03 21:13:20,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:20,628:INFO:Checking exceptions
2025-05-03 21:13:20,628:INFO:Importing libraries
2025-05-03 21:13:20,628:INFO:Copying training dataset
2025-05-03 21:13:20,628:INFO:Defining folds
2025-05-03 21:13:20,628:INFO:Declaring metric variables
2025-05-03 21:13:20,628:INFO:Importing untrained model
2025-05-03 21:13:20,628:INFO:Declaring custom model
2025-05-03 21:13:20,628:INFO:Ridge Regression Imported successfully
2025-05-03 21:13:20,633:INFO:Cross validation set to False
2025-05-03 21:13:20,633:INFO:Fitting Model
2025-05-03 21:13:20,681:INFO:Ridge(random_state=4)
2025-05-03 21:13:20,681:INFO:create_model() successfully completed......................................
2025-05-03 21:13:20,819:INFO:Creating Dashboard logs
2025-05-03 21:13:20,820:INFO:Model: Ridge Regression
2025-05-03 21:13:20,953:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:13:21,103:INFO:Initializing predict_model()
2025-05-03 21:13:21,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDC550>)
2025-05-03 21:13:21,103:INFO:Checking exceptions
2025-05-03 21:13:21,103:INFO:Preloading libraries
2025-05-03 21:13:21,204:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:21,668:INFO:Creating Dashboard logs
2025-05-03 21:13:21,668:INFO:Model: Linear Regression
2025-05-03 21:13:21,697:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:13:22,031:INFO:Creating Dashboard logs
2025-05-03 21:13:22,031:INFO:Model: Random Forest Regressor
2025-05-03 21:13:22,052:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:13:22,442:INFO:Creating Dashboard logs
2025-05-03 21:13:22,443:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:13:22,460:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:13:22,758:INFO:Creating Dashboard logs
2025-05-03 21:13:22,758:INFO:Model: Extra Trees Regressor
2025-05-03 21:13:22,774:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:13:23,086:INFO:_master_model_container: 5
2025-05-03 21:13:23,086:INFO:_display_container: 2
2025-05-03 21:13:23,086:INFO:Ridge(random_state=4)
2025-05-03 21:13:23,086:INFO:compare_models() successfully completed......................................
2025-05-03 21:13:23,168:INFO:Initializing create_model()
2025-05-03 21:13:23,168:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:23,168:INFO:Checking exceptions
2025-05-03 21:13:23,168:INFO:Importing libraries
2025-05-03 21:13:23,168:INFO:Copying training dataset
2025-05-03 21:13:23,168:INFO:Defining folds
2025-05-03 21:13:23,168:INFO:Declaring metric variables
2025-05-03 21:13:23,168:INFO:Importing untrained model
2025-05-03 21:13:23,168:INFO:Linear Regression Imported successfully
2025-05-03 21:13:23,168:INFO:Starting cross validation
2025-05-03 21:13:23,168:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:23,309:INFO:Calculating mean and std
2025-05-03 21:13:23,309:INFO:Creating metrics dataframe
2025-05-03 21:13:23,309:INFO:Finalizing model
2025-05-03 21:13:23,357:INFO:Creating Dashboard logs
2025-05-03 21:13:23,357:INFO:Model: Linear Regression
2025-05-03 21:13:23,376:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 21:13:23,466:INFO:Initializing predict_model()
2025-05-03 21:13:23,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDD120>)
2025-05-03 21:13:23,466:INFO:Checking exceptions
2025-05-03 21:13:23,466:INFO:Preloading libraries
2025-05-03 21:13:23,567:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:23,946:INFO:Uploading results into container
2025-05-03 21:13:23,946:INFO:Uploading model into container now
2025-05-03 21:13:23,946:INFO:_master_model_container: 6
2025-05-03 21:13:23,946:INFO:_display_container: 3
2025-05-03 21:13:23,946:INFO:LinearRegression(n_jobs=-1)
2025-05-03 21:13:23,946:INFO:create_model() successfully completed......................................
2025-05-03 21:13:24,156:INFO:Initializing plot_model()
2025-05-03 21:13:24,156:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, system=True)
2025-05-03 21:13:24,156:INFO:Checking exceptions
2025-05-03 21:13:24,156:INFO:Preloading libraries
2025-05-03 21:13:24,156:INFO:Copying training dataset
2025-05-03 21:13:24,156:INFO:Plot type: feature
2025-05-03 21:13:24,260:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:13:24,371:INFO:Saving 'Feature Importance.png'
2025-05-03 21:13:24,459:INFO:Visual Rendered Successfully
2025-05-03 21:13:24,666:INFO:plot_model() successfully completed......................................
2025-05-03 21:13:24,767:INFO:Initializing create_model()
2025-05-03 21:13:24,767:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:24,767:INFO:Checking exceptions
2025-05-03 21:13:24,768:INFO:Importing libraries
2025-05-03 21:13:24,768:INFO:Copying training dataset
2025-05-03 21:13:24,772:INFO:Defining folds
2025-05-03 21:13:24,773:INFO:Declaring metric variables
2025-05-03 21:13:24,773:INFO:Importing untrained model
2025-05-03 21:13:24,773:INFO:Ridge Regression Imported successfully
2025-05-03 21:13:24,773:INFO:Starting cross validation
2025-05-03 21:13:24,775:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:24,996:INFO:Calculating mean and std
2025-05-03 21:13:24,996:INFO:Creating metrics dataframe
2025-05-03 21:13:24,998:INFO:Finalizing model
2025-05-03 21:13:25,052:INFO:Creating Dashboard logs
2025-05-03 21:13:25,052:INFO:Model: Ridge Regression
2025-05-03 21:13:25,072:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 21:13:25,181:INFO:Initializing predict_model()
2025-05-03 21:13:25,181:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B0430>)
2025-05-03 21:13:25,181:INFO:Checking exceptions
2025-05-03 21:13:25,181:INFO:Preloading libraries
2025-05-03 21:13:25,294:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:25,699:INFO:Uploading results into container
2025-05-03 21:13:25,699:INFO:Uploading model into container now
2025-05-03 21:13:25,699:INFO:_master_model_container: 7
2025-05-03 21:13:25,699:INFO:_display_container: 4
2025-05-03 21:13:25,699:INFO:Ridge(random_state=4)
2025-05-03 21:13:25,699:INFO:create_model() successfully completed......................................
2025-05-03 21:13:25,883:INFO:Initializing plot_model()
2025-05-03 21:13:25,883:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, system=True)
2025-05-03 21:13:25,883:INFO:Checking exceptions
2025-05-03 21:13:25,883:INFO:Preloading libraries
2025-05-03 21:13:25,883:INFO:Copying training dataset
2025-05-03 21:13:25,883:INFO:Plot type: feature
2025-05-03 21:13:25,989:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:13:26,094:INFO:Saving 'Feature Importance.png'
2025-05-03 21:13:26,208:INFO:Visual Rendered Successfully
2025-05-03 21:13:26,369:INFO:plot_model() successfully completed......................................
2025-05-03 21:13:26,452:INFO:Initializing create_model()
2025-05-03 21:13:26,452:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:26,452:INFO:Checking exceptions
2025-05-03 21:13:26,452:INFO:Importing libraries
2025-05-03 21:13:26,452:INFO:Copying training dataset
2025-05-03 21:13:26,452:INFO:Defining folds
2025-05-03 21:13:26,452:INFO:Declaring metric variables
2025-05-03 21:13:26,452:INFO:Importing untrained model
2025-05-03 21:13:26,452:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 21:13:26,452:INFO:Starting cross validation
2025-05-03 21:13:26,452:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:27,029:INFO:Calculating mean and std
2025-05-03 21:13:27,029:INFO:Creating metrics dataframe
2025-05-03 21:13:27,029:INFO:Finalizing model
2025-05-03 21:13:27,120:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 21:13:27,120:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000086 seconds.
2025-05-03 21:13:27,121:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 21:13:27,121:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 21:13:27,121:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 21:13:27,122:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 21:13:27,184:INFO:Creating Dashboard logs
2025-05-03 21:13:27,185:INFO:Model: Light Gradient Boosting Machine
2025-05-03 21:13:27,211:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 21:13:27,316:INFO:Initializing predict_model()
2025-05-03 21:13:27,316:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB0B0430>)
2025-05-03 21:13:27,316:INFO:Checking exceptions
2025-05-03 21:13:27,316:INFO:Preloading libraries
2025-05-03 21:13:27,421:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:27,892:INFO:Uploading results into container
2025-05-03 21:13:27,892:INFO:Uploading model into container now
2025-05-03 21:13:27,892:INFO:_master_model_container: 8
2025-05-03 21:13:27,892:INFO:_display_container: 5
2025-05-03 21:13:27,892:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:27,892:INFO:create_model() successfully completed......................................
2025-05-03 21:13:28,103:INFO:Initializing plot_model()
2025-05-03 21:13:28,103:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, system=True)
2025-05-03 21:13:28,103:INFO:Checking exceptions
2025-05-03 21:13:28,105:INFO:Preloading libraries
2025-05-03 21:13:28,110:INFO:Copying training dataset
2025-05-03 21:13:28,110:INFO:Plot type: feature
2025-05-03 21:13:28,110:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:13:28,189:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:13:28,300:INFO:Saving 'Feature Importance.png'
2025-05-03 21:13:28,415:INFO:Visual Rendered Successfully
2025-05-03 21:13:28,580:INFO:plot_model() successfully completed......................................
2025-05-03 21:13:28,664:INFO:Initializing create_model()
2025-05-03 21:13:28,665:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:28,665:INFO:Checking exceptions
2025-05-03 21:13:28,665:INFO:Importing libraries
2025-05-03 21:13:28,665:INFO:Copying training dataset
2025-05-03 21:13:28,665:INFO:Defining folds
2025-05-03 21:13:28,665:INFO:Declaring metric variables
2025-05-03 21:13:28,665:INFO:Importing untrained model
2025-05-03 21:13:28,665:INFO:Random Forest Regressor Imported successfully
2025-05-03 21:13:28,665:INFO:Starting cross validation
2025-05-03 21:13:28,665:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:29,376:INFO:Calculating mean and std
2025-05-03 21:13:29,376:INFO:Creating metrics dataframe
2025-05-03 21:13:29,376:INFO:Finalizing model
2025-05-03 21:13:29,598:INFO:Creating Dashboard logs
2025-05-03 21:13:29,598:INFO:Model: Random Forest Regressor
2025-05-03 21:13:29,619:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:13:29,709:INFO:Initializing predict_model()
2025-05-03 21:13:29,709:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AB712710>)
2025-05-03 21:13:29,709:INFO:Checking exceptions
2025-05-03 21:13:29,709:INFO:Preloading libraries
2025-05-03 21:13:29,841:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:30,339:INFO:Uploading results into container
2025-05-03 21:13:30,340:INFO:Uploading model into container now
2025-05-03 21:13:30,340:INFO:_master_model_container: 9
2025-05-03 21:13:30,340:INFO:_display_container: 6
2025-05-03 21:13:30,340:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:30,341:INFO:create_model() successfully completed......................................
2025-05-03 21:13:30,603:INFO:Initializing plot_model()
2025-05-03 21:13:30,603:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, system=True)
2025-05-03 21:13:30,603:INFO:Checking exceptions
2025-05-03 21:13:30,637:INFO:Preloading libraries
2025-05-03 21:13:30,672:INFO:Copying training dataset
2025-05-03 21:13:30,672:INFO:Plot type: feature
2025-05-03 21:13:30,672:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:13:30,751:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:13:30,862:INFO:Saving 'Feature Importance.png'
2025-05-03 21:13:30,968:INFO:Visual Rendered Successfully
2025-05-03 21:13:31,126:INFO:plot_model() successfully completed......................................
2025-05-03 21:13:31,207:INFO:Initializing create_model()
2025-05-03 21:13:31,207:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 21:13:31,207:INFO:Checking exceptions
2025-05-03 21:13:31,223:INFO:Importing libraries
2025-05-03 21:13:31,223:INFO:Copying training dataset
2025-05-03 21:13:31,223:INFO:Defining folds
2025-05-03 21:13:31,223:INFO:Declaring metric variables
2025-05-03 21:13:31,223:INFO:Importing untrained model
2025-05-03 21:13:31,223:INFO:Extra Trees Regressor Imported successfully
2025-05-03 21:13:31,223:INFO:Starting cross validation
2025-05-03 21:13:31,230:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 21:13:31,757:INFO:Calculating mean and std
2025-05-03 21:13:31,758:INFO:Creating metrics dataframe
2025-05-03 21:13:31,760:INFO:Finalizing model
2025-05-03 21:13:31,945:INFO:Creating Dashboard logs
2025-05-03 21:13:31,946:INFO:Model: Extra Trees Regressor
2025-05-03 21:13:31,964:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 21:13:32,060:INFO:Initializing predict_model()
2025-05-03 21:13:32,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000200AADDF0A0>)
2025-05-03 21:13:32,060:INFO:Checking exceptions
2025-05-03 21:13:32,060:INFO:Preloading libraries
2025-05-03 21:13:32,183:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 21:13:32,654:INFO:Uploading results into container
2025-05-03 21:13:32,654:INFO:Uploading model into container now
2025-05-03 21:13:32,654:INFO:_master_model_container: 10
2025-05-03 21:13:32,654:INFO:_display_container: 7
2025-05-03 21:13:32,654:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 21:13:32,654:INFO:create_model() successfully completed......................................
2025-05-03 21:13:32,883:INFO:Initializing plot_model()
2025-05-03 21:13:32,883:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000200AB4361A0>, system=True)
2025-05-03 21:13:32,883:INFO:Checking exceptions
2025-05-03 21:13:32,904:INFO:Preloading libraries
2025-05-03 21:13:32,951:INFO:Copying training dataset
2025-05-03 21:13:32,951:INFO:Plot type: feature
2025-05-03 21:13:32,951:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 21:13:33,022:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 21:13:33,126:INFO:Saving 'Feature Importance.png'
2025-05-03 21:13:33,245:INFO:Visual Rendered Successfully
2025-05-03 21:13:33,404:INFO:plot_model() successfully completed......................................
2025-05-03 21:56:02,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 21:56:02,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 21:56:02,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 21:56:02,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 22:11:33,527:INFO:PyCaret RegressionExperiment
2025-05-03 22:11:33,527:INFO:Logging name: automl_bigdata_exp
2025-05-03 22:11:33,527:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 22:11:33,527:INFO:version 3.3.2
2025-05-03 22:11:33,527:INFO:Initializing setup()
2025-05-03 22:11:33,527:INFO:self.USI: aa78
2025-05-03 22:11:33,527:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 22:11:33,527:INFO:Checking environment
2025-05-03 22:11:33,527:INFO:python_version: 3.10.11
2025-05-03 22:11:33,527:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 22:11:33,527:INFO:machine: AMD64
2025-05-03 22:11:33,540:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 22:11:33,544:INFO:Memory: svmem(total=8403075072, available=974487552, percent=88.4, used=7428587520, free=974487552)
2025-05-03 22:11:33,544:INFO:Physical Core: 6
2025-05-03 22:11:33,544:INFO:Logical Core: 12
2025-05-03 22:11:33,544:INFO:Checking libraries
2025-05-03 22:11:33,544:INFO:System:
2025-05-03 22:11:33,544:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 22:11:33,544:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 22:11:33,544:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 22:11:33,545:INFO:PyCaret required dependencies:
2025-05-03 22:11:33,622:INFO:                 pip: 23.0.1
2025-05-03 22:11:33,622:INFO:          setuptools: 65.5.0
2025-05-03 22:11:33,622:INFO:             pycaret: 3.3.2
2025-05-03 22:11:33,622:INFO:             IPython: 8.36.0
2025-05-03 22:11:33,622:INFO:          ipywidgets: 8.1.6
2025-05-03 22:11:33,622:INFO:                tqdm: 4.67.1
2025-05-03 22:11:33,622:INFO:               numpy: 1.26.4
2025-05-03 22:11:33,622:INFO:              pandas: 1.5.3
2025-05-03 22:11:33,622:INFO:              jinja2: 3.1.6
2025-05-03 22:11:33,622:INFO:               scipy: 1.11.4
2025-05-03 22:11:33,622:INFO:              joblib: 1.3.2
2025-05-03 22:11:33,622:INFO:             sklearn: 1.4.2
2025-05-03 22:11:33,622:INFO:                pyod: 2.0.4
2025-05-03 22:11:33,622:INFO:            imblearn: 0.13.0
2025-05-03 22:11:33,622:INFO:   category_encoders: 2.7.0
2025-05-03 22:11:33,622:INFO:            lightgbm: 4.6.0
2025-05-03 22:11:33,622:INFO:               numba: 0.61.0
2025-05-03 22:11:33,622:INFO:            requests: 2.32.3
2025-05-03 22:11:33,622:INFO:          matplotlib: 3.7.5
2025-05-03 22:11:33,622:INFO:          scikitplot: 0.3.7
2025-05-03 22:11:33,622:INFO:         yellowbrick: 1.5
2025-05-03 22:11:33,622:INFO:              plotly: 5.24.1
2025-05-03 22:11:33,622:INFO:    plotly-resampler: Not installed
2025-05-03 22:11:33,622:INFO:             kaleido: 0.2.1
2025-05-03 22:11:33,622:INFO:           schemdraw: 0.15
2025-05-03 22:11:33,622:INFO:         statsmodels: 0.14.4
2025-05-03 22:11:33,622:INFO:              sktime: 0.26.0
2025-05-03 22:11:33,622:INFO:               tbats: 1.1.3
2025-05-03 22:11:33,622:INFO:            pmdarima: 2.0.4
2025-05-03 22:11:33,622:INFO:              psutil: 7.0.0
2025-05-03 22:11:33,622:INFO:          markupsafe: 3.0.2
2025-05-03 22:11:33,622:INFO:             pickle5: Not installed
2025-05-03 22:11:33,622:INFO:         cloudpickle: 2.2.1
2025-05-03 22:11:33,622:INFO:         deprecation: 2.1.0
2025-05-03 22:11:33,622:INFO:              xxhash: 3.5.0
2025-05-03 22:11:33,622:INFO:           wurlitzer: Not installed
2025-05-03 22:11:33,622:INFO:PyCaret optional dependencies:
2025-05-03 22:11:33,636:INFO:                shap: 0.47.2
2025-05-03 22:11:33,636:INFO:           interpret: Not installed
2025-05-03 22:11:33,636:INFO:                umap: Not installed
2025-05-03 22:11:33,636:INFO:     ydata_profiling: 4.16.1
2025-05-03 22:11:33,636:INFO:  explainerdashboard: Not installed
2025-05-03 22:11:33,636:INFO:             autoviz: Not installed
2025-05-03 22:11:33,636:INFO:           fairlearn: Not installed
2025-05-03 22:11:33,636:INFO:          deepchecks: Not installed
2025-05-03 22:11:33,636:INFO:             xgboost: Not installed
2025-05-03 22:11:33,636:INFO:            catboost: Not installed
2025-05-03 22:11:33,636:INFO:              kmodes: Not installed
2025-05-03 22:11:33,636:INFO:             mlxtend: Not installed
2025-05-03 22:11:33,636:INFO:       statsforecast: Not installed
2025-05-03 22:11:33,636:INFO:        tune_sklearn: Not installed
2025-05-03 22:11:33,636:INFO:                 ray: Not installed
2025-05-03 22:11:33,636:INFO:            hyperopt: Not installed
2025-05-03 22:11:33,636:INFO:              optuna: 4.3.0
2025-05-03 22:11:33,636:INFO:               skopt: Not installed
2025-05-03 22:11:33,636:INFO:              mlflow: 1.30.0
2025-05-03 22:11:33,636:INFO:              gradio: Not installed
2025-05-03 22:11:33,636:INFO:             fastapi: 0.115.12
2025-05-03 22:11:33,636:INFO:             uvicorn: 0.34.2
2025-05-03 22:11:33,636:INFO:              m2cgen: Not installed
2025-05-03 22:11:33,636:INFO:           evidently: 0.7.3
2025-05-03 22:11:33,636:INFO:               fugue: Not installed
2025-05-03 22:11:33,636:INFO:           streamlit: Not installed
2025-05-03 22:11:33,636:INFO:             prophet: Not installed
2025-05-03 22:11:33,636:INFO:None
2025-05-03 22:11:33,636:INFO:Set up data.
2025-05-03 22:11:33,644:INFO:Set up folding strategy.
2025-05-03 22:11:33,644:INFO:Set up train/test split.
2025-05-03 22:11:33,650:INFO:Set up index.
2025-05-03 22:11:33,650:INFO:Assigning column types.
2025-05-03 22:11:33,650:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 22:11:33,650:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,657:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,663:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,712:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,754:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,754:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,754:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,761:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,768:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,817:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,851:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,858:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,858:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,858:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 22:11:33,858:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,865:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,914:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,956:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,956:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,956:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:33,963:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:11:33,963:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,020:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,060:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,060:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,060:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,060:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 22:11:34,067:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,124:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,164:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,164:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,171:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,226:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,261:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,261:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,261:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 22:11:34,324:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,365:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,428:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,463:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,463:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,463:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,463:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 22:11:34,525:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,567:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,567:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,622:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:11:34,664:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,665:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,665:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 22:11:34,761:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,761:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,871:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,871:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:34,884:INFO:Preparing preprocessing pipeline...
2025-05-03 22:11:34,885:INFO:Set up simple imputation.
2025-05-03 22:11:34,887:INFO:Set up encoding of categorical features.
2025-05-03 22:11:34,889:INFO:Set up column name cleaning.
2025-05-03 22:11:34,969:INFO:Finished creating preprocessing pipeline.
2025-05-03 22:11:34,985:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:11:34,985:INFO:Creating final display dataframe.
2025-05-03 22:11:35,178:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 9)
5   Transformed train set shape           (2100, 9)
6    Transformed test set shape            (900, 9)
7               Ignore features                   3
8              Numeric features                   3
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                aa78
2025-05-03 22:11:35,284:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:35,284:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:35,385:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:35,385:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:11:35,385:INFO:Logging experiment in loggers
2025-05-03 22:11:35,459:INFO:SubProcess save_model() called ==================================
2025-05-03 22:11:35,475:INFO:Initializing save_model()
2025-05-03 22:11:35,475:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp6w3i3783\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 22:11:35,475:INFO:Adding model into prep_pipe
2025-05-03 22:11:35,475:WARNING:Only Model saved as it was a pipeline.
2025-05-03 22:11:35,481:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp6w3i3783\Transformation Pipeline.pkl saved in current working directory
2025-05-03 22:11:35,489:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales',
                                             'Marketing Spend'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:11:35,489:INFO:save_model() successfully completed......................................
2025-05-03 22:11:35,644:INFO:SubProcess save_model() end ==================================
2025-05-03 22:11:35,659:INFO:setup() successfully completed in 1.86s...............
2025-05-03 22:11:35,726:INFO:Initializing compare_models()
2025-05-03 22:11:35,726:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 22:11:35,726:INFO:Checking exceptions
2025-05-03 22:11:35,726:INFO:Preparing display monitor
2025-05-03 22:11:35,733:INFO:Initializing Linear Regression
2025-05-03 22:11:35,733:INFO:Total runtime is 0.0 minutes
2025-05-03 22:11:35,733:INFO:SubProcess create_model() called ==================================
2025-05-03 22:11:35,733:INFO:Initializing create_model()
2025-05-03 22:11:35,733:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636304DBD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:35,733:INFO:Checking exceptions
2025-05-03 22:11:35,733:INFO:Importing libraries
2025-05-03 22:11:35,733:INFO:Copying training dataset
2025-05-03 22:11:35,733:INFO:Defining folds
2025-05-03 22:11:35,733:INFO:Declaring metric variables
2025-05-03 22:11:35,733:INFO:Importing untrained model
2025-05-03 22:11:35,733:INFO:Linear Regression Imported successfully
2025-05-03 22:11:35,733:INFO:Starting cross validation
2025-05-03 22:11:35,740:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:40,803:INFO:Calculating mean and std
2025-05-03 22:11:40,803:INFO:Creating metrics dataframe
2025-05-03 22:11:40,810:INFO:Uploading results into container
2025-05-03 22:11:40,810:INFO:Uploading model into container now
2025-05-03 22:11:40,810:INFO:_master_model_container: 1
2025-05-03 22:11:40,810:INFO:_display_container: 2
2025-05-03 22:11:40,810:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:11:40,810:INFO:create_model() successfully completed......................................
2025-05-03 22:11:41,064:INFO:SubProcess create_model() end ==================================
2025-05-03 22:11:41,064:INFO:Creating metrics dataframe
2025-05-03 22:11:41,068:INFO:Initializing Ridge Regression
2025-05-03 22:11:41,069:INFO:Total runtime is 0.08893065055211385 minutes
2025-05-03 22:11:41,069:INFO:SubProcess create_model() called ==================================
2025-05-03 22:11:41,069:INFO:Initializing create_model()
2025-05-03 22:11:41,069:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636304DBD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:41,069:INFO:Checking exceptions
2025-05-03 22:11:41,069:INFO:Importing libraries
2025-05-03 22:11:41,069:INFO:Copying training dataset
2025-05-03 22:11:41,072:INFO:Defining folds
2025-05-03 22:11:41,072:INFO:Declaring metric variables
2025-05-03 22:11:41,072:INFO:Importing untrained model
2025-05-03 22:11:41,072:INFO:Ridge Regression Imported successfully
2025-05-03 22:11:41,073:INFO:Starting cross validation
2025-05-03 22:11:41,074:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:45,022:INFO:Calculating mean and std
2025-05-03 22:11:45,022:INFO:Creating metrics dataframe
2025-05-03 22:11:45,022:INFO:Uploading results into container
2025-05-03 22:11:45,022:INFO:Uploading model into container now
2025-05-03 22:11:45,022:INFO:_master_model_container: 2
2025-05-03 22:11:45,022:INFO:_display_container: 2
2025-05-03 22:11:45,030:INFO:Ridge(random_state=4)
2025-05-03 22:11:45,030:INFO:create_model() successfully completed......................................
2025-05-03 22:11:45,243:INFO:SubProcess create_model() end ==================================
2025-05-03 22:11:45,243:INFO:Creating metrics dataframe
2025-05-03 22:11:45,259:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 22:11:45,259:INFO:Total runtime is 0.15876918236414592 minutes
2025-05-03 22:11:45,259:INFO:SubProcess create_model() called ==================================
2025-05-03 22:11:45,259:INFO:Initializing create_model()
2025-05-03 22:11:45,259:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636304DBD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:45,259:INFO:Checking exceptions
2025-05-03 22:11:45,259:INFO:Importing libraries
2025-05-03 22:11:45,259:INFO:Copying training dataset
2025-05-03 22:11:45,259:INFO:Defining folds
2025-05-03 22:11:45,259:INFO:Declaring metric variables
2025-05-03 22:11:45,259:INFO:Importing untrained model
2025-05-03 22:11:45,259:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:11:45,259:INFO:Starting cross validation
2025-05-03 22:11:45,259:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:49,198:INFO:Calculating mean and std
2025-05-03 22:11:49,198:INFO:Creating metrics dataframe
2025-05-03 22:11:49,202:INFO:Uploading results into container
2025-05-03 22:11:49,203:INFO:Uploading model into container now
2025-05-03 22:11:49,204:INFO:_master_model_container: 3
2025-05-03 22:11:49,204:INFO:_display_container: 2
2025-05-03 22:11:49,204:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:11:49,204:INFO:create_model() successfully completed......................................
2025-05-03 22:11:49,389:INFO:SubProcess create_model() end ==================================
2025-05-03 22:11:49,389:INFO:Creating metrics dataframe
2025-05-03 22:11:49,393:INFO:Initializing Random Forest Regressor
2025-05-03 22:11:49,393:INFO:Total runtime is 0.22767316897710166 minutes
2025-05-03 22:11:49,393:INFO:SubProcess create_model() called ==================================
2025-05-03 22:11:49,393:INFO:Initializing create_model()
2025-05-03 22:11:49,393:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636304DBD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:49,393:INFO:Checking exceptions
2025-05-03 22:11:49,393:INFO:Importing libraries
2025-05-03 22:11:49,393:INFO:Copying training dataset
2025-05-03 22:11:49,396:INFO:Defining folds
2025-05-03 22:11:49,396:INFO:Declaring metric variables
2025-05-03 22:11:49,396:INFO:Importing untrained model
2025-05-03 22:11:49,397:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:11:49,397:INFO:Starting cross validation
2025-05-03 22:11:49,398:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:50,094:INFO:Calculating mean and std
2025-05-03 22:11:50,094:INFO:Creating metrics dataframe
2025-05-03 22:11:50,094:INFO:Uploading results into container
2025-05-03 22:11:50,094:INFO:Uploading model into container now
2025-05-03 22:11:50,094:INFO:_master_model_container: 4
2025-05-03 22:11:50,094:INFO:_display_container: 2
2025-05-03 22:11:50,094:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:11:50,094:INFO:create_model() successfully completed......................................
2025-05-03 22:11:50,247:INFO:SubProcess create_model() end ==================================
2025-05-03 22:11:50,247:INFO:Creating metrics dataframe
2025-05-03 22:11:50,247:INFO:Initializing Extra Trees Regressor
2025-05-03 22:11:50,247:INFO:Total runtime is 0.24189526240030926 minutes
2025-05-03 22:11:50,247:INFO:SubProcess create_model() called ==================================
2025-05-03 22:11:50,247:INFO:Initializing create_model()
2025-05-03 22:11:50,247:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636304DBD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:50,247:INFO:Checking exceptions
2025-05-03 22:11:50,247:INFO:Importing libraries
2025-05-03 22:11:50,247:INFO:Copying training dataset
2025-05-03 22:11:50,254:INFO:Defining folds
2025-05-03 22:11:50,254:INFO:Declaring metric variables
2025-05-03 22:11:50,254:INFO:Importing untrained model
2025-05-03 22:11:50,254:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:11:50,254:INFO:Starting cross validation
2025-05-03 22:11:50,254:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:50,730:INFO:Calculating mean and std
2025-05-03 22:11:50,730:INFO:Creating metrics dataframe
2025-05-03 22:11:50,733:INFO:Uploading results into container
2025-05-03 22:11:50,734:INFO:Uploading model into container now
2025-05-03 22:11:50,734:INFO:_master_model_container: 5
2025-05-03 22:11:50,734:INFO:_display_container: 2
2025-05-03 22:11:50,735:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:11:50,735:INFO:create_model() successfully completed......................................
2025-05-03 22:11:50,892:INFO:SubProcess create_model() end ==================================
2025-05-03 22:11:50,899:INFO:Creating metrics dataframe
2025-05-03 22:11:50,899:INFO:Initializing create_model()
2025-05-03 22:11:50,899:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:50,899:INFO:Checking exceptions
2025-05-03 22:11:50,899:INFO:Importing libraries
2025-05-03 22:11:50,899:INFO:Copying training dataset
2025-05-03 22:11:50,906:INFO:Defining folds
2025-05-03 22:11:50,906:INFO:Declaring metric variables
2025-05-03 22:11:50,906:INFO:Importing untrained model
2025-05-03 22:11:50,906:INFO:Declaring custom model
2025-05-03 22:11:50,906:INFO:Ridge Regression Imported successfully
2025-05-03 22:11:50,906:INFO:Cross validation set to False
2025-05-03 22:11:50,906:INFO:Fitting Model
2025-05-03 22:11:50,954:INFO:Ridge(random_state=4)
2025-05-03 22:11:50,954:INFO:create_model() successfully completed......................................
2025-05-03 22:11:51,101:INFO:Creating Dashboard logs
2025-05-03 22:11:51,101:INFO:Model: Ridge Regression
2025-05-03 22:11:51,122:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:11:51,240:INFO:Initializing predict_model()
2025-05-03 22:11:51,240:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636313E050>)
2025-05-03 22:11:51,240:INFO:Checking exceptions
2025-05-03 22:11:51,240:INFO:Preloading libraries
2025-05-03 22:11:51,344:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:11:51,514:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 22:11:51,747:INFO:Creating Dashboard logs
2025-05-03 22:11:51,747:INFO:Model: Linear Regression
2025-05-03 22:11:51,775:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:11:52,080:INFO:Creating Dashboard logs
2025-05-03 22:11:52,080:INFO:Model: Random Forest Regressor
2025-05-03 22:11:52,094:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:11:52,406:INFO:Creating Dashboard logs
2025-05-03 22:11:52,406:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:11:52,427:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:11:52,729:INFO:Creating Dashboard logs
2025-05-03 22:11:52,730:INFO:Model: Extra Trees Regressor
2025-05-03 22:11:52,749:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:11:53,059:INFO:_master_model_container: 5
2025-05-03 22:11:53,059:INFO:_display_container: 2
2025-05-03 22:11:53,059:INFO:Ridge(random_state=4)
2025-05-03 22:11:53,059:INFO:compare_models() successfully completed......................................
2025-05-03 22:11:53,142:INFO:Initializing create_model()
2025-05-03 22:11:53,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:53,142:INFO:Checking exceptions
2025-05-03 22:11:53,142:INFO:Importing libraries
2025-05-03 22:11:53,142:INFO:Copying training dataset
2025-05-03 22:11:53,149:INFO:Defining folds
2025-05-03 22:11:53,149:INFO:Declaring metric variables
2025-05-03 22:11:53,149:INFO:Importing untrained model
2025-05-03 22:11:53,149:INFO:Linear Regression Imported successfully
2025-05-03 22:11:53,149:INFO:Starting cross validation
2025-05-03 22:11:53,149:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:53,261:INFO:Calculating mean and std
2025-05-03 22:11:53,261:INFO:Creating metrics dataframe
2025-05-03 22:11:53,261:INFO:Finalizing model
2025-05-03 22:11:53,309:INFO:Creating Dashboard logs
2025-05-03 22:11:53,309:INFO:Model: Linear Regression
2025-05-03 22:11:53,330:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:11:53,434:INFO:Initializing predict_model()
2025-05-03 22:11:53,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636313D870>)
2025-05-03 22:11:53,441:INFO:Checking exceptions
2025-05-03 22:11:53,441:INFO:Preloading libraries
2025-05-03 22:11:53,535:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:11:53,899:INFO:Uploading results into container
2025-05-03 22:11:53,899:INFO:Uploading model into container now
2025-05-03 22:11:53,899:INFO:_master_model_container: 6
2025-05-03 22:11:53,899:INFO:_display_container: 3
2025-05-03 22:11:53,899:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:11:53,899:INFO:create_model() successfully completed......................................
2025-05-03 22:11:54,103:INFO:Initializing plot_model()
2025-05-03 22:11:54,103:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, system=True)
2025-05-03 22:11:54,103:INFO:Checking exceptions
2025-05-03 22:11:54,107:INFO:Preloading libraries
2025-05-03 22:11:54,107:INFO:Copying training dataset
2025-05-03 22:11:54,107:INFO:Plot type: feature
2025-05-03 22:11:54,285:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:11:54,536:INFO:Saving 'Feature Importance.png'
2025-05-03 22:11:54,704:INFO:Visual Rendered Successfully
2025-05-03 22:11:54,858:INFO:plot_model() successfully completed......................................
2025-05-03 22:11:54,962:INFO:Initializing create_model()
2025-05-03 22:11:54,962:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:54,962:INFO:Checking exceptions
2025-05-03 22:11:54,962:INFO:Importing libraries
2025-05-03 22:11:54,962:INFO:Copying training dataset
2025-05-03 22:11:54,969:INFO:Defining folds
2025-05-03 22:11:54,969:INFO:Declaring metric variables
2025-05-03 22:11:54,969:INFO:Importing untrained model
2025-05-03 22:11:54,969:INFO:Ridge Regression Imported successfully
2025-05-03 22:11:54,969:INFO:Starting cross validation
2025-05-03 22:11:54,969:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:55,137:INFO:Calculating mean and std
2025-05-03 22:11:55,138:INFO:Creating metrics dataframe
2025-05-03 22:11:55,140:INFO:Finalizing model
2025-05-03 22:11:55,184:INFO:Creating Dashboard logs
2025-05-03 22:11:55,184:INFO:Model: Ridge Regression
2025-05-03 22:11:55,205:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:11:55,309:INFO:Initializing predict_model()
2025-05-03 22:11:55,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263630F0040>)
2025-05-03 22:11:55,309:INFO:Checking exceptions
2025-05-03 22:11:55,309:INFO:Preloading libraries
2025-05-03 22:11:55,421:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:11:55,774:INFO:Uploading results into container
2025-05-03 22:11:55,774:INFO:Uploading model into container now
2025-05-03 22:11:55,774:INFO:_master_model_container: 7
2025-05-03 22:11:55,774:INFO:_display_container: 4
2025-05-03 22:11:55,774:INFO:Ridge(random_state=4)
2025-05-03 22:11:55,774:INFO:create_model() successfully completed......................................
2025-05-03 22:11:55,962:INFO:Initializing plot_model()
2025-05-03 22:11:55,962:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, system=True)
2025-05-03 22:11:55,962:INFO:Checking exceptions
2025-05-03 22:11:55,968:INFO:Preloading libraries
2025-05-03 22:11:55,968:INFO:Copying training dataset
2025-05-03 22:11:55,968:INFO:Plot type: feature
2025-05-03 22:11:56,064:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:11:56,164:INFO:Saving 'Feature Importance.png'
2025-05-03 22:11:56,258:INFO:Visual Rendered Successfully
2025-05-03 22:11:56,419:INFO:plot_model() successfully completed......................................
2025-05-03 22:11:56,502:INFO:Initializing create_model()
2025-05-03 22:11:56,502:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:56,502:INFO:Checking exceptions
2025-05-03 22:11:56,503:INFO:Importing libraries
2025-05-03 22:11:56,503:INFO:Copying training dataset
2025-05-03 22:11:56,507:INFO:Defining folds
2025-05-03 22:11:56,507:INFO:Declaring metric variables
2025-05-03 22:11:56,507:INFO:Importing untrained model
2025-05-03 22:11:56,508:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:11:56,508:INFO:Starting cross validation
2025-05-03 22:11:56,509:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:56,944:INFO:Calculating mean and std
2025-05-03 22:11:56,944:INFO:Creating metrics dataframe
2025-05-03 22:11:56,947:INFO:Finalizing model
2025-05-03 22:11:57,018:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 22:11:57,018:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000216 seconds.
2025-05-03 22:11:57,018:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 22:11:57,019:INFO:[LightGBM] [Info] Total Bins 674
2025-05-03 22:11:57,019:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 8
2025-05-03 22:11:57,019:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 22:11:57,079:INFO:Creating Dashboard logs
2025-05-03 22:11:57,080:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:11:57,102:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:11:57,214:INFO:Initializing predict_model()
2025-05-03 22:11:57,215:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362963E20>)
2025-05-03 22:11:57,215:INFO:Checking exceptions
2025-05-03 22:11:57,215:INFO:Preloading libraries
2025-05-03 22:11:57,316:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:11:57,726:INFO:Uploading results into container
2025-05-03 22:11:57,726:INFO:Uploading model into container now
2025-05-03 22:11:57,726:INFO:_master_model_container: 8
2025-05-03 22:11:57,726:INFO:_display_container: 5
2025-05-03 22:11:57,732:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:11:57,732:INFO:create_model() successfully completed......................................
2025-05-03 22:11:57,934:INFO:Initializing plot_model()
2025-05-03 22:11:57,934:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, system=True)
2025-05-03 22:11:57,934:INFO:Checking exceptions
2025-05-03 22:11:57,934:INFO:Preloading libraries
2025-05-03 22:11:57,941:INFO:Copying training dataset
2025-05-03 22:11:57,941:INFO:Plot type: feature
2025-05-03 22:11:57,941:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:11:58,006:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:11:58,107:INFO:Saving 'Feature Importance.png'
2025-05-03 22:11:58,204:INFO:Visual Rendered Successfully
2025-05-03 22:11:58,358:INFO:plot_model() successfully completed......................................
2025-05-03 22:11:58,441:INFO:Initializing create_model()
2025-05-03 22:11:58,441:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:11:58,441:INFO:Checking exceptions
2025-05-03 22:11:58,441:INFO:Importing libraries
2025-05-03 22:11:58,441:INFO:Copying training dataset
2025-05-03 22:11:58,448:INFO:Defining folds
2025-05-03 22:11:58,448:INFO:Declaring metric variables
2025-05-03 22:11:58,448:INFO:Importing untrained model
2025-05-03 22:11:58,448:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:11:58,448:INFO:Starting cross validation
2025-05-03 22:11:58,448:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:11:59,138:INFO:Calculating mean and std
2025-05-03 22:11:59,139:INFO:Creating metrics dataframe
2025-05-03 22:11:59,140:INFO:Finalizing model
2025-05-03 22:11:59,378:INFO:Creating Dashboard logs
2025-05-03 22:11:59,378:INFO:Model: Random Forest Regressor
2025-05-03 22:11:59,403:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:11:59,517:INFO:Initializing predict_model()
2025-05-03 22:11:59,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263628FB400>)
2025-05-03 22:11:59,517:INFO:Checking exceptions
2025-05-03 22:11:59,517:INFO:Preloading libraries
2025-05-03 22:11:59,692:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:12:00,225:INFO:Uploading results into container
2025-05-03 22:12:00,225:INFO:Uploading model into container now
2025-05-03 22:12:00,225:INFO:_master_model_container: 9
2025-05-03 22:12:00,225:INFO:_display_container: 6
2025-05-03 22:12:00,225:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:12:00,225:INFO:create_model() successfully completed......................................
2025-05-03 22:12:00,434:INFO:Initializing plot_model()
2025-05-03 22:12:00,434:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, system=True)
2025-05-03 22:12:00,434:INFO:Checking exceptions
2025-05-03 22:12:00,455:INFO:Preloading libraries
2025-05-03 22:12:00,482:INFO:Copying training dataset
2025-05-03 22:12:00,482:INFO:Plot type: feature
2025-05-03 22:12:00,482:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:12:00,558:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:12:00,649:INFO:Saving 'Feature Importance.png'
2025-05-03 22:12:00,750:INFO:Visual Rendered Successfully
2025-05-03 22:12:00,899:INFO:plot_model() successfully completed......................................
2025-05-03 22:12:00,990:INFO:Initializing create_model()
2025-05-03 22:12:00,990:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:12:00,990:INFO:Checking exceptions
2025-05-03 22:12:00,990:INFO:Importing libraries
2025-05-03 22:12:00,990:INFO:Copying training dataset
2025-05-03 22:12:00,990:INFO:Defining folds
2025-05-03 22:12:00,990:INFO:Declaring metric variables
2025-05-03 22:12:00,990:INFO:Importing untrained model
2025-05-03 22:12:00,990:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:12:00,996:INFO:Starting cross validation
2025-05-03 22:12:00,997:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:12:01,483:INFO:Calculating mean and std
2025-05-03 22:12:01,483:INFO:Creating metrics dataframe
2025-05-03 22:12:01,483:INFO:Finalizing model
2025-05-03 22:12:01,667:INFO:Creating Dashboard logs
2025-05-03 22:12:01,668:INFO:Model: Extra Trees Regressor
2025-05-03 22:12:01,691:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:12:01,794:INFO:Initializing predict_model()
2025-05-03 22:12:01,794:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263628FA830>)
2025-05-03 22:12:01,794:INFO:Checking exceptions
2025-05-03 22:12:01,794:INFO:Preloading libraries
2025-05-03 22:12:01,913:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:12:02,427:INFO:Uploading results into container
2025-05-03 22:12:02,427:INFO:Uploading model into container now
2025-05-03 22:12:02,427:INFO:_master_model_container: 10
2025-05-03 22:12:02,427:INFO:_display_container: 7
2025-05-03 22:12:02,427:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:12:02,427:INFO:create_model() successfully completed......................................
2025-05-03 22:12:02,642:INFO:Initializing plot_model()
2025-05-03 22:12:02,642:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636226C400>, system=True)
2025-05-03 22:12:02,642:INFO:Checking exceptions
2025-05-03 22:12:02,666:INFO:Preloading libraries
2025-05-03 22:12:02,705:INFO:Copying training dataset
2025-05-03 22:12:02,705:INFO:Plot type: feature
2025-05-03 22:12:02,705:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:12:02,779:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:12:02,871:INFO:Saving 'Feature Importance.png'
2025-05-03 22:12:02,983:INFO:Visual Rendered Successfully
2025-05-03 22:12:03,144:INFO:plot_model() successfully completed......................................
2025-05-03 22:40:34,979:INFO:PyCaret RegressionExperiment
2025-05-03 22:40:34,979:INFO:Logging name: automl_bigdata_exp
2025-05-03 22:40:34,979:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 22:40:34,979:INFO:version 3.3.2
2025-05-03 22:40:34,979:INFO:Initializing setup()
2025-05-03 22:40:34,979:INFO:self.USI: 3793
2025-05-03 22:40:34,979:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 22:40:34,979:INFO:Checking environment
2025-05-03 22:40:34,979:INFO:python_version: 3.10.11
2025-05-03 22:40:34,979:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 22:40:34,979:INFO:machine: AMD64
2025-05-03 22:40:34,979:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 22:40:34,984:INFO:Memory: svmem(total=8403075072, available=1344028672, percent=84.0, used=7059046400, free=1344028672)
2025-05-03 22:40:34,984:INFO:Physical Core: 6
2025-05-03 22:40:34,984:INFO:Logical Core: 12
2025-05-03 22:40:34,984:INFO:Checking libraries
2025-05-03 22:40:34,985:INFO:System:
2025-05-03 22:40:34,985:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 22:40:34,985:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 22:40:34,985:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 22:40:34,985:INFO:PyCaret required dependencies:
2025-05-03 22:40:34,985:INFO:                 pip: 23.0.1
2025-05-03 22:40:34,985:INFO:          setuptools: 65.5.0
2025-05-03 22:40:34,985:INFO:             pycaret: 3.3.2
2025-05-03 22:40:34,985:INFO:             IPython: 8.36.0
2025-05-03 22:40:34,985:INFO:          ipywidgets: 8.1.6
2025-05-03 22:40:34,985:INFO:                tqdm: 4.67.1
2025-05-03 22:40:34,985:INFO:               numpy: 1.26.4
2025-05-03 22:40:34,985:INFO:              pandas: 1.5.3
2025-05-03 22:40:34,985:INFO:              jinja2: 3.1.6
2025-05-03 22:40:34,985:INFO:               scipy: 1.11.4
2025-05-03 22:40:34,985:INFO:              joblib: 1.3.2
2025-05-03 22:40:34,985:INFO:             sklearn: 1.4.2
2025-05-03 22:40:34,985:INFO:                pyod: 2.0.4
2025-05-03 22:40:34,985:INFO:            imblearn: 0.13.0
2025-05-03 22:40:34,985:INFO:   category_encoders: 2.7.0
2025-05-03 22:40:34,985:INFO:            lightgbm: 4.6.0
2025-05-03 22:40:34,985:INFO:               numba: 0.61.0
2025-05-03 22:40:34,985:INFO:            requests: 2.32.3
2025-05-03 22:40:34,985:INFO:          matplotlib: 3.7.5
2025-05-03 22:40:34,985:INFO:          scikitplot: 0.3.7
2025-05-03 22:40:34,985:INFO:         yellowbrick: 1.5
2025-05-03 22:40:34,985:INFO:              plotly: 5.24.1
2025-05-03 22:40:34,985:INFO:    plotly-resampler: Not installed
2025-05-03 22:40:34,985:INFO:             kaleido: 0.2.1
2025-05-03 22:40:34,985:INFO:           schemdraw: 0.15
2025-05-03 22:40:34,985:INFO:         statsmodels: 0.14.4
2025-05-03 22:40:34,985:INFO:              sktime: 0.26.0
2025-05-03 22:40:34,985:INFO:               tbats: 1.1.3
2025-05-03 22:40:34,985:INFO:            pmdarima: 2.0.4
2025-05-03 22:40:34,985:INFO:              psutil: 7.0.0
2025-05-03 22:40:34,985:INFO:          markupsafe: 3.0.2
2025-05-03 22:40:34,985:INFO:             pickle5: Not installed
2025-05-03 22:40:34,985:INFO:         cloudpickle: 2.2.1
2025-05-03 22:40:34,985:INFO:         deprecation: 2.1.0
2025-05-03 22:40:34,985:INFO:              xxhash: 3.5.0
2025-05-03 22:40:34,985:INFO:           wurlitzer: Not installed
2025-05-03 22:40:34,985:INFO:PyCaret optional dependencies:
2025-05-03 22:40:34,985:INFO:                shap: 0.47.2
2025-05-03 22:40:34,985:INFO:           interpret: Not installed
2025-05-03 22:40:34,985:INFO:                umap: Not installed
2025-05-03 22:40:34,985:INFO:     ydata_profiling: 4.16.1
2025-05-03 22:40:34,985:INFO:  explainerdashboard: Not installed
2025-05-03 22:40:34,985:INFO:             autoviz: Not installed
2025-05-03 22:40:34,985:INFO:           fairlearn: Not installed
2025-05-03 22:40:34,985:INFO:          deepchecks: Not installed
2025-05-03 22:40:34,985:INFO:             xgboost: Not installed
2025-05-03 22:40:34,985:INFO:            catboost: Not installed
2025-05-03 22:40:34,985:INFO:              kmodes: Not installed
2025-05-03 22:40:34,985:INFO:             mlxtend: Not installed
2025-05-03 22:40:34,985:INFO:       statsforecast: Not installed
2025-05-03 22:40:34,985:INFO:        tune_sklearn: Not installed
2025-05-03 22:40:34,985:INFO:                 ray: Not installed
2025-05-03 22:40:34,985:INFO:            hyperopt: Not installed
2025-05-03 22:40:34,985:INFO:              optuna: 4.3.0
2025-05-03 22:40:34,985:INFO:               skopt: Not installed
2025-05-03 22:40:34,985:INFO:              mlflow: 1.30.0
2025-05-03 22:40:34,985:INFO:              gradio: Not installed
2025-05-03 22:40:34,985:INFO:             fastapi: 0.115.12
2025-05-03 22:40:34,985:INFO:             uvicorn: 0.34.2
2025-05-03 22:40:34,985:INFO:              m2cgen: Not installed
2025-05-03 22:40:34,985:INFO:           evidently: 0.7.3
2025-05-03 22:40:34,985:INFO:               fugue: Not installed
2025-05-03 22:40:34,985:INFO:           streamlit: Not installed
2025-05-03 22:40:34,985:INFO:             prophet: Not installed
2025-05-03 22:40:34,985:INFO:None
2025-05-03 22:40:34,985:INFO:Set up data.
2025-05-03 22:40:34,992:INFO:Set up folding strategy.
2025-05-03 22:40:34,992:INFO:Set up train/test split.
2025-05-03 22:40:35,006:INFO:Set up index.
2025-05-03 22:40:35,006:INFO:Assigning column types.
2025-05-03 22:40:35,013:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 22:40:35,013:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,020:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,020:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,082:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,134:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,137:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,137:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,138:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,144:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,152:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,216:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,266:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,267:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,267:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,267:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 22:40:35,272:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,279:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,383:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,383:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,383:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,388:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,392:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,494:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,495:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 22:40:35,504:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,561:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,605:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,606:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,606:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,616:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,676:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,721:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,721:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 22:40:35,792:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,840:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,840:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,916:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,961:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:40:35,962:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,962:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:35,962:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 22:40:36,032:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:36,075:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,075:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,146:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:40:36,192:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,194:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 22:40:36,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,438:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,438:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,442:INFO:Preparing preprocessing pipeline...
2025-05-03 22:40:36,442:INFO:Set up simple imputation.
2025-05-03 22:40:36,446:INFO:Set up encoding of categorical features.
2025-05-03 22:40:36,448:INFO:Set up column name cleaning.
2025-05-03 22:40:36,565:INFO:Finished creating preprocessing pipeline.
2025-05-03 22:40:36,574:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:40:36,574:INFO:Creating final display dataframe.
2025-05-03 22:40:36,780:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 7)
5   Transformed train set shape           (2100, 7)
6    Transformed test set shape            (900, 7)
7               Ignore features                   5
8              Numeric features                   1
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                3793
2025-05-03 22:40:36,886:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,992:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:40:36,993:INFO:Logging experiment in loggers
2025-05-03 22:40:37,414:INFO:SubProcess save_model() called ==================================
2025-05-03 22:40:37,451:INFO:Initializing save_model()
2025-05-03 22:40:37,451:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp2jcb1wq0\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 22:40:37,451:INFO:Adding model into prep_pipe
2025-05-03 22:40:37,451:WARNING:Only Model saved as it was a pipeline.
2025-05-03 22:40:37,457:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp2jcb1wq0\Transformation Pipeline.pkl saved in current working directory
2025-05-03 22:40:37,464:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:40:37,464:INFO:save_model() successfully completed......................................
2025-05-03 22:40:37,854:INFO:SubProcess save_model() end ==================================
2025-05-03 22:40:37,901:INFO:setup() successfully completed in 2.03s...............
2025-05-03 22:40:38,394:INFO:Initializing compare_models()
2025-05-03 22:40:38,394:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 22:40:38,394:INFO:Checking exceptions
2025-05-03 22:40:38,394:INFO:Preparing display monitor
2025-05-03 22:40:38,394:INFO:Initializing Linear Regression
2025-05-03 22:40:38,394:INFO:Total runtime is 0.0 minutes
2025-05-03 22:40:38,394:INFO:SubProcess create_model() called ==================================
2025-05-03 22:40:38,394:INFO:Initializing create_model()
2025-05-03 22:40:38,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362E92FB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:38,394:INFO:Checking exceptions
2025-05-03 22:40:38,394:INFO:Importing libraries
2025-05-03 22:40:38,394:INFO:Copying training dataset
2025-05-03 22:40:38,401:INFO:Defining folds
2025-05-03 22:40:38,401:INFO:Declaring metric variables
2025-05-03 22:40:38,401:INFO:Importing untrained model
2025-05-03 22:40:38,401:INFO:Linear Regression Imported successfully
2025-05-03 22:40:38,401:INFO:Starting cross validation
2025-05-03 22:40:38,401:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:43,876:INFO:Calculating mean and std
2025-05-03 22:40:43,876:INFO:Creating metrics dataframe
2025-05-03 22:40:43,881:INFO:Uploading results into container
2025-05-03 22:40:43,881:INFO:Uploading model into container now
2025-05-03 22:40:43,886:INFO:_master_model_container: 1
2025-05-03 22:40:43,886:INFO:_display_container: 2
2025-05-03 22:40:43,887:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:40:43,887:INFO:create_model() successfully completed......................................
2025-05-03 22:40:44,210:INFO:SubProcess create_model() end ==================================
2025-05-03 22:40:44,210:INFO:Creating metrics dataframe
2025-05-03 22:40:44,215:INFO:Initializing Ridge Regression
2025-05-03 22:40:44,215:INFO:Total runtime is 0.09702576398849487 minutes
2025-05-03 22:40:44,215:INFO:SubProcess create_model() called ==================================
2025-05-03 22:40:44,217:INFO:Initializing create_model()
2025-05-03 22:40:44,217:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362E92FB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:44,217:INFO:Checking exceptions
2025-05-03 22:40:44,217:INFO:Importing libraries
2025-05-03 22:40:44,217:INFO:Copying training dataset
2025-05-03 22:40:44,219:INFO:Defining folds
2025-05-03 22:40:44,219:INFO:Declaring metric variables
2025-05-03 22:40:44,220:INFO:Importing untrained model
2025-05-03 22:40:44,220:INFO:Ridge Regression Imported successfully
2025-05-03 22:40:44,220:INFO:Starting cross validation
2025-05-03 22:40:44,223:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:47,797:INFO:Calculating mean and std
2025-05-03 22:40:47,798:INFO:Creating metrics dataframe
2025-05-03 22:40:47,802:INFO:Uploading results into container
2025-05-03 22:40:47,804:INFO:Uploading model into container now
2025-05-03 22:40:47,804:INFO:_master_model_container: 2
2025-05-03 22:40:47,805:INFO:_display_container: 2
2025-05-03 22:40:47,805:INFO:Ridge(random_state=4)
2025-05-03 22:40:47,805:INFO:create_model() successfully completed......................................
2025-05-03 22:40:48,108:INFO:SubProcess create_model() end ==================================
2025-05-03 22:40:48,108:INFO:Creating metrics dataframe
2025-05-03 22:40:48,116:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 22:40:48,116:INFO:Total runtime is 0.16202671925226847 minutes
2025-05-03 22:40:48,116:INFO:SubProcess create_model() called ==================================
2025-05-03 22:40:48,116:INFO:Initializing create_model()
2025-05-03 22:40:48,116:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362E92FB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:48,116:INFO:Checking exceptions
2025-05-03 22:40:48,116:INFO:Importing libraries
2025-05-03 22:40:48,116:INFO:Copying training dataset
2025-05-03 22:40:48,116:INFO:Defining folds
2025-05-03 22:40:48,116:INFO:Declaring metric variables
2025-05-03 22:40:48,116:INFO:Importing untrained model
2025-05-03 22:40:48,116:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:40:48,116:INFO:Starting cross validation
2025-05-03 22:40:48,123:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:52,123:INFO:Calculating mean and std
2025-05-03 22:40:52,124:INFO:Creating metrics dataframe
2025-05-03 22:40:52,128:INFO:Uploading results into container
2025-05-03 22:40:52,129:INFO:Uploading model into container now
2025-05-03 22:40:52,129:INFO:_master_model_container: 3
2025-05-03 22:40:52,129:INFO:_display_container: 2
2025-05-03 22:40:52,130:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:40:52,130:INFO:create_model() successfully completed......................................
2025-05-03 22:40:52,319:INFO:SubProcess create_model() end ==================================
2025-05-03 22:40:52,319:INFO:Creating metrics dataframe
2025-05-03 22:40:52,324:INFO:Initializing Random Forest Regressor
2025-05-03 22:40:52,324:INFO:Total runtime is 0.2321636120478312 minutes
2025-05-03 22:40:52,324:INFO:SubProcess create_model() called ==================================
2025-05-03 22:40:52,324:INFO:Initializing create_model()
2025-05-03 22:40:52,324:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362E92FB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:52,324:INFO:Checking exceptions
2025-05-03 22:40:52,324:INFO:Importing libraries
2025-05-03 22:40:52,324:INFO:Copying training dataset
2025-05-03 22:40:52,330:INFO:Defining folds
2025-05-03 22:40:52,330:INFO:Declaring metric variables
2025-05-03 22:40:52,330:INFO:Importing untrained model
2025-05-03 22:40:52,330:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:40:52,331:INFO:Starting cross validation
2025-05-03 22:40:52,332:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:52,789:INFO:Calculating mean and std
2025-05-03 22:40:52,790:INFO:Creating metrics dataframe
2025-05-03 22:40:52,793:INFO:Uploading results into container
2025-05-03 22:40:52,793:INFO:Uploading model into container now
2025-05-03 22:40:52,793:INFO:_master_model_container: 4
2025-05-03 22:40:52,793:INFO:_display_container: 2
2025-05-03 22:40:52,793:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:40:52,794:INFO:create_model() successfully completed......................................
2025-05-03 22:40:52,947:INFO:SubProcess create_model() end ==================================
2025-05-03 22:40:52,947:INFO:Creating metrics dataframe
2025-05-03 22:40:52,952:INFO:Initializing Extra Trees Regressor
2025-05-03 22:40:52,952:INFO:Total runtime is 0.2426374594370524 minutes
2025-05-03 22:40:52,952:INFO:SubProcess create_model() called ==================================
2025-05-03 22:40:52,952:INFO:Initializing create_model()
2025-05-03 22:40:52,953:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362E92FB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:52,953:INFO:Checking exceptions
2025-05-03 22:40:52,953:INFO:Importing libraries
2025-05-03 22:40:52,953:INFO:Copying training dataset
2025-05-03 22:40:52,956:INFO:Defining folds
2025-05-03 22:40:52,956:INFO:Declaring metric variables
2025-05-03 22:40:52,956:INFO:Importing untrained model
2025-05-03 22:40:52,956:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:40:52,956:INFO:Starting cross validation
2025-05-03 22:40:52,957:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:53,324:INFO:Calculating mean and std
2025-05-03 22:40:53,324:INFO:Creating metrics dataframe
2025-05-03 22:40:53,326:INFO:Uploading results into container
2025-05-03 22:40:53,326:INFO:Uploading model into container now
2025-05-03 22:40:53,326:INFO:_master_model_container: 5
2025-05-03 22:40:53,326:INFO:_display_container: 2
2025-05-03 22:40:53,326:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:40:53,326:INFO:create_model() successfully completed......................................
2025-05-03 22:40:53,476:INFO:SubProcess create_model() end ==================================
2025-05-03 22:40:53,476:INFO:Creating metrics dataframe
2025-05-03 22:40:53,485:INFO:Initializing create_model()
2025-05-03 22:40:53,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:53,485:INFO:Checking exceptions
2025-05-03 22:40:53,486:INFO:Importing libraries
2025-05-03 22:40:53,486:INFO:Copying training dataset
2025-05-03 22:40:53,489:INFO:Defining folds
2025-05-03 22:40:53,489:INFO:Declaring metric variables
2025-05-03 22:40:53,489:INFO:Importing untrained model
2025-05-03 22:40:53,489:INFO:Declaring custom model
2025-05-03 22:40:53,489:INFO:Ridge Regression Imported successfully
2025-05-03 22:40:53,490:INFO:Cross validation set to False
2025-05-03 22:40:53,490:INFO:Fitting Model
2025-05-03 22:40:53,546:INFO:Ridge(random_state=4)
2025-05-03 22:40:53,546:INFO:create_model() successfully completed......................................
2025-05-03 22:40:53,691:INFO:Creating Dashboard logs
2025-05-03 22:40:53,691:INFO:Model: Ridge Regression
2025-05-03 22:40:53,715:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:40:53,821:INFO:Initializing predict_model()
2025-05-03 22:40:53,821:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362BCF520>)
2025-05-03 22:40:53,821:INFO:Checking exceptions
2025-05-03 22:40:53,821:INFO:Preloading libraries
2025-05-03 22:40:53,942:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:40:54,331:INFO:Creating Dashboard logs
2025-05-03 22:40:54,332:INFO:Model: Linear Regression
2025-05-03 22:40:54,354:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:40:54,678:INFO:Creating Dashboard logs
2025-05-03 22:40:54,679:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:40:54,697:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:40:55,004:INFO:Creating Dashboard logs
2025-05-03 22:40:55,004:INFO:Model: Random Forest Regressor
2025-05-03 22:40:55,038:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:40:55,527:INFO:Creating Dashboard logs
2025-05-03 22:40:55,528:INFO:Model: Extra Trees Regressor
2025-05-03 22:40:55,553:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:40:55,914:INFO:_master_model_container: 5
2025-05-03 22:40:55,914:INFO:_display_container: 2
2025-05-03 22:40:55,914:INFO:Ridge(random_state=4)
2025-05-03 22:40:55,914:INFO:compare_models() successfully completed......................................
2025-05-03 22:40:56,025:INFO:Initializing create_model()
2025-05-03 22:40:56,025:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:56,025:INFO:Checking exceptions
2025-05-03 22:40:56,025:INFO:Importing libraries
2025-05-03 22:40:56,025:INFO:Copying training dataset
2025-05-03 22:40:56,032:INFO:Defining folds
2025-05-03 22:40:56,032:INFO:Declaring metric variables
2025-05-03 22:40:56,032:INFO:Importing untrained model
2025-05-03 22:40:56,032:INFO:Linear Regression Imported successfully
2025-05-03 22:40:56,032:INFO:Starting cross validation
2025-05-03 22:40:56,032:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:56,186:INFO:Calculating mean and std
2025-05-03 22:40:56,187:INFO:Creating metrics dataframe
2025-05-03 22:40:56,189:INFO:Finalizing model
2025-05-03 22:40:56,242:INFO:Creating Dashboard logs
2025-05-03 22:40:56,242:INFO:Model: Linear Regression
2025-05-03 22:40:56,264:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:40:56,371:INFO:Initializing predict_model()
2025-05-03 22:40:56,371:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636313C310>)
2025-05-03 22:40:56,371:INFO:Checking exceptions
2025-05-03 22:40:56,371:INFO:Preloading libraries
2025-05-03 22:40:56,466:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:40:56,852:INFO:Uploading results into container
2025-05-03 22:40:56,852:INFO:Uploading model into container now
2025-05-03 22:40:56,853:INFO:_master_model_container: 6
2025-05-03 22:40:56,853:INFO:_display_container: 3
2025-05-03 22:40:56,853:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:40:56,853:INFO:create_model() successfully completed......................................
2025-05-03 22:40:57,039:INFO:Initializing plot_model()
2025-05-03 22:40:57,039:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, system=True)
2025-05-03 22:40:57,039:INFO:Checking exceptions
2025-05-03 22:40:57,039:INFO:Preloading libraries
2025-05-03 22:40:57,039:INFO:Copying training dataset
2025-05-03 22:40:57,039:INFO:Plot type: feature
2025-05-03 22:40:57,138:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:40:57,303:INFO:Saving 'Feature Importance.png'
2025-05-03 22:40:57,407:INFO:Visual Rendered Successfully
2025-05-03 22:40:57,567:INFO:plot_model() successfully completed......................................
2025-05-03 22:40:57,657:INFO:Initializing create_model()
2025-05-03 22:40:57,657:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:57,657:INFO:Checking exceptions
2025-05-03 22:40:57,657:INFO:Importing libraries
2025-05-03 22:40:57,657:INFO:Copying training dataset
2025-05-03 22:40:57,663:INFO:Defining folds
2025-05-03 22:40:57,663:INFO:Declaring metric variables
2025-05-03 22:40:57,664:INFO:Importing untrained model
2025-05-03 22:40:57,664:INFO:Ridge Regression Imported successfully
2025-05-03 22:40:57,664:INFO:Starting cross validation
2025-05-03 22:40:57,664:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:57,796:INFO:Calculating mean and std
2025-05-03 22:40:57,796:INFO:Creating metrics dataframe
2025-05-03 22:40:57,796:INFO:Finalizing model
2025-05-03 22:40:57,848:INFO:Creating Dashboard logs
2025-05-03 22:40:57,848:INFO:Model: Ridge Regression
2025-05-03 22:40:57,868:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:40:57,973:INFO:Initializing predict_model()
2025-05-03 22:40:57,973:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636313C430>)
2025-05-03 22:40:57,973:INFO:Checking exceptions
2025-05-03 22:40:57,973:INFO:Preloading libraries
2025-05-03 22:40:58,065:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:40:58,421:INFO:Uploading results into container
2025-05-03 22:40:58,421:INFO:Uploading model into container now
2025-05-03 22:40:58,421:INFO:_master_model_container: 7
2025-05-03 22:40:58,421:INFO:_display_container: 4
2025-05-03 22:40:58,421:INFO:Ridge(random_state=4)
2025-05-03 22:40:58,421:INFO:create_model() successfully completed......................................
2025-05-03 22:40:58,615:INFO:Initializing plot_model()
2025-05-03 22:40:58,615:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, system=True)
2025-05-03 22:40:58,616:INFO:Checking exceptions
2025-05-03 22:40:58,617:INFO:Preloading libraries
2025-05-03 22:40:58,617:INFO:Copying training dataset
2025-05-03 22:40:58,617:INFO:Plot type: feature
2025-05-03 22:40:58,706:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:40:58,811:INFO:Saving 'Feature Importance.png'
2025-05-03 22:40:58,907:INFO:Visual Rendered Successfully
2025-05-03 22:40:59,060:INFO:plot_model() successfully completed......................................
2025-05-03 22:40:59,143:INFO:Initializing create_model()
2025-05-03 22:40:59,143:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:40:59,143:INFO:Checking exceptions
2025-05-03 22:40:59,143:INFO:Importing libraries
2025-05-03 22:40:59,143:INFO:Copying training dataset
2025-05-03 22:40:59,143:INFO:Defining folds
2025-05-03 22:40:59,149:INFO:Declaring metric variables
2025-05-03 22:40:59,150:INFO:Importing untrained model
2025-05-03 22:40:59,150:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:40:59,150:INFO:Starting cross validation
2025-05-03 22:40:59,150:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:40:59,580:INFO:Calculating mean and std
2025-05-03 22:40:59,580:INFO:Creating metrics dataframe
2025-05-03 22:40:59,580:INFO:Finalizing model
2025-05-03 22:40:59,655:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 22:40:59,657:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001744 seconds.
2025-05-03 22:40:59,657:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 22:40:59,658:INFO:[LightGBM] [Info] Total Bins 164
2025-05-03 22:40:59,658:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 6
2025-05-03 22:40:59,659:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 22:40:59,751:INFO:Creating Dashboard logs
2025-05-03 22:40:59,752:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:40:59,774:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:40:59,881:INFO:Initializing predict_model()
2025-05-03 22:40:59,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636313C5E0>)
2025-05-03 22:40:59,881:INFO:Checking exceptions
2025-05-03 22:40:59,881:INFO:Preloading libraries
2025-05-03 22:40:59,976:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:41:00,388:INFO:Uploading results into container
2025-05-03 22:41:00,388:INFO:Uploading model into container now
2025-05-03 22:41:00,388:INFO:_master_model_container: 8
2025-05-03 22:41:00,388:INFO:_display_container: 5
2025-05-03 22:41:00,388:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:41:00,388:INFO:create_model() successfully completed......................................
2025-05-03 22:41:00,620:INFO:Initializing plot_model()
2025-05-03 22:41:00,621:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, system=True)
2025-05-03 22:41:00,621:INFO:Checking exceptions
2025-05-03 22:41:00,625:INFO:Preloading libraries
2025-05-03 22:41:00,633:INFO:Copying training dataset
2025-05-03 22:41:00,633:INFO:Plot type: feature
2025-05-03 22:41:00,634:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:41:00,705:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:41:00,831:INFO:Saving 'Feature Importance.png'
2025-05-03 22:41:00,987:INFO:Visual Rendered Successfully
2025-05-03 22:41:01,164:INFO:plot_model() successfully completed......................................
2025-05-03 22:41:01,252:INFO:Initializing create_model()
2025-05-03 22:41:01,252:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:41:01,252:INFO:Checking exceptions
2025-05-03 22:41:01,253:INFO:Importing libraries
2025-05-03 22:41:01,253:INFO:Copying training dataset
2025-05-03 22:41:01,256:INFO:Defining folds
2025-05-03 22:41:01,256:INFO:Declaring metric variables
2025-05-03 22:41:01,256:INFO:Importing untrained model
2025-05-03 22:41:01,257:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:41:01,257:INFO:Starting cross validation
2025-05-03 22:41:01,258:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:41:01,727:INFO:Calculating mean and std
2025-05-03 22:41:01,727:INFO:Creating metrics dataframe
2025-05-03 22:41:01,727:INFO:Finalizing model
2025-05-03 22:41:01,942:INFO:Creating Dashboard logs
2025-05-03 22:41:01,943:INFO:Model: Random Forest Regressor
2025-05-03 22:41:01,961:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:41:02,060:INFO:Initializing predict_model()
2025-05-03 22:41:02,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362D4FF40>)
2025-05-03 22:41:02,060:INFO:Checking exceptions
2025-05-03 22:41:02,060:INFO:Preloading libraries
2025-05-03 22:41:02,177:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:41:02,601:INFO:Uploading results into container
2025-05-03 22:41:02,601:INFO:Uploading model into container now
2025-05-03 22:41:02,601:INFO:_master_model_container: 9
2025-05-03 22:41:02,601:INFO:_display_container: 6
2025-05-03 22:41:02,601:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:41:02,601:INFO:create_model() successfully completed......................................
2025-05-03 22:41:02,816:INFO:Initializing plot_model()
2025-05-03 22:41:02,816:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, system=True)
2025-05-03 22:41:02,816:INFO:Checking exceptions
2025-05-03 22:41:02,837:INFO:Preloading libraries
2025-05-03 22:41:02,865:INFO:Copying training dataset
2025-05-03 22:41:02,865:INFO:Plot type: feature
2025-05-03 22:41:02,865:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:41:02,934:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:41:03,032:INFO:Saving 'Feature Importance.png'
2025-05-03 22:41:03,132:INFO:Visual Rendered Successfully
2025-05-03 22:41:03,304:INFO:plot_model() successfully completed......................................
2025-05-03 22:41:03,390:INFO:Initializing create_model()
2025-05-03 22:41:03,390:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:41:03,390:INFO:Checking exceptions
2025-05-03 22:41:03,391:INFO:Importing libraries
2025-05-03 22:41:03,391:INFO:Copying training dataset
2025-05-03 22:41:03,394:INFO:Defining folds
2025-05-03 22:41:03,395:INFO:Declaring metric variables
2025-05-03 22:41:03,395:INFO:Importing untrained model
2025-05-03 22:41:03,395:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:41:03,395:INFO:Starting cross validation
2025-05-03 22:41:03,396:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:41:03,775:INFO:Calculating mean and std
2025-05-03 22:41:03,775:INFO:Creating metrics dataframe
2025-05-03 22:41:03,775:INFO:Finalizing model
2025-05-03 22:41:03,976:INFO:Creating Dashboard logs
2025-05-03 22:41:03,976:INFO:Model: Extra Trees Regressor
2025-05-03 22:41:03,997:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:41:04,108:INFO:Initializing predict_model()
2025-05-03 22:41:04,108:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362BCF0A0>)
2025-05-03 22:41:04,108:INFO:Checking exceptions
2025-05-03 22:41:04,108:INFO:Preloading libraries
2025-05-03 22:41:04,240:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:41:04,677:INFO:Uploading results into container
2025-05-03 22:41:04,678:INFO:Uploading model into container now
2025-05-03 22:41:04,679:INFO:_master_model_container: 10
2025-05-03 22:41:04,679:INFO:_display_container: 7
2025-05-03 22:41:04,679:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:41:04,679:INFO:create_model() successfully completed......................................
2025-05-03 22:41:04,886:INFO:Initializing plot_model()
2025-05-03 22:41:04,886:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD76A0>, system=True)
2025-05-03 22:41:04,886:INFO:Checking exceptions
2025-05-03 22:41:04,913:INFO:Preloading libraries
2025-05-03 22:41:04,957:INFO:Copying training dataset
2025-05-03 22:41:04,957:INFO:Plot type: feature
2025-05-03 22:41:04,957:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:41:05,037:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:41:05,136:INFO:Saving 'Feature Importance.png'
2025-05-03 22:41:05,226:INFO:Visual Rendered Successfully
2025-05-03 22:41:05,402:INFO:plot_model() successfully completed......................................
2025-05-03 22:42:27,274:INFO:PyCaret RegressionExperiment
2025-05-03 22:42:27,274:INFO:Logging name: automl_bigdata_exp
2025-05-03 22:42:27,274:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 22:42:27,274:INFO:version 3.3.2
2025-05-03 22:42:27,274:INFO:Initializing setup()
2025-05-03 22:42:27,274:INFO:self.USI: 63ec
2025-05-03 22:42:27,274:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 22:42:27,274:INFO:Checking environment
2025-05-03 22:42:27,274:INFO:python_version: 3.10.11
2025-05-03 22:42:27,274:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 22:42:27,274:INFO:machine: AMD64
2025-05-03 22:42:27,274:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 22:42:27,277:INFO:Memory: svmem(total=8403075072, available=287334400, percent=96.6, used=8115740672, free=287334400)
2025-05-03 22:42:27,278:INFO:Physical Core: 6
2025-05-03 22:42:27,278:INFO:Logical Core: 12
2025-05-03 22:42:27,278:INFO:Checking libraries
2025-05-03 22:42:27,278:INFO:System:
2025-05-03 22:42:27,278:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 22:42:27,278:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 22:42:27,278:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 22:42:27,278:INFO:PyCaret required dependencies:
2025-05-03 22:42:27,278:INFO:                 pip: 23.0.1
2025-05-03 22:42:27,278:INFO:          setuptools: 65.5.0
2025-05-03 22:42:27,278:INFO:             pycaret: 3.3.2
2025-05-03 22:42:27,278:INFO:             IPython: 8.36.0
2025-05-03 22:42:27,278:INFO:          ipywidgets: 8.1.6
2025-05-03 22:42:27,278:INFO:                tqdm: 4.67.1
2025-05-03 22:42:27,278:INFO:               numpy: 1.26.4
2025-05-03 22:42:27,278:INFO:              pandas: 1.5.3
2025-05-03 22:42:27,278:INFO:              jinja2: 3.1.6
2025-05-03 22:42:27,278:INFO:               scipy: 1.11.4
2025-05-03 22:42:27,278:INFO:              joblib: 1.3.2
2025-05-03 22:42:27,278:INFO:             sklearn: 1.4.2
2025-05-03 22:42:27,279:INFO:                pyod: 2.0.4
2025-05-03 22:42:27,279:INFO:            imblearn: 0.13.0
2025-05-03 22:42:27,279:INFO:   category_encoders: 2.7.0
2025-05-03 22:42:27,279:INFO:            lightgbm: 4.6.0
2025-05-03 22:42:27,279:INFO:               numba: 0.61.0
2025-05-03 22:42:27,279:INFO:            requests: 2.32.3
2025-05-03 22:42:27,279:INFO:          matplotlib: 3.7.5
2025-05-03 22:42:27,279:INFO:          scikitplot: 0.3.7
2025-05-03 22:42:27,279:INFO:         yellowbrick: 1.5
2025-05-03 22:42:27,279:INFO:              plotly: 5.24.1
2025-05-03 22:42:27,279:INFO:    plotly-resampler: Not installed
2025-05-03 22:42:27,279:INFO:             kaleido: 0.2.1
2025-05-03 22:42:27,279:INFO:           schemdraw: 0.15
2025-05-03 22:42:27,279:INFO:         statsmodels: 0.14.4
2025-05-03 22:42:27,279:INFO:              sktime: 0.26.0
2025-05-03 22:42:27,279:INFO:               tbats: 1.1.3
2025-05-03 22:42:27,279:INFO:            pmdarima: 2.0.4
2025-05-03 22:42:27,279:INFO:              psutil: 7.0.0
2025-05-03 22:42:27,279:INFO:          markupsafe: 3.0.2
2025-05-03 22:42:27,279:INFO:             pickle5: Not installed
2025-05-03 22:42:27,279:INFO:         cloudpickle: 2.2.1
2025-05-03 22:42:27,279:INFO:         deprecation: 2.1.0
2025-05-03 22:42:27,279:INFO:              xxhash: 3.5.0
2025-05-03 22:42:27,279:INFO:           wurlitzer: Not installed
2025-05-03 22:42:27,279:INFO:PyCaret optional dependencies:
2025-05-03 22:42:27,279:INFO:                shap: 0.47.2
2025-05-03 22:42:27,279:INFO:           interpret: Not installed
2025-05-03 22:42:27,279:INFO:                umap: Not installed
2025-05-03 22:42:27,280:INFO:     ydata_profiling: 4.16.1
2025-05-03 22:42:27,280:INFO:  explainerdashboard: Not installed
2025-05-03 22:42:27,280:INFO:             autoviz: Not installed
2025-05-03 22:42:27,280:INFO:           fairlearn: Not installed
2025-05-03 22:42:27,280:INFO:          deepchecks: Not installed
2025-05-03 22:42:27,280:INFO:             xgboost: Not installed
2025-05-03 22:42:27,280:INFO:            catboost: Not installed
2025-05-03 22:42:27,280:INFO:              kmodes: Not installed
2025-05-03 22:42:27,280:INFO:             mlxtend: Not installed
2025-05-03 22:42:27,280:INFO:       statsforecast: Not installed
2025-05-03 22:42:27,280:INFO:        tune_sklearn: Not installed
2025-05-03 22:42:27,280:INFO:                 ray: Not installed
2025-05-03 22:42:27,280:INFO:            hyperopt: Not installed
2025-05-03 22:42:27,280:INFO:              optuna: 4.3.0
2025-05-03 22:42:27,280:INFO:               skopt: Not installed
2025-05-03 22:42:27,280:INFO:              mlflow: 1.30.0
2025-05-03 22:42:27,280:INFO:              gradio: Not installed
2025-05-03 22:42:27,280:INFO:             fastapi: 0.115.12
2025-05-03 22:42:27,280:INFO:             uvicorn: 0.34.2
2025-05-03 22:42:27,280:INFO:              m2cgen: Not installed
2025-05-03 22:42:27,280:INFO:           evidently: 0.7.3
2025-05-03 22:42:27,280:INFO:               fugue: Not installed
2025-05-03 22:42:27,280:INFO:           streamlit: Not installed
2025-05-03 22:42:27,280:INFO:             prophet: Not installed
2025-05-03 22:42:27,281:INFO:None
2025-05-03 22:42:27,281:INFO:Set up data.
2025-05-03 22:42:27,285:INFO:Set up folding strategy.
2025-05-03 22:42:27,285:INFO:Set up train/test split.
2025-05-03 22:42:27,289:INFO:Set up index.
2025-05-03 22:42:27,289:INFO:Assigning column types.
2025-05-03 22:42:27,292:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 22:42:27,292:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,296:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,300:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,364:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,405:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,406:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,406:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,407:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,412:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,416:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,473:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,514:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,515:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,515:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,515:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 22:42:27,519:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,523:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,579:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,621:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,621:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,622:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,626:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,630:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,687:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,731:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,732:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,733:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 22:42:27,743:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,841:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,901:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:27,913:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-03 22:42:27,967:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,015:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,016:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,016:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,016:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 22:42:28,074:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,112:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,175:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,224:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,224:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,224:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 22:42:28,286:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,328:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,328:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,393:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-03 22:42:28,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,432:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 22:42:28,536:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:28,649:INFO:Preparing preprocessing pipeline...
2025-05-03 22:42:28,650:INFO:Set up simple imputation.
2025-05-03 22:42:28,653:INFO:Set up encoding of categorical features.
2025-05-03 22:42:28,653:INFO:Set up column name cleaning.
2025-05-03 22:42:28,792:INFO:Finished creating preprocessing pipeline.
2025-05-03 22:42:28,801:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:42:28,802:INFO:Creating final display dataframe.
2025-05-03 22:42:29,102:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                63ec
2025-05-03 22:42:29,223:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:29,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:29,328:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:29,328:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 22:42:29,328:INFO:Logging experiment in loggers
2025-05-03 22:42:29,411:INFO:SubProcess save_model() called ==================================
2025-05-03 22:42:29,425:INFO:Initializing save_model()
2025-05-03 22:42:29,425:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp9p94wv_k\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 22:42:29,425:INFO:Adding model into prep_pipe
2025-05-03 22:42:29,425:WARNING:Only Model saved as it was a pipeline.
2025-05-03 22:42:29,432:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp9p94wv_k\Transformation Pipeline.pkl saved in current working directory
2025-05-03 22:42:29,439:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 22:42:29,439:INFO:save_model() successfully completed......................................
2025-05-03 22:42:29,626:INFO:SubProcess save_model() end ==================================
2025-05-03 22:42:29,647:INFO:setup() successfully completed in 2.06s...............
2025-05-03 22:42:29,725:INFO:Initializing compare_models()
2025-05-03 22:42:29,725:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-03 22:42:29,725:INFO:Checking exceptions
2025-05-03 22:42:29,725:INFO:Preparing display monitor
2025-05-03 22:42:29,725:INFO:Initializing Linear Regression
2025-05-03 22:42:29,725:INFO:Total runtime is 0.0 minutes
2025-05-03 22:42:29,725:INFO:SubProcess create_model() called ==================================
2025-05-03 22:42:29,725:INFO:Initializing create_model()
2025-05-03 22:42:29,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D04880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:29,725:INFO:Checking exceptions
2025-05-03 22:42:29,725:INFO:Importing libraries
2025-05-03 22:42:29,725:INFO:Copying training dataset
2025-05-03 22:42:29,730:INFO:Defining folds
2025-05-03 22:42:29,730:INFO:Declaring metric variables
2025-05-03 22:42:29,730:INFO:Importing untrained model
2025-05-03 22:42:29,730:INFO:Linear Regression Imported successfully
2025-05-03 22:42:29,730:INFO:Starting cross validation
2025-05-03 22:42:29,730:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:29,883:INFO:Calculating mean and std
2025-05-03 22:42:29,883:INFO:Creating metrics dataframe
2025-05-03 22:42:29,883:INFO:Uploading results into container
2025-05-03 22:42:29,883:INFO:Uploading model into container now
2025-05-03 22:42:29,883:INFO:_master_model_container: 1
2025-05-03 22:42:29,883:INFO:_display_container: 2
2025-05-03 22:42:29,883:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:42:29,883:INFO:create_model() successfully completed......................................
2025-05-03 22:42:30,084:INFO:SubProcess create_model() end ==================================
2025-05-03 22:42:30,085:INFO:Creating metrics dataframe
2025-05-03 22:42:30,090:INFO:Initializing Ridge Regression
2025-05-03 22:42:30,090:INFO:Total runtime is 0.006082216898600261 minutes
2025-05-03 22:42:30,090:INFO:SubProcess create_model() called ==================================
2025-05-03 22:42:30,091:INFO:Initializing create_model()
2025-05-03 22:42:30,091:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D04880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:30,091:INFO:Checking exceptions
2025-05-03 22:42:30,091:INFO:Importing libraries
2025-05-03 22:42:30,091:INFO:Copying training dataset
2025-05-03 22:42:30,094:INFO:Defining folds
2025-05-03 22:42:30,095:INFO:Declaring metric variables
2025-05-03 22:42:30,095:INFO:Importing untrained model
2025-05-03 22:42:30,096:INFO:Ridge Regression Imported successfully
2025-05-03 22:42:30,096:INFO:Starting cross validation
2025-05-03 22:42:30,097:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:30,252:INFO:Calculating mean and std
2025-05-03 22:42:30,252:INFO:Creating metrics dataframe
2025-05-03 22:42:30,252:INFO:Uploading results into container
2025-05-03 22:42:30,252:INFO:Uploading model into container now
2025-05-03 22:42:30,252:INFO:_master_model_container: 2
2025-05-03 22:42:30,252:INFO:_display_container: 2
2025-05-03 22:42:30,252:INFO:Ridge(random_state=4)
2025-05-03 22:42:30,252:INFO:create_model() successfully completed......................................
2025-05-03 22:42:30,425:INFO:SubProcess create_model() end ==================================
2025-05-03 22:42:30,425:INFO:Creating metrics dataframe
2025-05-03 22:42:30,425:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 22:42:30,425:INFO:Total runtime is 0.011665078004201253 minutes
2025-05-03 22:42:30,425:INFO:SubProcess create_model() called ==================================
2025-05-03 22:42:30,425:INFO:Initializing create_model()
2025-05-03 22:42:30,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D04880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:30,425:INFO:Checking exceptions
2025-05-03 22:42:30,425:INFO:Importing libraries
2025-05-03 22:42:30,425:INFO:Copying training dataset
2025-05-03 22:42:30,432:INFO:Defining folds
2025-05-03 22:42:30,432:INFO:Declaring metric variables
2025-05-03 22:42:30,432:INFO:Importing untrained model
2025-05-03 22:42:30,432:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:42:30,432:INFO:Starting cross validation
2025-05-03 22:42:30,432:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:30,864:INFO:Calculating mean and std
2025-05-03 22:42:30,865:INFO:Creating metrics dataframe
2025-05-03 22:42:30,868:INFO:Uploading results into container
2025-05-03 22:42:30,869:INFO:Uploading model into container now
2025-05-03 22:42:30,869:INFO:_master_model_container: 3
2025-05-03 22:42:30,869:INFO:_display_container: 2
2025-05-03 22:42:30,870:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:30,870:INFO:create_model() successfully completed......................................
2025-05-03 22:42:31,037:INFO:SubProcess create_model() end ==================================
2025-05-03 22:42:31,037:INFO:Creating metrics dataframe
2025-05-03 22:42:31,041:INFO:Initializing Random Forest Regressor
2025-05-03 22:42:31,041:INFO:Total runtime is 0.02192839781443278 minutes
2025-05-03 22:42:31,041:INFO:SubProcess create_model() called ==================================
2025-05-03 22:42:31,041:INFO:Initializing create_model()
2025-05-03 22:42:31,041:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D04880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:31,041:INFO:Checking exceptions
2025-05-03 22:42:31,041:INFO:Importing libraries
2025-05-03 22:42:31,041:INFO:Copying training dataset
2025-05-03 22:42:31,045:INFO:Defining folds
2025-05-03 22:42:31,045:INFO:Declaring metric variables
2025-05-03 22:42:31,045:INFO:Importing untrained model
2025-05-03 22:42:31,045:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:42:31,045:INFO:Starting cross validation
2025-05-03 22:42:31,046:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:31,591:INFO:Calculating mean and std
2025-05-03 22:42:31,591:INFO:Creating metrics dataframe
2025-05-03 22:42:31,591:INFO:Uploading results into container
2025-05-03 22:42:31,591:INFO:Uploading model into container now
2025-05-03 22:42:31,591:INFO:_master_model_container: 4
2025-05-03 22:42:31,591:INFO:_display_container: 2
2025-05-03 22:42:31,591:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:31,591:INFO:create_model() successfully completed......................................
2025-05-03 22:42:31,744:INFO:SubProcess create_model() end ==================================
2025-05-03 22:42:31,744:INFO:Creating metrics dataframe
2025-05-03 22:42:31,752:INFO:Initializing Extra Trees Regressor
2025-05-03 22:42:31,752:INFO:Total runtime is 0.033784794807434085 minutes
2025-05-03 22:42:31,752:INFO:SubProcess create_model() called ==================================
2025-05-03 22:42:31,752:INFO:Initializing create_model()
2025-05-03 22:42:31,752:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D04880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:31,752:INFO:Checking exceptions
2025-05-03 22:42:31,752:INFO:Importing libraries
2025-05-03 22:42:31,752:INFO:Copying training dataset
2025-05-03 22:42:31,755:INFO:Defining folds
2025-05-03 22:42:31,755:INFO:Declaring metric variables
2025-05-03 22:42:31,755:INFO:Importing untrained model
2025-05-03 22:42:31,755:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:42:31,757:INFO:Starting cross validation
2025-05-03 22:42:31,757:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:32,213:INFO:Calculating mean and std
2025-05-03 22:42:32,213:INFO:Creating metrics dataframe
2025-05-03 22:42:32,215:INFO:Uploading results into container
2025-05-03 22:42:32,215:INFO:Uploading model into container now
2025-05-03 22:42:32,215:INFO:_master_model_container: 5
2025-05-03 22:42:32,215:INFO:_display_container: 2
2025-05-03 22:42:32,215:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:32,215:INFO:create_model() successfully completed......................................
2025-05-03 22:42:32,418:INFO:SubProcess create_model() end ==================================
2025-05-03 22:42:32,418:INFO:Creating metrics dataframe
2025-05-03 22:42:32,418:INFO:Initializing create_model()
2025-05-03 22:42:32,418:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:32,418:INFO:Checking exceptions
2025-05-03 22:42:32,424:INFO:Importing libraries
2025-05-03 22:42:32,425:INFO:Copying training dataset
2025-05-03 22:42:32,428:INFO:Defining folds
2025-05-03 22:42:32,428:INFO:Declaring metric variables
2025-05-03 22:42:32,428:INFO:Importing untrained model
2025-05-03 22:42:32,428:INFO:Declaring custom model
2025-05-03 22:42:32,429:INFO:Ridge Regression Imported successfully
2025-05-03 22:42:32,429:INFO:Cross validation set to False
2025-05-03 22:42:32,430:INFO:Fitting Model
2025-05-03 22:42:32,474:INFO:Ridge(random_state=4)
2025-05-03 22:42:32,474:INFO:create_model() successfully completed......................................
2025-05-03 22:42:32,647:INFO:Creating Dashboard logs
2025-05-03 22:42:32,647:INFO:Model: Ridge Regression
2025-05-03 22:42:32,668:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:42:32,751:INFO:Initializing predict_model()
2025-05-03 22:42:32,751:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363187B50>)
2025-05-03 22:42:32,751:INFO:Checking exceptions
2025-05-03 22:42:32,751:INFO:Preloading libraries
2025-05-03 22:42:32,848:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:33,237:INFO:Creating Dashboard logs
2025-05-03 22:42:33,237:INFO:Model: Linear Regression
2025-05-03 22:42:33,251:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:42:33,550:INFO:Creating Dashboard logs
2025-05-03 22:42:33,556:INFO:Model: Random Forest Regressor
2025-05-03 22:42:33,571:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:42:33,876:INFO:Creating Dashboard logs
2025-05-03 22:42:33,876:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:42:33,897:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:42:34,254:INFO:Creating Dashboard logs
2025-05-03 22:42:34,254:INFO:Model: Extra Trees Regressor
2025-05-03 22:42:34,281:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:42:34,747:INFO:_master_model_container: 5
2025-05-03 22:42:34,747:INFO:_display_container: 2
2025-05-03 22:42:34,748:INFO:Ridge(random_state=4)
2025-05-03 22:42:34,748:INFO:compare_models() successfully completed......................................
2025-05-03 22:42:34,819:INFO:Initializing create_model()
2025-05-03 22:42:34,819:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:34,820:INFO:Checking exceptions
2025-05-03 22:42:34,821:INFO:Importing libraries
2025-05-03 22:42:34,821:INFO:Copying training dataset
2025-05-03 22:42:34,825:INFO:Defining folds
2025-05-03 22:42:34,825:INFO:Declaring metric variables
2025-05-03 22:42:34,825:INFO:Importing untrained model
2025-05-03 22:42:34,825:INFO:Linear Regression Imported successfully
2025-05-03 22:42:34,825:INFO:Starting cross validation
2025-05-03 22:42:34,826:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:34,968:INFO:Calculating mean and std
2025-05-03 22:42:34,969:INFO:Creating metrics dataframe
2025-05-03 22:42:34,970:INFO:Finalizing model
2025-05-03 22:42:35,015:INFO:Creating Dashboard logs
2025-05-03 22:42:35,015:INFO:Model: Linear Regression
2025-05-03 22:42:35,036:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 22:42:35,140:INFO:Initializing predict_model()
2025-05-03 22:42:35,140:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263631863B0>)
2025-05-03 22:42:35,140:INFO:Checking exceptions
2025-05-03 22:42:35,140:INFO:Preloading libraries
2025-05-03 22:42:35,251:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:35,619:INFO:Uploading results into container
2025-05-03 22:42:35,619:INFO:Uploading model into container now
2025-05-03 22:42:35,619:INFO:_master_model_container: 6
2025-05-03 22:42:35,619:INFO:_display_container: 3
2025-05-03 22:42:35,619:INFO:LinearRegression(n_jobs=-1)
2025-05-03 22:42:35,619:INFO:create_model() successfully completed......................................
2025-05-03 22:42:35,807:INFO:Initializing plot_model()
2025-05-03 22:42:35,807:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, system=True)
2025-05-03 22:42:35,807:INFO:Checking exceptions
2025-05-03 22:42:35,807:INFO:Preloading libraries
2025-05-03 22:42:35,807:INFO:Copying training dataset
2025-05-03 22:42:35,807:INFO:Plot type: feature
2025-05-03 22:42:35,904:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:42:36,050:INFO:Saving 'Feature Importance.png'
2025-05-03 22:42:36,169:INFO:Visual Rendered Successfully
2025-05-03 22:42:36,314:INFO:plot_model() successfully completed......................................
2025-05-03 22:42:36,404:INFO:Initializing create_model()
2025-05-03 22:42:36,404:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:36,404:INFO:Checking exceptions
2025-05-03 22:42:36,404:INFO:Importing libraries
2025-05-03 22:42:36,404:INFO:Copying training dataset
2025-05-03 22:42:36,404:INFO:Defining folds
2025-05-03 22:42:36,404:INFO:Declaring metric variables
2025-05-03 22:42:36,404:INFO:Importing untrained model
2025-05-03 22:42:36,404:INFO:Ridge Regression Imported successfully
2025-05-03 22:42:36,404:INFO:Starting cross validation
2025-05-03 22:42:36,404:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:36,563:INFO:Calculating mean and std
2025-05-03 22:42:36,563:INFO:Creating metrics dataframe
2025-05-03 22:42:36,563:INFO:Finalizing model
2025-05-03 22:42:36,627:INFO:Creating Dashboard logs
2025-05-03 22:42:36,627:INFO:Model: Ridge Regression
2025-05-03 22:42:36,648:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 22:42:36,737:INFO:Initializing predict_model()
2025-05-03 22:42:36,737:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C8E5F0>)
2025-05-03 22:42:36,737:INFO:Checking exceptions
2025-05-03 22:42:36,737:INFO:Preloading libraries
2025-05-03 22:42:36,841:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:37,211:INFO:Uploading results into container
2025-05-03 22:42:37,211:INFO:Uploading model into container now
2025-05-03 22:42:37,211:INFO:_master_model_container: 7
2025-05-03 22:42:37,211:INFO:_display_container: 4
2025-05-03 22:42:37,211:INFO:Ridge(random_state=4)
2025-05-03 22:42:37,211:INFO:create_model() successfully completed......................................
2025-05-03 22:42:37,387:INFO:Initializing plot_model()
2025-05-03 22:42:37,387:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, system=True)
2025-05-03 22:42:37,387:INFO:Checking exceptions
2025-05-03 22:42:37,387:INFO:Preloading libraries
2025-05-03 22:42:37,387:INFO:Copying training dataset
2025-05-03 22:42:37,387:INFO:Plot type: feature
2025-05-03 22:42:37,488:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:42:37,591:INFO:Saving 'Feature Importance.png'
2025-05-03 22:42:37,685:INFO:Visual Rendered Successfully
2025-05-03 22:42:37,831:INFO:plot_model() successfully completed......................................
2025-05-03 22:42:37,923:INFO:Initializing create_model()
2025-05-03 22:42:37,923:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:37,923:INFO:Checking exceptions
2025-05-03 22:42:37,924:INFO:Importing libraries
2025-05-03 22:42:37,924:INFO:Copying training dataset
2025-05-03 22:42:37,928:INFO:Defining folds
2025-05-03 22:42:37,928:INFO:Declaring metric variables
2025-05-03 22:42:37,928:INFO:Importing untrained model
2025-05-03 22:42:37,929:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 22:42:37,929:INFO:Starting cross validation
2025-05-03 22:42:37,930:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:38,355:INFO:Calculating mean and std
2025-05-03 22:42:38,356:INFO:Creating metrics dataframe
2025-05-03 22:42:38,358:INFO:Finalizing model
2025-05-03 22:42:38,435:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 22:42:38,435:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000097 seconds.
2025-05-03 22:42:38,435:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-03 22:42:38,435:INFO:[LightGBM] [Info] Total Bins 419
2025-05-03 22:42:38,436:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-03 22:42:38,436:INFO:[LightGBM] [Info] Start training from score 89210.755117
2025-05-03 22:42:38,484:INFO:Creating Dashboard logs
2025-05-03 22:42:38,485:INFO:Model: Light Gradient Boosting Machine
2025-05-03 22:42:38,508:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 22:42:38,612:INFO:Initializing predict_model()
2025-05-03 22:42:38,612:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263630FB490>)
2025-05-03 22:42:38,612:INFO:Checking exceptions
2025-05-03 22:42:38,612:INFO:Preloading libraries
2025-05-03 22:42:38,716:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:39,126:INFO:Uploading results into container
2025-05-03 22:42:39,126:INFO:Uploading model into container now
2025-05-03 22:42:39,126:INFO:_master_model_container: 8
2025-05-03 22:42:39,126:INFO:_display_container: 5
2025-05-03 22:42:39,126:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:39,126:INFO:create_model() successfully completed......................................
2025-05-03 22:42:39,319:INFO:Initializing plot_model()
2025-05-03 22:42:39,319:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, system=True)
2025-05-03 22:42:39,319:INFO:Checking exceptions
2025-05-03 22:42:39,322:INFO:Preloading libraries
2025-05-03 22:42:39,326:INFO:Copying training dataset
2025-05-03 22:42:39,326:INFO:Plot type: feature
2025-05-03 22:42:39,327:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:42:39,389:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:42:39,496:INFO:Saving 'Feature Importance.png'
2025-05-03 22:42:39,589:INFO:Visual Rendered Successfully
2025-05-03 22:42:39,809:INFO:plot_model() successfully completed......................................
2025-05-03 22:42:39,916:INFO:Initializing create_model()
2025-05-03 22:42:39,916:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:39,916:INFO:Checking exceptions
2025-05-03 22:42:39,918:INFO:Importing libraries
2025-05-03 22:42:39,918:INFO:Copying training dataset
2025-05-03 22:42:39,924:INFO:Defining folds
2025-05-03 22:42:39,924:INFO:Declaring metric variables
2025-05-03 22:42:39,924:INFO:Importing untrained model
2025-05-03 22:42:39,925:INFO:Random Forest Regressor Imported successfully
2025-05-03 22:42:39,926:INFO:Starting cross validation
2025-05-03 22:42:39,927:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:40,564:INFO:Calculating mean and std
2025-05-03 22:42:40,565:INFO:Creating metrics dataframe
2025-05-03 22:42:40,567:INFO:Finalizing model
2025-05-03 22:42:40,772:INFO:Creating Dashboard logs
2025-05-03 22:42:40,772:INFO:Model: Random Forest Regressor
2025-05-03 22:42:40,821:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:42:40,923:INFO:Initializing predict_model()
2025-05-03 22:42:40,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362BCF130>)
2025-05-03 22:42:40,923:INFO:Checking exceptions
2025-05-03 22:42:40,923:INFO:Preloading libraries
2025-05-03 22:42:41,064:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:41,520:INFO:Uploading results into container
2025-05-03 22:42:41,520:INFO:Uploading model into container now
2025-05-03 22:42:41,521:INFO:_master_model_container: 9
2025-05-03 22:42:41,521:INFO:_display_container: 6
2025-05-03 22:42:41,521:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:41,521:INFO:create_model() successfully completed......................................
2025-05-03 22:42:41,721:INFO:Initializing plot_model()
2025-05-03 22:42:41,721:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, system=True)
2025-05-03 22:42:41,721:INFO:Checking exceptions
2025-05-03 22:42:41,755:INFO:Preloading libraries
2025-05-03 22:42:41,788:INFO:Copying training dataset
2025-05-03 22:42:41,788:INFO:Plot type: feature
2025-05-03 22:42:41,788:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:42:41,864:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:42:41,959:INFO:Saving 'Feature Importance.png'
2025-05-03 22:42:42,063:INFO:Visual Rendered Successfully
2025-05-03 22:42:42,215:INFO:plot_model() successfully completed......................................
2025-05-03 22:42:42,300:INFO:Initializing create_model()
2025-05-03 22:42:42,300:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 22:42:42,300:INFO:Checking exceptions
2025-05-03 22:42:42,300:INFO:Importing libraries
2025-05-03 22:42:42,300:INFO:Copying training dataset
2025-05-03 22:42:42,307:INFO:Defining folds
2025-05-03 22:42:42,307:INFO:Declaring metric variables
2025-05-03 22:42:42,307:INFO:Importing untrained model
2025-05-03 22:42:42,307:INFO:Extra Trees Regressor Imported successfully
2025-05-03 22:42:42,307:INFO:Starting cross validation
2025-05-03 22:42:42,307:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 22:42:42,745:INFO:Calculating mean and std
2025-05-03 22:42:42,745:INFO:Creating metrics dataframe
2025-05-03 22:42:42,745:INFO:Finalizing model
2025-05-03 22:42:42,897:INFO:Creating Dashboard logs
2025-05-03 22:42:42,897:INFO:Model: Extra Trees Regressor
2025-05-03 22:42:42,923:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 22:42:43,015:INFO:Initializing predict_model()
2025-05-03 22:42:43,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362D4C160>)
2025-05-03 22:42:43,015:INFO:Checking exceptions
2025-05-03 22:42:43,015:INFO:Preloading libraries
2025-05-03 22:42:43,205:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 22:42:43,668:INFO:Uploading results into container
2025-05-03 22:42:43,668:INFO:Uploading model into container now
2025-05-03 22:42:43,670:INFO:_master_model_container: 10
2025-05-03 22:42:43,670:INFO:_display_container: 7
2025-05-03 22:42:43,670:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-03 22:42:43,670:INFO:create_model() successfully completed......................................
2025-05-03 22:42:43,876:INFO:Initializing plot_model()
2025-05-03 22:42:43,876:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636308E170>, system=True)
2025-05-03 22:42:43,876:INFO:Checking exceptions
2025-05-03 22:42:43,897:INFO:Preloading libraries
2025-05-03 22:42:43,944:INFO:Copying training dataset
2025-05-03 22:42:43,944:INFO:Plot type: feature
2025-05-03 22:42:43,944:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 22:42:44,015:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 22:42:44,112:INFO:Saving 'Feature Importance.png'
2025-05-03 22:42:44,230:INFO:Visual Rendered Successfully
2025-05-03 22:42:44,383:INFO:plot_model() successfully completed......................................
2025-05-03 23:14:05,326:INFO:PyCaret RegressionExperiment
2025-05-03 23:14:05,326:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:14:05,326:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:14:05,326:INFO:version 3.3.2
2025-05-03 23:14:05,326:INFO:Initializing setup()
2025-05-03 23:14:05,326:INFO:self.USI: 0223
2025-05-03 23:14:05,326:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:14:05,326:INFO:Checking environment
2025-05-03 23:14:05,326:INFO:python_version: 3.10.11
2025-05-03 23:14:05,326:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:14:05,327:INFO:machine: AMD64
2025-05-03 23:14:05,327:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:14:05,334:INFO:Memory: svmem(total=8403075072, available=1151553536, percent=86.3, used=7251521536, free=1151553536)
2025-05-03 23:14:05,334:INFO:Physical Core: 6
2025-05-03 23:14:05,334:INFO:Logical Core: 12
2025-05-03 23:14:05,334:INFO:Checking libraries
2025-05-03 23:14:05,334:INFO:System:
2025-05-03 23:14:05,334:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:14:05,334:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:14:05,334:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:14:05,334:INFO:PyCaret required dependencies:
2025-05-03 23:14:05,334:INFO:                 pip: 23.0.1
2025-05-03 23:14:05,334:INFO:          setuptools: 65.5.0
2025-05-03 23:14:05,335:INFO:             pycaret: 3.3.2
2025-05-03 23:14:05,335:INFO:             IPython: 8.36.0
2025-05-03 23:14:05,335:INFO:          ipywidgets: 8.1.6
2025-05-03 23:14:05,335:INFO:                tqdm: 4.67.1
2025-05-03 23:14:05,335:INFO:               numpy: 1.26.4
2025-05-03 23:14:05,335:INFO:              pandas: 1.5.3
2025-05-03 23:14:05,335:INFO:              jinja2: 3.1.6
2025-05-03 23:14:05,335:INFO:               scipy: 1.11.4
2025-05-03 23:14:05,335:INFO:              joblib: 1.3.2
2025-05-03 23:14:05,335:INFO:             sklearn: 1.4.2
2025-05-03 23:14:05,335:INFO:                pyod: 2.0.4
2025-05-03 23:14:05,335:INFO:            imblearn: 0.13.0
2025-05-03 23:14:05,335:INFO:   category_encoders: 2.7.0
2025-05-03 23:14:05,335:INFO:            lightgbm: 4.6.0
2025-05-03 23:14:05,336:INFO:               numba: 0.61.0
2025-05-03 23:14:05,336:INFO:            requests: 2.32.3
2025-05-03 23:14:05,336:INFO:          matplotlib: 3.7.5
2025-05-03 23:14:05,336:INFO:          scikitplot: 0.3.7
2025-05-03 23:14:05,336:INFO:         yellowbrick: 1.5
2025-05-03 23:14:05,336:INFO:              plotly: 5.24.1
2025-05-03 23:14:05,336:INFO:    plotly-resampler: Not installed
2025-05-03 23:14:05,336:INFO:             kaleido: 0.2.1
2025-05-03 23:14:05,336:INFO:           schemdraw: 0.15
2025-05-03 23:14:05,336:INFO:         statsmodels: 0.14.4
2025-05-03 23:14:05,336:INFO:              sktime: 0.26.0
2025-05-03 23:14:05,336:INFO:               tbats: 1.1.3
2025-05-03 23:14:05,336:INFO:            pmdarima: 2.0.4
2025-05-03 23:14:05,336:INFO:              psutil: 7.0.0
2025-05-03 23:14:05,336:INFO:          markupsafe: 3.0.2
2025-05-03 23:14:05,336:INFO:             pickle5: Not installed
2025-05-03 23:14:05,336:INFO:         cloudpickle: 2.2.1
2025-05-03 23:14:05,337:INFO:         deprecation: 2.1.0
2025-05-03 23:14:05,337:INFO:              xxhash: 3.5.0
2025-05-03 23:14:05,337:INFO:           wurlitzer: Not installed
2025-05-03 23:14:05,337:INFO:PyCaret optional dependencies:
2025-05-03 23:14:05,337:INFO:                shap: 0.47.2
2025-05-03 23:14:05,337:INFO:           interpret: Not installed
2025-05-03 23:14:05,337:INFO:                umap: Not installed
2025-05-03 23:14:05,337:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:14:05,337:INFO:  explainerdashboard: Not installed
2025-05-03 23:14:05,337:INFO:             autoviz: Not installed
2025-05-03 23:14:05,337:INFO:           fairlearn: Not installed
2025-05-03 23:14:05,337:INFO:          deepchecks: Not installed
2025-05-03 23:14:05,337:INFO:             xgboost: Not installed
2025-05-03 23:14:05,337:INFO:            catboost: Not installed
2025-05-03 23:14:05,337:INFO:              kmodes: Not installed
2025-05-03 23:14:05,338:INFO:             mlxtend: Not installed
2025-05-03 23:14:05,338:INFO:       statsforecast: Not installed
2025-05-03 23:14:05,338:INFO:        tune_sklearn: Not installed
2025-05-03 23:14:05,338:INFO:                 ray: Not installed
2025-05-03 23:14:05,338:INFO:            hyperopt: Not installed
2025-05-03 23:14:05,338:INFO:              optuna: 4.3.0
2025-05-03 23:14:05,338:INFO:               skopt: Not installed
2025-05-03 23:14:05,338:INFO:              mlflow: 1.30.0
2025-05-03 23:14:05,338:INFO:              gradio: Not installed
2025-05-03 23:14:05,338:INFO:             fastapi: 0.115.12
2025-05-03 23:14:05,338:INFO:             uvicorn: 0.34.2
2025-05-03 23:14:05,338:INFO:              m2cgen: Not installed
2025-05-03 23:14:05,338:INFO:           evidently: 0.7.3
2025-05-03 23:14:05,338:INFO:               fugue: Not installed
2025-05-03 23:14:05,338:INFO:           streamlit: Not installed
2025-05-03 23:14:05,338:INFO:             prophet: Not installed
2025-05-03 23:14:05,338:INFO:None
2025-05-03 23:14:05,339:INFO:Set up data.
2025-05-03 23:14:05,351:INFO:Set up folding strategy.
2025-05-03 23:14:05,351:INFO:Set up train/test split.
2025-05-03 23:14:05,363:INFO:Set up index.
2025-05-03 23:14:05,364:INFO:Assigning column types.
2025-05-03 23:14:05,368:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:14:05,483:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,483:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,584:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,585:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:14:05,717:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,718:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,835:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,835:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,835:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:14:05,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:05,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,039:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:14:06,137:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,138:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,238:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,238:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:14:06,342:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,342:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,445:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,446:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,446:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:14:06,552:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:06,661:INFO:Preparing preprocessing pipeline...
2025-05-03 23:14:06,661:INFO:Set up simple imputation.
2025-05-03 23:14:06,661:INFO:Set up encoding of categorical features.
2025-05-03 23:14:06,668:INFO:Set up column name cleaning.
2025-05-03 23:14:06,752:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:14:06,759:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:14:06,759:INFO:Creating final display dataframe.
2025-05-03 23:14:06,953:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                0223
2025-05-03 23:14:07,056:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:07,057:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:07,154:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:07,154:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:07,154:INFO:Logging experiment in loggers
2025-05-03 23:14:07,241:INFO:SubProcess save_model() called ==================================
2025-05-03 23:14:07,252:INFO:Initializing save_model()
2025-05-03 23:14:07,252:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp7r17paj_\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:14:07,252:INFO:Adding model into prep_pipe
2025-05-03 23:14:07,252:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:14:07,258:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp7r17paj_\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:14:07,265:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:14:07,265:INFO:save_model() successfully completed......................................
2025-05-03 23:14:07,731:INFO:SubProcess save_model() end ==================================
2025-05-03 23:14:07,749:INFO:setup() successfully completed in 1.85s...............
2025-05-03 23:14:07,814:INFO:Initializing create_model()
2025-05-03 23:14:07,814:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:14:07,814:INFO:Checking exceptions
2025-05-03 23:14:07,814:INFO:Importing libraries
2025-05-03 23:14:07,814:INFO:Copying training dataset
2025-05-03 23:14:07,821:INFO:Defining folds
2025-05-03 23:14:07,821:INFO:Declaring metric variables
2025-05-03 23:14:07,821:INFO:Importing untrained model
2025-05-03 23:14:07,821:INFO:Ridge Regression Imported successfully
2025-05-03 23:14:07,821:INFO:Starting cross validation
2025-05-03 23:14:07,821:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:14:13,921:INFO:Calculating mean and std
2025-05-03 23:14:13,921:INFO:Creating metrics dataframe
2025-05-03 23:14:13,925:INFO:Finalizing model
2025-05-03 23:14:14,023:INFO:Creating Dashboard logs
2025-05-03 23:14:14,023:INFO:Model: Ridge Regression
2025-05-03 23:14:14,055:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:14:14,173:INFO:Initializing predict_model()
2025-05-03 23:14:14,173:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026365557490>)
2025-05-03 23:14:14,173:INFO:Checking exceptions
2025-05-03 23:14:14,173:INFO:Preloading libraries
2025-05-03 23:14:14,230:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:14:14,623:INFO:Uploading results into container
2025-05-03 23:14:14,624:INFO:Uploading model into container now
2025-05-03 23:14:14,624:INFO:_master_model_container: 11
2025-05-03 23:14:14,624:INFO:_display_container: 8
2025-05-03 23:14:14,624:INFO:Ridge(random_state=4)
2025-05-03 23:14:14,625:INFO:create_model() successfully completed......................................
2025-05-03 23:14:14,819:INFO:Initializing tune_model()
2025-05-03 23:14:14,819:INFO:tune_model(estimator=Ridge(random_state=4), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>)
2025-05-03 23:14:14,819:INFO:Checking exceptions
2025-05-03 23:14:14,819:INFO:Copying training dataset
2025-05-03 23:14:14,835:INFO:Checking base model
2025-05-03 23:14:14,835:INFO:Base model : Ridge Regression
2025-05-03 23:14:14,835:INFO:Declaring metric variables
2025-05-03 23:14:14,835:INFO:Defining Hyperparameters
2025-05-03 23:14:14,992:INFO:Tuning with n_jobs=-1
2025-05-03 23:14:14,992:INFO:Initializing RandomizedSearchCV
2025-05-03 23:14:21,557:INFO:best_params: {'actual_estimator__fit_intercept': False, 'actual_estimator__alpha': 9.61}
2025-05-03 23:14:21,557:INFO:Hyperparameter search completed
2025-05-03 23:14:21,557:INFO:SubProcess create_model() called ==================================
2025-05-03 23:14:21,557:INFO:Initializing create_model()
2025-05-03 23:14:21,557:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002635A0158D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': False, 'alpha': 9.61})
2025-05-03 23:14:21,557:INFO:Checking exceptions
2025-05-03 23:14:21,557:INFO:Importing libraries
2025-05-03 23:14:21,557:INFO:Copying training dataset
2025-05-03 23:14:21,557:INFO:Defining folds
2025-05-03 23:14:21,557:INFO:Declaring metric variables
2025-05-03 23:14:21,557:INFO:Importing untrained model
2025-05-03 23:14:21,557:INFO:Declaring custom model
2025-05-03 23:14:21,573:INFO:Ridge Regression Imported successfully
2025-05-03 23:14:21,573:INFO:Starting cross validation
2025-05-03 23:14:21,573:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:14:21,753:INFO:Calculating mean and std
2025-05-03 23:14:21,753:INFO:Creating metrics dataframe
2025-05-03 23:14:21,755:INFO:Finalizing model
2025-05-03 23:14:21,800:INFO:Uploading results into container
2025-05-03 23:14:21,801:INFO:Uploading model into container now
2025-05-03 23:14:21,801:INFO:_master_model_container: 12
2025-05-03 23:14:21,801:INFO:_display_container: 9
2025-05-03 23:14:21,801:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:14:21,801:INFO:create_model() successfully completed......................................
2025-05-03 23:14:21,955:INFO:SubProcess create_model() end ==================================
2025-05-03 23:14:21,955:INFO:choose_better activated
2025-05-03 23:14:21,955:INFO:SubProcess create_model() called ==================================
2025-05-03 23:14:21,956:INFO:Initializing create_model()
2025-05-03 23:14:21,956:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:14:21,956:INFO:Checking exceptions
2025-05-03 23:14:21,956:INFO:Importing libraries
2025-05-03 23:14:21,956:INFO:Copying training dataset
2025-05-03 23:14:21,960:INFO:Defining folds
2025-05-03 23:14:21,960:INFO:Declaring metric variables
2025-05-03 23:14:21,960:INFO:Importing untrained model
2025-05-03 23:14:21,960:INFO:Declaring custom model
2025-05-03 23:14:21,960:INFO:Ridge Regression Imported successfully
2025-05-03 23:14:21,960:INFO:Starting cross validation
2025-05-03 23:14:21,961:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:14:22,070:INFO:Calculating mean and std
2025-05-03 23:14:22,070:INFO:Creating metrics dataframe
2025-05-03 23:14:22,070:INFO:Finalizing model
2025-05-03 23:14:22,117:INFO:Uploading results into container
2025-05-03 23:14:22,117:INFO:Uploading model into container now
2025-05-03 23:14:22,117:INFO:_master_model_container: 13
2025-05-03 23:14:22,117:INFO:_display_container: 10
2025-05-03 23:14:22,118:INFO:Ridge(random_state=4)
2025-05-03 23:14:22,118:INFO:create_model() successfully completed......................................
2025-05-03 23:14:22,257:INFO:SubProcess create_model() end ==================================
2025-05-03 23:14:22,257:INFO:Ridge(random_state=4) result for RMSE is 9308.2603
2025-05-03 23:14:22,257:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) result for RMSE is 9303.2847
2025-05-03 23:14:22,257:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) is best model
2025-05-03 23:14:22,257:INFO:choose_better completed
2025-05-03 23:14:22,257:INFO:Creating Dashboard logs
2025-05-03 23:14:22,257:INFO:Model: Ridge Regression
2025-05-03 23:14:22,273:INFO:Logged params: {'alpha': 9.61, 'copy_X': True, 'fit_intercept': False, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:14:22,383:INFO:Initializing predict_model()
2025-05-03 23:14:22,383:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026365557D00>)
2025-05-03 23:14:22,383:INFO:Checking exceptions
2025-05-03 23:14:22,383:INFO:Preloading libraries
2025-05-03 23:14:22,444:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:14:22,820:INFO:_master_model_container: 13
2025-05-03 23:14:22,820:INFO:_display_container: 9
2025-05-03 23:14:22,820:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:14:22,820:INFO:tune_model() successfully completed......................................
2025-05-03 23:14:23,051:INFO:gpu_param set to False
2025-05-03 23:14:23,151:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:23,152:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:23,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:23,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:14:23,250:INFO:Initializing predict_model()
2025-05-03 23:14:23,250:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C8E560>)
2025-05-03 23:14:23,250:INFO:Checking exceptions
2025-05-03 23:14:23,250:INFO:Preloading libraries
2025-05-03 23:14:23,309:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:14:23,477:INFO:Initializing plot_model()
2025-05-03 23:14:23,477:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, system=True)
2025-05-03 23:14:23,477:INFO:Checking exceptions
2025-05-03 23:14:23,477:INFO:Preloading libraries
2025-05-03 23:14:23,477:INFO:Copying training dataset
2025-05-03 23:14:23,477:INFO:Plot type: feature
2025-05-03 23:14:23,540:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:14:23,694:INFO:Saving 'Feature Importance.png'
2025-05-03 23:14:23,809:INFO:Visual Rendered Successfully
2025-05-03 23:14:23,963:INFO:plot_model() successfully completed......................................
2025-05-03 23:14:23,983:INFO:Initializing plot_model()
2025-05-03 23:14:23,983:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, system=True)
2025-05-03 23:14:23,983:INFO:Checking exceptions
2025-05-03 23:14:23,984:INFO:Preloading libraries
2025-05-03 23:14:23,984:INFO:Copying training dataset
2025-05-03 23:14:23,984:INFO:Plot type: residuals
2025-05-03 23:14:24,079:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:14:24,283:INFO:Fitting Model
2025-05-03 23:14:24,298:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:14:24,335:INFO:Scoring test/hold-out set
2025-05-03 23:14:24,382:INFO:Saving 'Residuals.png'
2025-05-03 23:14:25,039:INFO:Visual Rendered Successfully
2025-05-03 23:14:25,210:INFO:plot_model() successfully completed......................................
2025-05-03 23:14:25,226:INFO:Initializing plot_model()
2025-05-03 23:14:25,226:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, system=True)
2025-05-03 23:14:25,226:INFO:Checking exceptions
2025-05-03 23:14:25,226:INFO:Preloading libraries
2025-05-03 23:14:25,226:INFO:Copying training dataset
2025-05-03 23:14:25,226:INFO:Plot type: error
2025-05-03 23:14:25,315:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:14:25,394:INFO:Fitting Model
2025-05-03 23:14:25,394:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:14:25,394:INFO:Scoring test/hold-out set
2025-05-03 23:14:25,432:INFO:Saving 'Prediction Error.png'
2025-05-03 23:14:25,632:INFO:Visual Rendered Successfully
2025-05-03 23:14:25,795:INFO:plot_model() successfully completed......................................
2025-05-03 23:14:25,803:INFO:Initializing plot_model()
2025-05-03 23:14:25,803:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A10CD0>, system=True)
2025-05-03 23:14:25,819:INFO:Checking exceptions
2025-05-03 23:14:25,819:INFO:Preloading libraries
2025-05-03 23:14:25,819:INFO:Copying training dataset
2025-05-03 23:14:25,819:INFO:Plot type: cooks
2025-05-03 23:14:25,900:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:14:25,976:INFO:Fitting Model
2025-05-03 23:14:26,083:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:14:26,290:INFO:Visual Rendered Successfully
2025-05-03 23:14:26,517:INFO:plot_model() successfully completed......................................
2025-05-03 23:14:26,555:INFO:Initializing save_model()
2025-05-03 23:14:26,555:INFO:save_model(model=Ridge(alpha=9.61, fit_intercept=False, random_state=4), model_name=./automl_outputs\automl_4\models\tuned_ridge_20250503_231426_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:14:26,555:INFO:Adding model into prep_pipe
2025-05-03 23:14:26,560:INFO:./automl_outputs\automl_4\models\tuned_ridge_20250503_231426_4.pkl saved in current working directory
2025-05-03 23:14:26,569:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 Ridge(alpha=9.61, fit_intercept=False, random_state=4))])
2025-05-03 23:14:26,569:INFO:save_model() successfully completed......................................
2025-05-03 23:33:10,693:INFO:PyCaret RegressionExperiment
2025-05-03 23:33:10,693:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:33:10,693:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:33:10,693:INFO:version 3.3.2
2025-05-03 23:33:10,693:INFO:Initializing setup()
2025-05-03 23:33:10,693:INFO:self.USI: f82f
2025-05-03 23:33:10,693:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:33:10,693:INFO:Checking environment
2025-05-03 23:33:10,693:INFO:python_version: 3.10.11
2025-05-03 23:33:10,693:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:33:10,693:INFO:machine: AMD64
2025-05-03 23:33:10,693:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:33:10,699:INFO:Memory: svmem(total=8403075072, available=743804928, percent=91.1, used=7659270144, free=743804928)
2025-05-03 23:33:10,700:INFO:Physical Core: 6
2025-05-03 23:33:10,700:INFO:Logical Core: 12
2025-05-03 23:33:10,700:INFO:Checking libraries
2025-05-03 23:33:10,700:INFO:System:
2025-05-03 23:33:10,700:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:33:10,700:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:33:10,700:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:33:10,700:INFO:PyCaret required dependencies:
2025-05-03 23:33:10,700:INFO:                 pip: 23.0.1
2025-05-03 23:33:10,700:INFO:          setuptools: 65.5.0
2025-05-03 23:33:10,700:INFO:             pycaret: 3.3.2
2025-05-03 23:33:10,700:INFO:             IPython: 8.36.0
2025-05-03 23:33:10,700:INFO:          ipywidgets: 8.1.6
2025-05-03 23:33:10,700:INFO:                tqdm: 4.67.1
2025-05-03 23:33:10,700:INFO:               numpy: 1.26.4
2025-05-03 23:33:10,700:INFO:              pandas: 1.5.3
2025-05-03 23:33:10,700:INFO:              jinja2: 3.1.6
2025-05-03 23:33:10,700:INFO:               scipy: 1.11.4
2025-05-03 23:33:10,700:INFO:              joblib: 1.3.2
2025-05-03 23:33:10,700:INFO:             sklearn: 1.4.2
2025-05-03 23:33:10,700:INFO:                pyod: 2.0.4
2025-05-03 23:33:10,700:INFO:            imblearn: 0.13.0
2025-05-03 23:33:10,700:INFO:   category_encoders: 2.7.0
2025-05-03 23:33:10,700:INFO:            lightgbm: 4.6.0
2025-05-03 23:33:10,700:INFO:               numba: 0.61.0
2025-05-03 23:33:10,700:INFO:            requests: 2.32.3
2025-05-03 23:33:10,700:INFO:          matplotlib: 3.7.5
2025-05-03 23:33:10,700:INFO:          scikitplot: 0.3.7
2025-05-03 23:33:10,700:INFO:         yellowbrick: 1.5
2025-05-03 23:33:10,700:INFO:              plotly: 5.24.1
2025-05-03 23:33:10,700:INFO:    plotly-resampler: Not installed
2025-05-03 23:33:10,700:INFO:             kaleido: 0.2.1
2025-05-03 23:33:10,700:INFO:           schemdraw: 0.15
2025-05-03 23:33:10,700:INFO:         statsmodels: 0.14.4
2025-05-03 23:33:10,700:INFO:              sktime: 0.26.0
2025-05-03 23:33:10,700:INFO:               tbats: 1.1.3
2025-05-03 23:33:10,700:INFO:            pmdarima: 2.0.4
2025-05-03 23:33:10,700:INFO:              psutil: 7.0.0
2025-05-03 23:33:10,700:INFO:          markupsafe: 3.0.2
2025-05-03 23:33:10,700:INFO:             pickle5: Not installed
2025-05-03 23:33:10,700:INFO:         cloudpickle: 2.2.1
2025-05-03 23:33:10,700:INFO:         deprecation: 2.1.0
2025-05-03 23:33:10,700:INFO:              xxhash: 3.5.0
2025-05-03 23:33:10,700:INFO:           wurlitzer: Not installed
2025-05-03 23:33:10,700:INFO:PyCaret optional dependencies:
2025-05-03 23:33:10,700:INFO:                shap: 0.47.2
2025-05-03 23:33:10,700:INFO:           interpret: Not installed
2025-05-03 23:33:10,700:INFO:                umap: Not installed
2025-05-03 23:33:10,700:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:33:10,700:INFO:  explainerdashboard: Not installed
2025-05-03 23:33:10,700:INFO:             autoviz: Not installed
2025-05-03 23:33:10,700:INFO:           fairlearn: Not installed
2025-05-03 23:33:10,700:INFO:          deepchecks: Not installed
2025-05-03 23:33:10,700:INFO:             xgboost: Not installed
2025-05-03 23:33:10,700:INFO:            catboost: Not installed
2025-05-03 23:33:10,700:INFO:              kmodes: Not installed
2025-05-03 23:33:10,700:INFO:             mlxtend: Not installed
2025-05-03 23:33:10,700:INFO:       statsforecast: Not installed
2025-05-03 23:33:10,700:INFO:        tune_sklearn: Not installed
2025-05-03 23:33:10,700:INFO:                 ray: Not installed
2025-05-03 23:33:10,700:INFO:            hyperopt: Not installed
2025-05-03 23:33:10,700:INFO:              optuna: 4.3.0
2025-05-03 23:33:10,700:INFO:               skopt: Not installed
2025-05-03 23:33:10,700:INFO:              mlflow: 1.30.0
2025-05-03 23:33:10,700:INFO:              gradio: Not installed
2025-05-03 23:33:10,700:INFO:             fastapi: 0.115.12
2025-05-03 23:33:10,700:INFO:             uvicorn: 0.34.2
2025-05-03 23:33:10,700:INFO:              m2cgen: Not installed
2025-05-03 23:33:10,700:INFO:           evidently: 0.7.3
2025-05-03 23:33:10,700:INFO:               fugue: Not installed
2025-05-03 23:33:10,700:INFO:           streamlit: Not installed
2025-05-03 23:33:10,700:INFO:             prophet: Not installed
2025-05-03 23:33:10,700:INFO:None
2025-05-03 23:33:10,700:INFO:Set up data.
2025-05-03 23:33:10,707:INFO:Set up folding strategy.
2025-05-03 23:33:10,707:INFO:Set up train/test split.
2025-05-03 23:33:10,714:INFO:Set up index.
2025-05-03 23:33:10,714:INFO:Assigning column types.
2025-05-03 23:33:10,721:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:33:10,824:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:10,824:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:10,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:10,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:10,928:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:33:11,032:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,164:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,171:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,171:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:33:11,268:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,268:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,365:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:33:11,473:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,473:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,574:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,574:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,574:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:33:11,685:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,685:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,782:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,782:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,782:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:33:11,886:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,886:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,991:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:11,991:INFO:Preparing preprocessing pipeline...
2025-05-03 23:33:11,991:INFO:Set up simple imputation.
2025-05-03 23:33:11,991:INFO:Set up encoding of categorical features.
2025-05-03 23:33:11,997:INFO:Set up column name cleaning.
2025-05-03 23:33:12,095:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:33:12,103:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:33:12,103:INFO:Creating final display dataframe.
2025-05-03 23:33:12,292:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                f82f
2025-05-03 23:33:12,390:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:12,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:12,495:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:12,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:12,496:INFO:Logging experiment in loggers
2025-05-03 23:33:12,572:INFO:SubProcess save_model() called ==================================
2025-05-03 23:33:12,587:INFO:Initializing save_model()
2025-05-03 23:33:12,587:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpd2k2svxo\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:33:12,587:INFO:Adding model into prep_pipe
2025-05-03 23:33:12,587:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:33:12,592:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpd2k2svxo\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:33:12,599:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:33:12,599:INFO:save_model() successfully completed......................................
2025-05-03 23:33:12,936:INFO:SubProcess save_model() end ==================================
2025-05-03 23:33:12,954:INFO:setup() successfully completed in 1.82s...............
2025-05-03 23:33:13,014:INFO:Initializing create_model()
2025-05-03 23:33:13,014:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:33:13,014:INFO:Checking exceptions
2025-05-03 23:33:13,015:INFO:Importing libraries
2025-05-03 23:33:13,016:INFO:Copying training dataset
2025-05-03 23:33:13,021:INFO:Defining folds
2025-05-03 23:33:13,021:INFO:Declaring metric variables
2025-05-03 23:33:13,021:INFO:Importing untrained model
2025-05-03 23:33:13,022:INFO:Ridge Regression Imported successfully
2025-05-03 23:33:13,022:INFO:Starting cross validation
2025-05-03 23:33:13,023:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:33:18,818:INFO:Calculating mean and std
2025-05-03 23:33:18,818:INFO:Creating metrics dataframe
2025-05-03 23:33:18,818:INFO:Finalizing model
2025-05-03 23:33:18,921:INFO:Creating Dashboard logs
2025-05-03 23:33:18,921:INFO:Model: Ridge Regression
2025-05-03 23:33:18,954:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:33:19,076:INFO:Initializing predict_model()
2025-05-03 23:33:19,076:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C8E950>)
2025-05-03 23:33:19,076:INFO:Checking exceptions
2025-05-03 23:33:19,076:INFO:Preloading libraries
2025-05-03 23:33:19,127:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:33:19,580:INFO:Uploading results into container
2025-05-03 23:33:19,582:INFO:Uploading model into container now
2025-05-03 23:33:19,582:INFO:_master_model_container: 11
2025-05-03 23:33:19,582:INFO:_display_container: 8
2025-05-03 23:33:19,582:INFO:Ridge(random_state=4)
2025-05-03 23:33:19,582:INFO:create_model() successfully completed......................................
2025-05-03 23:33:19,774:INFO:Initializing tune_model()
2025-05-03 23:33:19,774:INFO:tune_model(estimator=Ridge(random_state=4), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>)
2025-05-03 23:33:19,774:INFO:Checking exceptions
2025-05-03 23:33:19,777:INFO:Copying training dataset
2025-05-03 23:33:19,779:INFO:Checking base model
2025-05-03 23:33:19,779:INFO:Base model : Ridge Regression
2025-05-03 23:33:19,779:INFO:Declaring metric variables
2025-05-03 23:33:19,779:INFO:Defining Hyperparameters
2025-05-03 23:33:19,937:INFO:Tuning with n_jobs=-1
2025-05-03 23:33:19,937:INFO:Initializing RandomizedSearchCV
2025-05-03 23:33:25,934:INFO:best_params: {'actual_estimator__fit_intercept': False, 'actual_estimator__alpha': 9.61}
2025-05-03 23:33:25,934:INFO:Hyperparameter search completed
2025-05-03 23:33:25,934:INFO:SubProcess create_model() called ==================================
2025-05-03 23:33:25,934:INFO:Initializing create_model()
2025-05-03 23:33:25,934:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026359A8F4C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': False, 'alpha': 9.61})
2025-05-03 23:33:25,934:INFO:Checking exceptions
2025-05-03 23:33:25,934:INFO:Importing libraries
2025-05-03 23:33:25,934:INFO:Copying training dataset
2025-05-03 23:33:25,944:INFO:Defining folds
2025-05-03 23:33:25,944:INFO:Declaring metric variables
2025-05-03 23:33:25,944:INFO:Importing untrained model
2025-05-03 23:33:25,944:INFO:Declaring custom model
2025-05-03 23:33:25,944:INFO:Ridge Regression Imported successfully
2025-05-03 23:33:25,944:INFO:Starting cross validation
2025-05-03 23:33:25,944:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:33:26,202:INFO:Calculating mean and std
2025-05-03 23:33:26,202:INFO:Creating metrics dataframe
2025-05-03 23:33:26,202:INFO:Finalizing model
2025-05-03 23:33:26,256:INFO:Uploading results into container
2025-05-03 23:33:26,256:INFO:Uploading model into container now
2025-05-03 23:33:26,256:INFO:_master_model_container: 12
2025-05-03 23:33:26,256:INFO:_display_container: 9
2025-05-03 23:33:26,256:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:33:26,256:INFO:create_model() successfully completed......................................
2025-05-03 23:33:26,432:INFO:SubProcess create_model() end ==================================
2025-05-03 23:33:26,432:INFO:choose_better activated
2025-05-03 23:33:26,432:INFO:SubProcess create_model() called ==================================
2025-05-03 23:33:26,433:INFO:Initializing create_model()
2025-05-03 23:33:26,433:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:33:26,433:INFO:Checking exceptions
2025-05-03 23:33:26,434:INFO:Importing libraries
2025-05-03 23:33:26,434:INFO:Copying training dataset
2025-05-03 23:33:26,438:INFO:Defining folds
2025-05-03 23:33:26,438:INFO:Declaring metric variables
2025-05-03 23:33:26,438:INFO:Importing untrained model
2025-05-03 23:33:26,438:INFO:Declaring custom model
2025-05-03 23:33:26,439:INFO:Ridge Regression Imported successfully
2025-05-03 23:33:26,439:INFO:Starting cross validation
2025-05-03 23:33:26,440:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:33:26,579:INFO:Calculating mean and std
2025-05-03 23:33:26,580:INFO:Creating metrics dataframe
2025-05-03 23:33:26,581:INFO:Finalizing model
2025-05-03 23:33:26,653:INFO:Uploading results into container
2025-05-03 23:33:26,654:INFO:Uploading model into container now
2025-05-03 23:33:26,654:INFO:_master_model_container: 13
2025-05-03 23:33:26,654:INFO:_display_container: 10
2025-05-03 23:33:26,654:INFO:Ridge(random_state=4)
2025-05-03 23:33:26,654:INFO:create_model() successfully completed......................................
2025-05-03 23:33:26,882:INFO:SubProcess create_model() end ==================================
2025-05-03 23:33:26,883:INFO:Ridge(random_state=4) result for RMSE is 9308.2603
2025-05-03 23:33:26,884:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) result for RMSE is 9303.2847
2025-05-03 23:33:26,884:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) is best model
2025-05-03 23:33:26,884:INFO:choose_better completed
2025-05-03 23:33:26,884:INFO:Creating Dashboard logs
2025-05-03 23:33:26,884:INFO:Model: Ridge Regression
2025-05-03 23:33:26,914:INFO:Logged params: {'alpha': 9.61, 'copy_X': True, 'fit_intercept': False, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:33:27,036:INFO:Initializing predict_model()
2025-05-03 23:33:27,037:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C30700>)
2025-05-03 23:33:27,037:INFO:Checking exceptions
2025-05-03 23:33:27,037:INFO:Preloading libraries
2025-05-03 23:33:27,100:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:33:27,462:INFO:_master_model_container: 13
2025-05-03 23:33:27,462:INFO:_display_container: 9
2025-05-03 23:33:27,462:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:33:27,462:INFO:tune_model() successfully completed......................................
2025-05-03 23:33:27,670:INFO:gpu_param set to False
2025-05-03 23:33:27,771:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:27,771:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:27,863:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:27,863:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:33:27,863:INFO:Initializing predict_model()
2025-05-03 23:33:27,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C8E950>)
2025-05-03 23:33:27,863:INFO:Checking exceptions
2025-05-03 23:33:27,863:INFO:Preloading libraries
2025-05-03 23:33:27,926:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:33:28,099:INFO:Initializing plot_model()
2025-05-03 23:33:28,099:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, system=True)
2025-05-03 23:33:28,099:INFO:Checking exceptions
2025-05-03 23:33:28,099:INFO:Preloading libraries
2025-05-03 23:33:28,099:INFO:Copying training dataset
2025-05-03 23:33:28,099:INFO:Plot type: feature
2025-05-03 23:33:28,159:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:33:28,379:INFO:Saving 'Feature Importance.png'
2025-05-03 23:33:28,506:INFO:Visual Rendered Successfully
2025-05-03 23:33:28,663:INFO:plot_model() successfully completed......................................
2025-05-03 23:33:28,706:INFO:Initializing plot_model()
2025-05-03 23:33:28,706:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, system=True)
2025-05-03 23:33:28,706:INFO:Checking exceptions
2025-05-03 23:33:28,707:INFO:Preloading libraries
2025-05-03 23:33:28,708:INFO:Copying training dataset
2025-05-03 23:33:28,708:INFO:Plot type: residuals
2025-05-03 23:33:28,709:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:33:28,897:INFO:Fitting Model
2025-05-03 23:33:28,897:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:33:28,948:INFO:Scoring test/hold-out set
2025-05-03 23:33:28,974:INFO:Saving 'Residuals.png'
2025-05-03 23:33:29,305:INFO:Visual Rendered Successfully
2025-05-03 23:33:29,473:INFO:plot_model() successfully completed......................................
2025-05-03 23:33:29,494:INFO:Initializing plot_model()
2025-05-03 23:33:29,495:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, system=True)
2025-05-03 23:33:29,495:INFO:Checking exceptions
2025-05-03 23:33:29,497:INFO:Preloading libraries
2025-05-03 23:33:29,497:INFO:Copying training dataset
2025-05-03 23:33:29,497:INFO:Plot type: error
2025-05-03 23:33:29,583:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:33:29,665:INFO:Fitting Model
2025-05-03 23:33:29,665:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:33:29,665:INFO:Scoring test/hold-out set
2025-05-03 23:33:29,701:INFO:Saving 'Prediction Error.png'
2025-05-03 23:33:29,886:INFO:Visual Rendered Successfully
2025-05-03 23:33:30,074:INFO:plot_model() successfully completed......................................
2025-05-03 23:33:30,097:INFO:Initializing plot_model()
2025-05-03 23:33:30,097:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD5AE0>, system=True)
2025-05-03 23:33:30,097:INFO:Checking exceptions
2025-05-03 23:33:30,099:INFO:Preloading libraries
2025-05-03 23:33:30,099:INFO:Copying training dataset
2025-05-03 23:33:30,099:INFO:Plot type: cooks
2025-05-03 23:33:30,194:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:33:30,278:INFO:Fitting Model
2025-05-03 23:33:30,356:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:33:30,519:INFO:Visual Rendered Successfully
2025-05-03 23:33:30,697:INFO:plot_model() successfully completed......................................
2025-05-03 23:33:30,756:INFO:Initializing save_model()
2025-05-03 23:33:30,756:INFO:save_model(model=Ridge(alpha=9.61, fit_intercept=False, random_state=4), model_name=./automl_outputs\automl_4\models\tuned_ridge_20250503_233330_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:33:30,756:INFO:Adding model into prep_pipe
2025-05-03 23:33:30,763:INFO:./automl_outputs\automl_4\models\tuned_ridge_20250503_233330_4.pkl saved in current working directory
2025-05-03 23:33:30,774:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 Ridge(alpha=9.61, fit_intercept=False, random_state=4))])
2025-05-03 23:33:30,774:INFO:save_model() successfully completed......................................
2025-05-03 23:50:08,382:INFO:PyCaret RegressionExperiment
2025-05-03 23:50:08,382:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:50:08,382:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:50:08,382:INFO:version 3.3.2
2025-05-03 23:50:08,382:INFO:Initializing setup()
2025-05-03 23:50:08,382:INFO:self.USI: 0691
2025-05-03 23:50:08,382:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:50:08,382:INFO:Checking environment
2025-05-03 23:50:08,382:INFO:python_version: 3.10.11
2025-05-03 23:50:08,382:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:50:08,382:INFO:machine: AMD64
2025-05-03 23:50:08,382:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:50:08,388:INFO:Memory: svmem(total=8403075072, available=1497358336, percent=82.2, used=6905716736, free=1497358336)
2025-05-03 23:50:08,388:INFO:Physical Core: 6
2025-05-03 23:50:08,388:INFO:Logical Core: 12
2025-05-03 23:50:08,388:INFO:Checking libraries
2025-05-03 23:50:08,388:INFO:System:
2025-05-03 23:50:08,388:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:50:08,388:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:50:08,389:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:50:08,389:INFO:PyCaret required dependencies:
2025-05-03 23:50:08,389:INFO:                 pip: 23.0.1
2025-05-03 23:50:08,389:INFO:          setuptools: 65.5.0
2025-05-03 23:50:08,389:INFO:             pycaret: 3.3.2
2025-05-03 23:50:08,389:INFO:             IPython: 8.36.0
2025-05-03 23:50:08,389:INFO:          ipywidgets: 8.1.6
2025-05-03 23:50:08,389:INFO:                tqdm: 4.67.1
2025-05-03 23:50:08,389:INFO:               numpy: 1.26.4
2025-05-03 23:50:08,389:INFO:              pandas: 1.5.3
2025-05-03 23:50:08,389:INFO:              jinja2: 3.1.6
2025-05-03 23:50:08,389:INFO:               scipy: 1.11.4
2025-05-03 23:50:08,389:INFO:              joblib: 1.3.2
2025-05-03 23:50:08,389:INFO:             sklearn: 1.4.2
2025-05-03 23:50:08,389:INFO:                pyod: 2.0.4
2025-05-03 23:50:08,389:INFO:            imblearn: 0.13.0
2025-05-03 23:50:08,389:INFO:   category_encoders: 2.7.0
2025-05-03 23:50:08,389:INFO:            lightgbm: 4.6.0
2025-05-03 23:50:08,389:INFO:               numba: 0.61.0
2025-05-03 23:50:08,389:INFO:            requests: 2.32.3
2025-05-03 23:50:08,389:INFO:          matplotlib: 3.7.5
2025-05-03 23:50:08,389:INFO:          scikitplot: 0.3.7
2025-05-03 23:50:08,389:INFO:         yellowbrick: 1.5
2025-05-03 23:50:08,389:INFO:              plotly: 5.24.1
2025-05-03 23:50:08,389:INFO:    plotly-resampler: Not installed
2025-05-03 23:50:08,389:INFO:             kaleido: 0.2.1
2025-05-03 23:50:08,389:INFO:           schemdraw: 0.15
2025-05-03 23:50:08,389:INFO:         statsmodels: 0.14.4
2025-05-03 23:50:08,390:INFO:              sktime: 0.26.0
2025-05-03 23:50:08,390:INFO:               tbats: 1.1.3
2025-05-03 23:50:08,390:INFO:            pmdarima: 2.0.4
2025-05-03 23:50:08,390:INFO:              psutil: 7.0.0
2025-05-03 23:50:08,390:INFO:          markupsafe: 3.0.2
2025-05-03 23:50:08,390:INFO:             pickle5: Not installed
2025-05-03 23:50:08,390:INFO:         cloudpickle: 2.2.1
2025-05-03 23:50:08,390:INFO:         deprecation: 2.1.0
2025-05-03 23:50:08,390:INFO:              xxhash: 3.5.0
2025-05-03 23:50:08,390:INFO:           wurlitzer: Not installed
2025-05-03 23:50:08,390:INFO:PyCaret optional dependencies:
2025-05-03 23:50:08,390:INFO:                shap: 0.47.2
2025-05-03 23:50:08,390:INFO:           interpret: Not installed
2025-05-03 23:50:08,390:INFO:                umap: Not installed
2025-05-03 23:50:08,390:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:50:08,390:INFO:  explainerdashboard: Not installed
2025-05-03 23:50:08,390:INFO:             autoviz: Not installed
2025-05-03 23:50:08,390:INFO:           fairlearn: Not installed
2025-05-03 23:50:08,390:INFO:          deepchecks: Not installed
2025-05-03 23:50:08,390:INFO:             xgboost: Not installed
2025-05-03 23:50:08,390:INFO:            catboost: Not installed
2025-05-03 23:50:08,390:INFO:              kmodes: Not installed
2025-05-03 23:50:08,390:INFO:             mlxtend: Not installed
2025-05-03 23:50:08,390:INFO:       statsforecast: Not installed
2025-05-03 23:50:08,390:INFO:        tune_sklearn: Not installed
2025-05-03 23:50:08,391:INFO:                 ray: Not installed
2025-05-03 23:50:08,391:INFO:            hyperopt: Not installed
2025-05-03 23:50:08,391:INFO:              optuna: 4.3.0
2025-05-03 23:50:08,391:INFO:               skopt: Not installed
2025-05-03 23:50:08,391:INFO:              mlflow: 1.30.0
2025-05-03 23:50:08,391:INFO:              gradio: Not installed
2025-05-03 23:50:08,391:INFO:             fastapi: 0.115.12
2025-05-03 23:50:08,391:INFO:             uvicorn: 0.34.2
2025-05-03 23:50:08,391:INFO:              m2cgen: Not installed
2025-05-03 23:50:08,391:INFO:           evidently: 0.7.3
2025-05-03 23:50:08,391:INFO:               fugue: Not installed
2025-05-03 23:50:08,391:INFO:           streamlit: Not installed
2025-05-03 23:50:08,391:INFO:             prophet: Not installed
2025-05-03 23:50:08,391:INFO:None
2025-05-03 23:50:08,391:INFO:Set up data.
2025-05-03 23:50:08,400:INFO:Set up folding strategy.
2025-05-03 23:50:08,400:INFO:Set up train/test split.
2025-05-03 23:50:08,407:INFO:Set up index.
2025-05-03 23:50:08,407:INFO:Assigning column types.
2025-05-03 23:50:08,407:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:50:08,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,525:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,636:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,636:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,636:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:50:08,761:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,761:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,872:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,872:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,872:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:50:08,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:08,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,087:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,087:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:50:09,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,199:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,328:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:50:09,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,632:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,632:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,632:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:50:09,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,884:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:09,889:INFO:Preparing preprocessing pipeline...
2025-05-03 23:50:09,890:INFO:Set up simple imputation.
2025-05-03 23:50:09,892:INFO:Set up encoding of categorical features.
2025-05-03 23:50:09,894:INFO:Set up column name cleaning.
2025-05-03 23:50:10,021:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:50:10,030:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:50:10,030:INFO:Creating final display dataframe.
2025-05-03 23:50:10,271:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                0691
2025-05-03 23:50:10,377:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:10,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:10,476:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:10,476:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:10,476:INFO:Logging experiment in loggers
2025-05-03 23:50:10,567:INFO:SubProcess save_model() called ==================================
2025-05-03 23:50:10,587:INFO:Initializing save_model()
2025-05-03 23:50:10,587:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpgmtbuax8\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:50:10,587:INFO:Adding model into prep_pipe
2025-05-03 23:50:10,587:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:50:10,587:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpgmtbuax8\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:50:10,602:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:50:10,602:INFO:save_model() successfully completed......................................
2025-05-03 23:50:11,020:INFO:SubProcess save_model() end ==================================
2025-05-03 23:50:11,036:INFO:setup() successfully completed in 2.11s...............
2025-05-03 23:50:11,118:INFO:Initializing create_model()
2025-05-03 23:50:11,118:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:50:11,118:INFO:Checking exceptions
2025-05-03 23:50:11,118:INFO:Importing libraries
2025-05-03 23:50:11,118:INFO:Copying training dataset
2025-05-03 23:50:11,118:INFO:Defining folds
2025-05-03 23:50:11,118:INFO:Declaring metric variables
2025-05-03 23:50:11,118:INFO:Importing untrained model
2025-05-03 23:50:11,118:INFO:Linear Regression Imported successfully
2025-05-03 23:50:11,123:INFO:Starting cross validation
2025-05-03 23:50:11,123:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:50:15,865:INFO:Calculating mean and std
2025-05-03 23:50:15,865:INFO:Creating metrics dataframe
2025-05-03 23:50:15,865:INFO:Finalizing model
2025-05-03 23:50:16,008:INFO:Creating Dashboard logs
2025-05-03 23:50:16,009:INFO:Model: Linear Regression
2025-05-03 23:50:16,078:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 23:50:16,271:INFO:Initializing predict_model()
2025-05-03 23:50:16,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFE830>)
2025-05-03 23:50:16,272:INFO:Checking exceptions
2025-05-03 23:50:16,272:INFO:Preloading libraries
2025-05-03 23:50:16,366:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:50:16,848:INFO:Uploading results into container
2025-05-03 23:50:16,864:INFO:Uploading model into container now
2025-05-03 23:50:16,864:INFO:_master_model_container: 11
2025-05-03 23:50:16,864:INFO:_display_container: 8
2025-05-03 23:50:16,864:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:50:16,864:INFO:create_model() successfully completed......................................
2025-05-03 23:50:17,062:INFO:Initializing tune_model()
2025-05-03 23:50:17,062:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>)
2025-05-03 23:50:17,062:INFO:Checking exceptions
2025-05-03 23:50:17,065:INFO:Copying training dataset
2025-05-03 23:50:17,067:INFO:Checking base model
2025-05-03 23:50:17,067:INFO:Base model : Linear Regression
2025-05-03 23:50:17,068:INFO:Declaring metric variables
2025-05-03 23:50:17,068:INFO:Defining Hyperparameters
2025-05-03 23:50:17,068:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-03 23:50:17,216:INFO:Tuning with n_jobs=-1
2025-05-03 23:50:17,216:INFO:Initializing GridSearchCV
2025-05-03 23:50:22,198:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-03 23:50:22,199:INFO:Hyperparameter search completed
2025-05-03 23:50:22,199:INFO:SubProcess create_model() called ==================================
2025-05-03 23:50:22,201:INFO:Initializing create_model()
2025-05-03 23:50:22,201:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362A4DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-03 23:50:22,201:INFO:Checking exceptions
2025-05-03 23:50:22,201:INFO:Importing libraries
2025-05-03 23:50:22,201:INFO:Copying training dataset
2025-05-03 23:50:22,208:INFO:Defining folds
2025-05-03 23:50:22,208:INFO:Declaring metric variables
2025-05-03 23:50:22,208:INFO:Importing untrained model
2025-05-03 23:50:22,208:INFO:Declaring custom model
2025-05-03 23:50:22,208:INFO:Linear Regression Imported successfully
2025-05-03 23:50:22,208:INFO:Starting cross validation
2025-05-03 23:50:22,208:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:50:22,632:INFO:Calculating mean and std
2025-05-03 23:50:22,633:INFO:Creating metrics dataframe
2025-05-03 23:50:22,637:INFO:Finalizing model
2025-05-03 23:50:22,735:INFO:Uploading results into container
2025-05-03 23:50:22,735:INFO:Uploading model into container now
2025-05-03 23:50:22,735:INFO:_master_model_container: 12
2025-05-03 23:50:22,735:INFO:_display_container: 9
2025-05-03 23:50:22,735:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:50:22,735:INFO:create_model() successfully completed......................................
2025-05-03 23:50:22,995:INFO:SubProcess create_model() end ==================================
2025-05-03 23:50:22,996:INFO:choose_better activated
2025-05-03 23:50:22,996:INFO:SubProcess create_model() called ==================================
2025-05-03 23:50:22,996:INFO:Initializing create_model()
2025-05-03 23:50:22,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:50:22,997:INFO:Checking exceptions
2025-05-03 23:50:22,998:INFO:Importing libraries
2025-05-03 23:50:22,998:INFO:Copying training dataset
2025-05-03 23:50:23,001:INFO:Defining folds
2025-05-03 23:50:23,001:INFO:Declaring metric variables
2025-05-03 23:50:23,001:INFO:Importing untrained model
2025-05-03 23:50:23,001:INFO:Declaring custom model
2025-05-03 23:50:23,001:INFO:Linear Regression Imported successfully
2025-05-03 23:50:23,001:INFO:Starting cross validation
2025-05-03 23:50:23,002:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:50:23,131:INFO:Calculating mean and std
2025-05-03 23:50:23,131:INFO:Creating metrics dataframe
2025-05-03 23:50:23,133:INFO:Finalizing model
2025-05-03 23:50:23,185:INFO:Uploading results into container
2025-05-03 23:50:23,185:INFO:Uploading model into container now
2025-05-03 23:50:23,185:INFO:_master_model_container: 13
2025-05-03 23:50:23,185:INFO:_display_container: 10
2025-05-03 23:50:23,185:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:50:23,185:INFO:create_model() successfully completed......................................
2025-05-03 23:50:23,333:INFO:SubProcess create_model() end ==================================
2025-05-03 23:50:23,333:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-03 23:50:23,333:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-03 23:50:23,333:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-03 23:50:23,333:INFO:choose_better completed
2025-05-03 23:50:23,333:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-03 23:50:23,333:INFO:Creating Dashboard logs
2025-05-03 23:50:23,333:INFO:Model: Linear Regression
2025-05-03 23:50:23,349:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 23:50:23,458:INFO:Initializing predict_model()
2025-05-03 23:50:23,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026361C8E680>)
2025-05-03 23:50:23,458:INFO:Checking exceptions
2025-05-03 23:50:23,458:INFO:Preloading libraries
2025-05-03 23:50:23,507:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:50:23,863:INFO:_master_model_container: 13
2025-05-03 23:50:23,863:INFO:_display_container: 9
2025-05-03 23:50:23,863:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:50:23,863:INFO:tune_model() successfully completed......................................
2025-05-03 23:50:24,138:INFO:gpu_param set to False
2025-05-03 23:50:24,248:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:24,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:24,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:24,353:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:50:24,355:INFO:Initializing predict_model()
2025-05-03 23:50:24,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362D4C160>)
2025-05-03 23:50:24,355:INFO:Checking exceptions
2025-05-03 23:50:24,355:INFO:Preloading libraries
2025-05-03 23:50:24,416:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:50:24,615:INFO:Initializing plot_model()
2025-05-03 23:50:24,615:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, system=True)
2025-05-03 23:50:24,615:INFO:Checking exceptions
2025-05-03 23:50:24,618:INFO:Preloading libraries
2025-05-03 23:50:24,618:INFO:Copying training dataset
2025-05-03 23:50:24,618:INFO:Plot type: feature
2025-05-03 23:50:24,662:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:50:24,814:INFO:Saving 'Feature Importance.png'
2025-05-03 23:50:24,921:INFO:Visual Rendered Successfully
2025-05-03 23:50:25,076:INFO:plot_model() successfully completed......................................
2025-05-03 23:50:25,087:INFO:Initializing plot_model()
2025-05-03 23:50:25,087:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, system=True)
2025-05-03 23:50:25,091:INFO:Checking exceptions
2025-05-03 23:50:25,093:INFO:Preloading libraries
2025-05-03 23:50:25,093:INFO:Copying training dataset
2025-05-03 23:50:25,093:INFO:Plot type: residuals
2025-05-03 23:50:25,094:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:50:25,269:INFO:Fitting Model
2025-05-03 23:50:25,269:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-03 23:50:25,301:INFO:Scoring test/hold-out set
2025-05-03 23:50:25,339:INFO:Saving 'Residuals.png'
2025-05-03 23:50:25,643:INFO:Visual Rendered Successfully
2025-05-03 23:50:25,813:INFO:plot_model() successfully completed......................................
2025-05-03 23:50:25,823:INFO:Initializing plot_model()
2025-05-03 23:50:25,823:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, system=True)
2025-05-03 23:50:25,823:INFO:Checking exceptions
2025-05-03 23:50:25,825:INFO:Preloading libraries
2025-05-03 23:50:25,825:INFO:Copying training dataset
2025-05-03 23:50:25,826:INFO:Plot type: error
2025-05-03 23:50:25,947:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:50:26,046:INFO:Fitting Model
2025-05-03 23:50:26,046:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-03 23:50:26,046:INFO:Scoring test/hold-out set
2025-05-03 23:50:26,062:INFO:Saving 'Prediction Error.png'
2025-05-03 23:50:26,256:INFO:Visual Rendered Successfully
2025-05-03 23:50:26,452:INFO:plot_model() successfully completed......................................
2025-05-03 23:50:26,464:INFO:Initializing plot_model()
2025-05-03 23:50:26,464:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026361D04E50>, system=True)
2025-05-03 23:50:26,464:INFO:Checking exceptions
2025-05-03 23:50:26,466:INFO:Preloading libraries
2025-05-03 23:50:26,466:INFO:Copying training dataset
2025-05-03 23:50:26,466:INFO:Plot type: cooks
2025-05-03 23:50:26,540:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:50:26,619:INFO:Fitting Model
2025-05-03 23:50:26,678:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:50:26,830:INFO:Visual Rendered Successfully
2025-05-03 23:50:27,000:INFO:plot_model() successfully completed......................................
2025-05-03 23:50:27,045:INFO:Initializing save_model()
2025-05-03 23:50:27,045:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250503_235027_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:50:27,045:INFO:Adding model into prep_pipe
2025-05-03 23:50:27,052:INFO:./automl_outputs\automl_4\models\tuned_lr_20250503_235027_4.pkl saved in current working directory
2025-05-03 23:50:27,060:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-03 23:50:27,060:INFO:save_model() successfully completed......................................
2025-05-03 23:54:07,380:INFO:PyCaret RegressionExperiment
2025-05-03 23:54:07,380:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:54:07,380:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:54:07,380:INFO:version 3.3.2
2025-05-03 23:54:07,380:INFO:Initializing setup()
2025-05-03 23:54:07,380:INFO:self.USI: 0c68
2025-05-03 23:54:07,380:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:54:07,380:INFO:Checking environment
2025-05-03 23:54:07,380:INFO:python_version: 3.10.11
2025-05-03 23:54:07,380:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:54:07,380:INFO:machine: AMD64
2025-05-03 23:54:07,380:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:54:07,396:INFO:Memory: svmem(total=8403075072, available=1009057792, percent=88.0, used=7394017280, free=1009057792)
2025-05-03 23:54:07,396:INFO:Physical Core: 6
2025-05-03 23:54:07,396:INFO:Logical Core: 12
2025-05-03 23:54:07,396:INFO:Checking libraries
2025-05-03 23:54:07,396:INFO:System:
2025-05-03 23:54:07,396:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:54:07,396:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:54:07,396:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:54:07,396:INFO:PyCaret required dependencies:
2025-05-03 23:54:07,396:INFO:                 pip: 23.0.1
2025-05-03 23:54:07,396:INFO:          setuptools: 65.5.0
2025-05-03 23:54:07,396:INFO:             pycaret: 3.3.2
2025-05-03 23:54:07,396:INFO:             IPython: 8.36.0
2025-05-03 23:54:07,396:INFO:          ipywidgets: 8.1.6
2025-05-03 23:54:07,396:INFO:                tqdm: 4.67.1
2025-05-03 23:54:07,396:INFO:               numpy: 1.26.4
2025-05-03 23:54:07,396:INFO:              pandas: 1.5.3
2025-05-03 23:54:07,396:INFO:              jinja2: 3.1.6
2025-05-03 23:54:07,396:INFO:               scipy: 1.11.4
2025-05-03 23:54:07,396:INFO:              joblib: 1.3.2
2025-05-03 23:54:07,396:INFO:             sklearn: 1.4.2
2025-05-03 23:54:07,396:INFO:                pyod: 2.0.4
2025-05-03 23:54:07,396:INFO:            imblearn: 0.13.0
2025-05-03 23:54:07,396:INFO:   category_encoders: 2.7.0
2025-05-03 23:54:07,396:INFO:            lightgbm: 4.6.0
2025-05-03 23:54:07,396:INFO:               numba: 0.61.0
2025-05-03 23:54:07,396:INFO:            requests: 2.32.3
2025-05-03 23:54:07,396:INFO:          matplotlib: 3.7.5
2025-05-03 23:54:07,396:INFO:          scikitplot: 0.3.7
2025-05-03 23:54:07,396:INFO:         yellowbrick: 1.5
2025-05-03 23:54:07,396:INFO:              plotly: 5.24.1
2025-05-03 23:54:07,396:INFO:    plotly-resampler: Not installed
2025-05-03 23:54:07,396:INFO:             kaleido: 0.2.1
2025-05-03 23:54:07,396:INFO:           schemdraw: 0.15
2025-05-03 23:54:07,396:INFO:         statsmodels: 0.14.4
2025-05-03 23:54:07,396:INFO:              sktime: 0.26.0
2025-05-03 23:54:07,396:INFO:               tbats: 1.1.3
2025-05-03 23:54:07,396:INFO:            pmdarima: 2.0.4
2025-05-03 23:54:07,396:INFO:              psutil: 7.0.0
2025-05-03 23:54:07,396:INFO:          markupsafe: 3.0.2
2025-05-03 23:54:07,396:INFO:             pickle5: Not installed
2025-05-03 23:54:07,396:INFO:         cloudpickle: 2.2.1
2025-05-03 23:54:07,396:INFO:         deprecation: 2.1.0
2025-05-03 23:54:07,396:INFO:              xxhash: 3.5.0
2025-05-03 23:54:07,396:INFO:           wurlitzer: Not installed
2025-05-03 23:54:07,396:INFO:PyCaret optional dependencies:
2025-05-03 23:54:07,396:INFO:                shap: 0.47.2
2025-05-03 23:54:07,396:INFO:           interpret: Not installed
2025-05-03 23:54:07,396:INFO:                umap: Not installed
2025-05-03 23:54:07,396:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:54:07,396:INFO:  explainerdashboard: Not installed
2025-05-03 23:54:07,396:INFO:             autoviz: Not installed
2025-05-03 23:54:07,396:INFO:           fairlearn: Not installed
2025-05-03 23:54:07,396:INFO:          deepchecks: Not installed
2025-05-03 23:54:07,396:INFO:             xgboost: Not installed
2025-05-03 23:54:07,396:INFO:            catboost: Not installed
2025-05-03 23:54:07,396:INFO:              kmodes: Not installed
2025-05-03 23:54:07,396:INFO:             mlxtend: Not installed
2025-05-03 23:54:07,396:INFO:       statsforecast: Not installed
2025-05-03 23:54:07,396:INFO:        tune_sklearn: Not installed
2025-05-03 23:54:07,396:INFO:                 ray: Not installed
2025-05-03 23:54:07,396:INFO:            hyperopt: Not installed
2025-05-03 23:54:07,396:INFO:              optuna: 4.3.0
2025-05-03 23:54:07,396:INFO:               skopt: Not installed
2025-05-03 23:54:07,396:INFO:              mlflow: 1.30.0
2025-05-03 23:54:07,396:INFO:              gradio: Not installed
2025-05-03 23:54:07,396:INFO:             fastapi: 0.115.12
2025-05-03 23:54:07,396:INFO:             uvicorn: 0.34.2
2025-05-03 23:54:07,396:INFO:              m2cgen: Not installed
2025-05-03 23:54:07,396:INFO:           evidently: 0.7.3
2025-05-03 23:54:07,396:INFO:               fugue: Not installed
2025-05-03 23:54:07,396:INFO:           streamlit: Not installed
2025-05-03 23:54:07,396:INFO:             prophet: Not installed
2025-05-03 23:54:07,396:INFO:None
2025-05-03 23:54:07,396:INFO:Set up data.
2025-05-03 23:54:07,396:INFO:Set up folding strategy.
2025-05-03 23:54:07,396:INFO:Set up train/test split.
2025-05-03 23:54:07,396:INFO:Set up index.
2025-05-03 23:54:07,396:INFO:Assigning column types.
2025-05-03 23:54:07,411:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:54:07,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,505:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,619:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,619:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,619:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:54:07,716:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,716:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,842:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,843:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:54:07,951:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:07,951:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,068:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,068:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,069:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:54:08,175:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,175:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,283:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,283:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,283:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:54:08,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,504:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,504:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,504:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:54:08,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:08,716:INFO:Preparing preprocessing pipeline...
2025-05-03 23:54:08,716:INFO:Set up simple imputation.
2025-05-03 23:54:08,718:INFO:Set up encoding of categorical features.
2025-05-03 23:54:08,719:INFO:Set up column name cleaning.
2025-05-03 23:54:08,811:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:54:08,820:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:54:08,820:INFO:Creating final display dataframe.
2025-05-03 23:54:09,026:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                0c68
2025-05-03 23:54:09,132:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:09,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:09,234:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:09,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:09,234:INFO:Logging experiment in loggers
2025-05-03 23:54:09,331:INFO:SubProcess save_model() called ==================================
2025-05-03 23:54:09,345:INFO:Initializing save_model()
2025-05-03 23:54:09,345:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpzv0n1c1m\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:54:09,345:INFO:Adding model into prep_pipe
2025-05-03 23:54:09,345:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:54:09,356:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpzv0n1c1m\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:54:09,363:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:54:09,363:INFO:save_model() successfully completed......................................
2025-05-03 23:54:09,567:INFO:SubProcess save_model() end ==================================
2025-05-03 23:54:09,581:INFO:setup() successfully completed in 1.85s...............
2025-05-03 23:54:09,666:INFO:Initializing create_model()
2025-05-03 23:54:09,666:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:54:09,666:INFO:Checking exceptions
2025-05-03 23:54:09,667:INFO:Importing libraries
2025-05-03 23:54:09,667:INFO:Copying training dataset
2025-05-03 23:54:09,670:INFO:Defining folds
2025-05-03 23:54:09,670:INFO:Declaring metric variables
2025-05-03 23:54:09,670:INFO:Importing untrained model
2025-05-03 23:54:09,671:INFO:Ridge Regression Imported successfully
2025-05-03 23:54:09,671:INFO:Starting cross validation
2025-05-03 23:54:09,672:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:54:09,824:INFO:Calculating mean and std
2025-05-03 23:54:09,824:INFO:Creating metrics dataframe
2025-05-03 23:54:09,824:INFO:Finalizing model
2025-05-03 23:54:09,875:INFO:Creating Dashboard logs
2025-05-03 23:54:09,876:INFO:Model: Ridge Regression
2025-05-03 23:54:09,900:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:54:09,997:INFO:Initializing predict_model()
2025-05-03 23:54:09,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190E50>)
2025-05-03 23:54:09,997:INFO:Checking exceptions
2025-05-03 23:54:09,997:INFO:Preloading libraries
2025-05-03 23:54:10,060:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:54:10,536:INFO:Uploading results into container
2025-05-03 23:54:10,536:INFO:Uploading model into container now
2025-05-03 23:54:10,536:INFO:_master_model_container: 11
2025-05-03 23:54:10,536:INFO:_display_container: 8
2025-05-03 23:54:10,539:INFO:Ridge(random_state=4)
2025-05-03 23:54:10,539:INFO:create_model() successfully completed......................................
2025-05-03 23:54:10,750:INFO:Initializing tune_model()
2025-05-03 23:54:10,750:INFO:tune_model(estimator=Ridge(random_state=4), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>)
2025-05-03 23:54:10,750:INFO:Checking exceptions
2025-05-03 23:54:10,753:INFO:Copying training dataset
2025-05-03 23:54:10,755:INFO:Checking base model
2025-05-03 23:54:10,755:INFO:Base model : Ridge Regression
2025-05-03 23:54:10,755:INFO:Declaring metric variables
2025-05-03 23:54:10,755:INFO:Defining Hyperparameters
2025-05-03 23:54:10,981:INFO:Tuning with n_jobs=-1
2025-05-03 23:54:10,981:INFO:Initializing RandomizedSearchCV
2025-05-03 23:54:13,196:INFO:best_params: {'actual_estimator__fit_intercept': False, 'actual_estimator__alpha': 9.61}
2025-05-03 23:54:13,196:INFO:Hyperparameter search completed
2025-05-03 23:54:13,196:INFO:SubProcess create_model() called ==================================
2025-05-03 23:54:13,197:INFO:Initializing create_model()
2025-05-03 23:54:13,197:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636226E020>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': False, 'alpha': 9.61})
2025-05-03 23:54:13,197:INFO:Checking exceptions
2025-05-03 23:54:13,197:INFO:Importing libraries
2025-05-03 23:54:13,197:INFO:Copying training dataset
2025-05-03 23:54:13,202:INFO:Defining folds
2025-05-03 23:54:13,202:INFO:Declaring metric variables
2025-05-03 23:54:13,203:INFO:Importing untrained model
2025-05-03 23:54:13,203:INFO:Declaring custom model
2025-05-03 23:54:13,203:INFO:Ridge Regression Imported successfully
2025-05-03 23:54:13,203:INFO:Starting cross validation
2025-05-03 23:54:13,204:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:54:13,366:INFO:Calculating mean and std
2025-05-03 23:54:13,367:INFO:Creating metrics dataframe
2025-05-03 23:54:13,368:INFO:Finalizing model
2025-05-03 23:54:13,430:INFO:Uploading results into container
2025-05-03 23:54:13,430:INFO:Uploading model into container now
2025-05-03 23:54:13,431:INFO:_master_model_container: 12
2025-05-03 23:54:13,431:INFO:_display_container: 9
2025-05-03 23:54:13,431:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:54:13,431:INFO:create_model() successfully completed......................................
2025-05-03 23:54:13,612:INFO:SubProcess create_model() end ==================================
2025-05-03 23:54:13,612:INFO:choose_better activated
2025-05-03 23:54:13,612:INFO:SubProcess create_model() called ==================================
2025-05-03 23:54:13,613:INFO:Initializing create_model()
2025-05-03 23:54:13,613:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:54:13,613:INFO:Checking exceptions
2025-05-03 23:54:13,613:INFO:Importing libraries
2025-05-03 23:54:13,613:INFO:Copying training dataset
2025-05-03 23:54:13,617:INFO:Defining folds
2025-05-03 23:54:13,617:INFO:Declaring metric variables
2025-05-03 23:54:13,618:INFO:Importing untrained model
2025-05-03 23:54:13,618:INFO:Declaring custom model
2025-05-03 23:54:13,618:INFO:Ridge Regression Imported successfully
2025-05-03 23:54:13,618:INFO:Starting cross validation
2025-05-03 23:54:13,619:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:54:13,737:INFO:Calculating mean and std
2025-05-03 23:54:13,737:INFO:Creating metrics dataframe
2025-05-03 23:54:13,739:INFO:Finalizing model
2025-05-03 23:54:13,785:INFO:Uploading results into container
2025-05-03 23:54:13,786:INFO:Uploading model into container now
2025-05-03 23:54:13,786:INFO:_master_model_container: 13
2025-05-03 23:54:13,786:INFO:_display_container: 10
2025-05-03 23:54:13,786:INFO:Ridge(random_state=4)
2025-05-03 23:54:13,787:INFO:create_model() successfully completed......................................
2025-05-03 23:54:13,935:INFO:SubProcess create_model() end ==================================
2025-05-03 23:54:13,935:INFO:Ridge(random_state=4) result for RMSE is 9308.2603
2025-05-03 23:54:13,935:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) result for RMSE is 9303.2847
2025-05-03 23:54:13,935:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4) is best model
2025-05-03 23:54:13,935:INFO:choose_better completed
2025-05-03 23:54:13,935:INFO:Creating Dashboard logs
2025-05-03 23:54:13,935:INFO:Model: Ridge Regression
2025-05-03 23:54:13,956:INFO:Logged params: {'alpha': 9.61, 'copy_X': True, 'fit_intercept': False, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 23:54:14,053:INFO:Initializing predict_model()
2025-05-03 23:54:14,053:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190700>)
2025-05-03 23:54:14,053:INFO:Checking exceptions
2025-05-03 23:54:14,053:INFO:Preloading libraries
2025-05-03 23:54:14,102:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:54:14,509:INFO:_master_model_container: 13
2025-05-03 23:54:14,509:INFO:_display_container: 9
2025-05-03 23:54:14,509:INFO:Ridge(alpha=9.61, fit_intercept=False, random_state=4)
2025-05-03 23:54:14,509:INFO:tune_model() successfully completed......................................
2025-05-03 23:54:14,761:INFO:gpu_param set to False
2025-05-03 23:54:14,865:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:14,865:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:14,956:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:14,956:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:54:14,963:INFO:Initializing predict_model()
2025-05-03 23:54:14,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362AAB490>)
2025-05-03 23:54:14,964:INFO:Checking exceptions
2025-05-03 23:54:14,964:INFO:Preloading libraries
2025-05-03 23:54:15,018:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:54:15,191:INFO:Initializing plot_model()
2025-05-03 23:54:15,191:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, system=True)
2025-05-03 23:54:15,191:INFO:Checking exceptions
2025-05-03 23:54:15,192:INFO:Preloading libraries
2025-05-03 23:54:15,192:INFO:Copying training dataset
2025-05-03 23:54:15,192:INFO:Plot type: feature
2025-05-03 23:54:15,249:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:54:15,379:INFO:Saving 'Feature Importance.png'
2025-05-03 23:54:15,484:INFO:Visual Rendered Successfully
2025-05-03 23:54:15,639:INFO:plot_model() successfully completed......................................
2025-05-03 23:54:15,658:INFO:Initializing plot_model()
2025-05-03 23:54:15,659:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, system=True)
2025-05-03 23:54:15,659:INFO:Checking exceptions
2025-05-03 23:54:15,660:INFO:Preloading libraries
2025-05-03 23:54:15,660:INFO:Copying training dataset
2025-05-03 23:54:15,660:INFO:Plot type: residuals
2025-05-03 23:54:15,661:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:54:15,865:INFO:Fitting Model
2025-05-03 23:54:15,866:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:54:15,903:INFO:Scoring test/hold-out set
2025-05-03 23:54:15,937:INFO:Saving 'Residuals.png'
2025-05-03 23:54:16,324:INFO:Visual Rendered Successfully
2025-05-03 23:54:16,494:INFO:plot_model() successfully completed......................................
2025-05-03 23:54:16,514:INFO:Initializing plot_model()
2025-05-03 23:54:16,514:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, system=True)
2025-05-03 23:54:16,514:INFO:Checking exceptions
2025-05-03 23:54:16,515:INFO:Preloading libraries
2025-05-03 23:54:16,515:INFO:Copying training dataset
2025-05-03 23:54:16,516:INFO:Plot type: error
2025-05-03 23:54:16,609:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:54:16,699:INFO:Fitting Model
2025-05-03 23:54:16,699:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-05-03 23:54:16,699:INFO:Scoring test/hold-out set
2025-05-03 23:54:16,718:INFO:Saving 'Prediction Error.png'
2025-05-03 23:54:16,970:INFO:Visual Rendered Successfully
2025-05-03 23:54:17,164:INFO:plot_model() successfully completed......................................
2025-05-03 23:54:17,185:INFO:Initializing plot_model()
2025-05-03 23:54:17,185:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(alpha=9.61, fit_intercept=False, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263630B7C10>, system=True)
2025-05-03 23:54:17,185:INFO:Checking exceptions
2025-05-03 23:54:17,192:INFO:Preloading libraries
2025-05-03 23:54:17,192:INFO:Copying training dataset
2025-05-03 23:54:17,192:INFO:Plot type: cooks
2025-05-03 23:54:17,351:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:54:17,471:INFO:Fitting Model
2025-05-03 23:54:17,552:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:54:17,864:INFO:Visual Rendered Successfully
2025-05-03 23:54:18,144:INFO:plot_model() successfully completed......................................
2025-05-03 23:54:18,191:INFO:Initializing save_model()
2025-05-03 23:54:18,191:INFO:save_model(model=Ridge(alpha=9.61, fit_intercept=False, random_state=4), model_name=./automl_outputs\automl_4\models\tuned_ridge_20250503_235418_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:54:18,191:INFO:Adding model into prep_pipe
2025-05-03 23:54:18,210:INFO:./automl_outputs\automl_4\models\tuned_ridge_20250503_235418_4.pkl saved in current working directory
2025-05-03 23:54:18,210:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 Ridge(alpha=9.61, fit_intercept=False, random_state=4))])
2025-05-03 23:54:18,210:INFO:save_model() successfully completed......................................
2025-05-03 23:55:21,822:INFO:PyCaret RegressionExperiment
2025-05-03 23:55:21,822:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:55:21,822:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:55:21,822:INFO:version 3.3.2
2025-05-03 23:55:21,822:INFO:Initializing setup()
2025-05-03 23:55:21,822:INFO:self.USI: 4274
2025-05-03 23:55:21,822:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:55:21,822:INFO:Checking environment
2025-05-03 23:55:21,822:INFO:python_version: 3.10.11
2025-05-03 23:55:21,822:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:55:21,822:INFO:machine: AMD64
2025-05-03 23:55:21,822:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:55:21,822:INFO:Memory: svmem(total=8403075072, available=751403008, percent=91.1, used=7651672064, free=751403008)
2025-05-03 23:55:21,822:INFO:Physical Core: 6
2025-05-03 23:55:21,822:INFO:Logical Core: 12
2025-05-03 23:55:21,822:INFO:Checking libraries
2025-05-03 23:55:21,822:INFO:System:
2025-05-03 23:55:21,822:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:55:21,822:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:55:21,822:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:55:21,822:INFO:PyCaret required dependencies:
2025-05-03 23:55:21,822:INFO:                 pip: 23.0.1
2025-05-03 23:55:21,822:INFO:          setuptools: 65.5.0
2025-05-03 23:55:21,822:INFO:             pycaret: 3.3.2
2025-05-03 23:55:21,822:INFO:             IPython: 8.36.0
2025-05-03 23:55:21,822:INFO:          ipywidgets: 8.1.6
2025-05-03 23:55:21,822:INFO:                tqdm: 4.67.1
2025-05-03 23:55:21,822:INFO:               numpy: 1.26.4
2025-05-03 23:55:21,822:INFO:              pandas: 1.5.3
2025-05-03 23:55:21,822:INFO:              jinja2: 3.1.6
2025-05-03 23:55:21,822:INFO:               scipy: 1.11.4
2025-05-03 23:55:21,822:INFO:              joblib: 1.3.2
2025-05-03 23:55:21,829:INFO:             sklearn: 1.4.2
2025-05-03 23:55:21,829:INFO:                pyod: 2.0.4
2025-05-03 23:55:21,829:INFO:            imblearn: 0.13.0
2025-05-03 23:55:21,829:INFO:   category_encoders: 2.7.0
2025-05-03 23:55:21,829:INFO:            lightgbm: 4.6.0
2025-05-03 23:55:21,829:INFO:               numba: 0.61.0
2025-05-03 23:55:21,829:INFO:            requests: 2.32.3
2025-05-03 23:55:21,829:INFO:          matplotlib: 3.7.5
2025-05-03 23:55:21,829:INFO:          scikitplot: 0.3.7
2025-05-03 23:55:21,829:INFO:         yellowbrick: 1.5
2025-05-03 23:55:21,829:INFO:              plotly: 5.24.1
2025-05-03 23:55:21,829:INFO:    plotly-resampler: Not installed
2025-05-03 23:55:21,829:INFO:             kaleido: 0.2.1
2025-05-03 23:55:21,829:INFO:           schemdraw: 0.15
2025-05-03 23:55:21,829:INFO:         statsmodels: 0.14.4
2025-05-03 23:55:21,829:INFO:              sktime: 0.26.0
2025-05-03 23:55:21,829:INFO:               tbats: 1.1.3
2025-05-03 23:55:21,829:INFO:            pmdarima: 2.0.4
2025-05-03 23:55:21,829:INFO:              psutil: 7.0.0
2025-05-03 23:55:21,829:INFO:          markupsafe: 3.0.2
2025-05-03 23:55:21,829:INFO:             pickle5: Not installed
2025-05-03 23:55:21,829:INFO:         cloudpickle: 2.2.1
2025-05-03 23:55:21,829:INFO:         deprecation: 2.1.0
2025-05-03 23:55:21,829:INFO:              xxhash: 3.5.0
2025-05-03 23:55:21,829:INFO:           wurlitzer: Not installed
2025-05-03 23:55:21,829:INFO:PyCaret optional dependencies:
2025-05-03 23:55:21,829:INFO:                shap: 0.47.2
2025-05-03 23:55:21,829:INFO:           interpret: Not installed
2025-05-03 23:55:21,829:INFO:                umap: Not installed
2025-05-03 23:55:21,829:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:55:21,829:INFO:  explainerdashboard: Not installed
2025-05-03 23:55:21,829:INFO:             autoviz: Not installed
2025-05-03 23:55:21,829:INFO:           fairlearn: Not installed
2025-05-03 23:55:21,829:INFO:          deepchecks: Not installed
2025-05-03 23:55:21,829:INFO:             xgboost: Not installed
2025-05-03 23:55:21,829:INFO:            catboost: Not installed
2025-05-03 23:55:21,829:INFO:              kmodes: Not installed
2025-05-03 23:55:21,829:INFO:             mlxtend: Not installed
2025-05-03 23:55:21,829:INFO:       statsforecast: Not installed
2025-05-03 23:55:21,829:INFO:        tune_sklearn: Not installed
2025-05-03 23:55:21,829:INFO:                 ray: Not installed
2025-05-03 23:55:21,829:INFO:            hyperopt: Not installed
2025-05-03 23:55:21,829:INFO:              optuna: 4.3.0
2025-05-03 23:55:21,829:INFO:               skopt: Not installed
2025-05-03 23:55:21,829:INFO:              mlflow: 1.30.0
2025-05-03 23:55:21,829:INFO:              gradio: Not installed
2025-05-03 23:55:21,829:INFO:             fastapi: 0.115.12
2025-05-03 23:55:21,829:INFO:             uvicorn: 0.34.2
2025-05-03 23:55:21,829:INFO:              m2cgen: Not installed
2025-05-03 23:55:21,829:INFO:           evidently: 0.7.3
2025-05-03 23:55:21,829:INFO:               fugue: Not installed
2025-05-03 23:55:21,829:INFO:           streamlit: Not installed
2025-05-03 23:55:21,829:INFO:             prophet: Not installed
2025-05-03 23:55:21,829:INFO:None
2025-05-03 23:55:21,829:INFO:Set up data.
2025-05-03 23:55:21,829:INFO:Set up folding strategy.
2025-05-03 23:55:21,829:INFO:Set up train/test split.
2025-05-03 23:55:21,829:INFO:Set up index.
2025-05-03 23:55:21,829:INFO:Assigning column types.
2025-05-03 23:55:21,829:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:55:21,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:21,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,037:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,037:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:55:22,142:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,143:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,242:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,242:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,243:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:55:22,381:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,381:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,481:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,482:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,482:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:55:22,578:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,678:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,678:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,678:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:55:22,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,888:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,888:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,888:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:55:22,992:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:22,992:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,094:INFO:Preparing preprocessing pipeline...
2025-05-03 23:55:23,094:INFO:Set up simple imputation.
2025-05-03 23:55:23,094:INFO:Set up encoding of categorical features.
2025-05-03 23:55:23,094:INFO:Set up column name cleaning.
2025-05-03 23:55:23,173:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:55:23,181:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:55:23,181:INFO:Creating final display dataframe.
2025-05-03 23:55:23,403:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                4274
2025-05-03 23:55:23,519:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:23,643:INFO:Logging experiment in loggers
2025-05-03 23:55:23,742:INFO:SubProcess save_model() called ==================================
2025-05-03 23:55:23,759:INFO:Initializing save_model()
2025-05-03 23:55:23,759:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp8rspi5ju\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:55:23,760:INFO:Adding model into prep_pipe
2025-05-03 23:55:23,760:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:55:23,765:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp8rspi5ju\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:55:23,774:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:55:23,774:INFO:save_model() successfully completed......................................
2025-05-03 23:55:23,940:INFO:SubProcess save_model() end ==================================
2025-05-03 23:55:23,956:INFO:setup() successfully completed in 1.83s...............
2025-05-03 23:55:24,018:INFO:Initializing create_model()
2025-05-03 23:55:24,018:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:55:24,018:INFO:Checking exceptions
2025-05-03 23:55:24,018:INFO:Importing libraries
2025-05-03 23:55:24,018:INFO:Copying training dataset
2025-05-03 23:55:24,018:INFO:Defining folds
2025-05-03 23:55:24,018:INFO:Declaring metric variables
2025-05-03 23:55:24,018:INFO:Importing untrained model
2025-05-03 23:55:24,018:INFO:Linear Regression Imported successfully
2025-05-03 23:55:24,034:INFO:Starting cross validation
2025-05-03 23:55:24,034:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:55:24,159:INFO:Calculating mean and std
2025-05-03 23:55:24,159:INFO:Creating metrics dataframe
2025-05-03 23:55:24,163:INFO:Finalizing model
2025-05-03 23:55:24,216:INFO:Creating Dashboard logs
2025-05-03 23:55:24,216:INFO:Model: Linear Regression
2025-05-03 23:55:24,241:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 23:55:24,351:INFO:Initializing predict_model()
2025-05-03 23:55:24,351:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263631904C0>)
2025-05-03 23:55:24,351:INFO:Checking exceptions
2025-05-03 23:55:24,351:INFO:Preloading libraries
2025-05-03 23:55:24,412:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:55:24,805:INFO:Uploading results into container
2025-05-03 23:55:24,806:INFO:Uploading model into container now
2025-05-03 23:55:24,806:INFO:_master_model_container: 11
2025-05-03 23:55:24,806:INFO:_display_container: 8
2025-05-03 23:55:24,806:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:55:24,806:INFO:create_model() successfully completed......................................
2025-05-03 23:55:24,969:INFO:Initializing tune_model()
2025-05-03 23:55:24,969:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>)
2025-05-03 23:55:24,969:INFO:Checking exceptions
2025-05-03 23:55:24,969:INFO:Copying training dataset
2025-05-03 23:55:24,969:INFO:Checking base model
2025-05-03 23:55:24,969:INFO:Base model : Linear Regression
2025-05-03 23:55:24,969:INFO:Declaring metric variables
2025-05-03 23:55:24,969:INFO:Defining Hyperparameters
2025-05-03 23:55:24,969:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-03 23:55:25,139:INFO:Tuning with n_jobs=-1
2025-05-03 23:55:25,139:INFO:Initializing GridSearchCV
2025-05-03 23:55:25,301:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-03 23:55:25,301:INFO:Hyperparameter search completed
2025-05-03 23:55:25,301:INFO:SubProcess create_model() called ==================================
2025-05-03 23:55:25,301:INFO:Initializing create_model()
2025-05-03 23:55:25,301:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362A4C7F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-03 23:55:25,301:INFO:Checking exceptions
2025-05-03 23:55:25,301:INFO:Importing libraries
2025-05-03 23:55:25,301:INFO:Copying training dataset
2025-05-03 23:55:25,301:INFO:Defining folds
2025-05-03 23:55:25,301:INFO:Declaring metric variables
2025-05-03 23:55:25,301:INFO:Importing untrained model
2025-05-03 23:55:25,301:INFO:Declaring custom model
2025-05-03 23:55:25,301:INFO:Linear Regression Imported successfully
2025-05-03 23:55:25,301:INFO:Starting cross validation
2025-05-03 23:55:25,301:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:55:25,426:INFO:Calculating mean and std
2025-05-03 23:55:25,427:INFO:Creating metrics dataframe
2025-05-03 23:55:25,428:INFO:Finalizing model
2025-05-03 23:55:25,468:INFO:Uploading results into container
2025-05-03 23:55:25,475:INFO:Uploading model into container now
2025-05-03 23:55:25,475:INFO:_master_model_container: 12
2025-05-03 23:55:25,475:INFO:_display_container: 9
2025-05-03 23:55:25,475:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:55:25,475:INFO:create_model() successfully completed......................................
2025-05-03 23:55:25,628:INFO:SubProcess create_model() end ==================================
2025-05-03 23:55:25,628:INFO:choose_better activated
2025-05-03 23:55:25,629:INFO:SubProcess create_model() called ==================================
2025-05-03 23:55:25,629:INFO:Initializing create_model()
2025-05-03 23:55:25,629:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:55:25,629:INFO:Checking exceptions
2025-05-03 23:55:25,630:INFO:Importing libraries
2025-05-03 23:55:25,630:INFO:Copying training dataset
2025-05-03 23:55:25,633:INFO:Defining folds
2025-05-03 23:55:25,633:INFO:Declaring metric variables
2025-05-03 23:55:25,633:INFO:Importing untrained model
2025-05-03 23:55:25,633:INFO:Declaring custom model
2025-05-03 23:55:25,633:INFO:Linear Regression Imported successfully
2025-05-03 23:55:25,633:INFO:Starting cross validation
2025-05-03 23:55:25,635:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:55:25,750:INFO:Calculating mean and std
2025-05-03 23:55:25,751:INFO:Creating metrics dataframe
2025-05-03 23:55:25,753:INFO:Finalizing model
2025-05-03 23:55:25,799:INFO:Uploading results into container
2025-05-03 23:55:25,800:INFO:Uploading model into container now
2025-05-03 23:55:25,800:INFO:_master_model_container: 13
2025-05-03 23:55:25,800:INFO:_display_container: 10
2025-05-03 23:55:25,800:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:55:25,800:INFO:create_model() successfully completed......................................
2025-05-03 23:55:25,963:INFO:SubProcess create_model() end ==================================
2025-05-03 23:55:25,963:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-03 23:55:25,963:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-03 23:55:25,963:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-03 23:55:25,964:INFO:choose_better completed
2025-05-03 23:55:25,964:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-03 23:55:25,964:INFO:Creating Dashboard logs
2025-05-03 23:55:25,964:INFO:Model: Linear Regression
2025-05-03 23:55:25,985:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-03 23:55:26,084:INFO:Initializing predict_model()
2025-05-03 23:55:26,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263631908B0>)
2025-05-03 23:55:26,084:INFO:Checking exceptions
2025-05-03 23:55:26,084:INFO:Preloading libraries
2025-05-03 23:55:26,138:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:55:26,532:INFO:_master_model_container: 13
2025-05-03 23:55:26,532:INFO:_display_container: 9
2025-05-03 23:55:26,532:INFO:LinearRegression(n_jobs=-1)
2025-05-03 23:55:26,532:INFO:tune_model() successfully completed......................................
2025-05-03 23:55:26,737:INFO:gpu_param set to False
2025-05-03 23:55:26,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:26,843:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:26,933:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:26,933:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:55:26,947:INFO:Initializing predict_model()
2025-05-03 23:55:26,947:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190CA0>)
2025-05-03 23:55:26,947:INFO:Checking exceptions
2025-05-03 23:55:26,947:INFO:Preloading libraries
2025-05-03 23:55:27,004:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:55:27,183:INFO:Initializing plot_model()
2025-05-03 23:55:27,183:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, system=True)
2025-05-03 23:55:27,183:INFO:Checking exceptions
2025-05-03 23:55:27,183:INFO:Preloading libraries
2025-05-03 23:55:27,183:INFO:Copying training dataset
2025-05-03 23:55:27,183:INFO:Plot type: feature
2025-05-03 23:55:27,240:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:55:27,348:INFO:Saving 'Feature Importance.png'
2025-05-03 23:55:27,441:INFO:Visual Rendered Successfully
2025-05-03 23:55:27,596:INFO:plot_model() successfully completed......................................
2025-05-03 23:55:27,614:INFO:Initializing plot_model()
2025-05-03 23:55:27,614:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, system=True)
2025-05-03 23:55:27,614:INFO:Checking exceptions
2025-05-03 23:55:27,614:INFO:Preloading libraries
2025-05-03 23:55:27,614:INFO:Copying training dataset
2025-05-03 23:55:27,614:INFO:Plot type: residuals
2025-05-03 23:55:27,614:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:55:27,830:INFO:Fitting Model
2025-05-03 23:55:27,830:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-03 23:55:27,871:INFO:Scoring test/hold-out set
2025-05-03 23:55:27,904:INFO:Saving 'Residuals.png'
2025-05-03 23:55:28,253:INFO:Visual Rendered Successfully
2025-05-03 23:55:28,425:INFO:plot_model() successfully completed......................................
2025-05-03 23:55:28,443:INFO:Initializing plot_model()
2025-05-03 23:55:28,443:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, system=True)
2025-05-03 23:55:28,443:INFO:Checking exceptions
2025-05-03 23:55:28,443:INFO:Preloading libraries
2025-05-03 23:55:28,443:INFO:Copying training dataset
2025-05-03 23:55:28,443:INFO:Plot type: error
2025-05-03 23:55:28,552:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:55:28,644:INFO:Fitting Model
2025-05-03 23:55:28,644:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-03 23:55:28,644:INFO:Scoring test/hold-out set
2025-05-03 23:55:28,655:INFO:Saving 'Prediction Error.png'
2025-05-03 23:55:28,909:INFO:Visual Rendered Successfully
2025-05-03 23:55:29,163:INFO:plot_model() successfully completed......................................
2025-05-03 23:55:29,185:INFO:Initializing plot_model()
2025-05-03 23:55:29,185:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362FF8820>, system=True)
2025-05-03 23:55:29,185:INFO:Checking exceptions
2025-05-03 23:55:29,188:INFO:Preloading libraries
2025-05-03 23:55:29,188:INFO:Copying training dataset
2025-05-03 23:55:29,188:INFO:Plot type: cooks
2025-05-03 23:55:29,324:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:55:29,430:INFO:Fitting Model
2025-05-03 23:55:29,495:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:55:29,662:INFO:Visual Rendered Successfully
2025-05-03 23:55:29,822:INFO:plot_model() successfully completed......................................
2025-05-03 23:55:29,877:INFO:Initializing save_model()
2025-05-03 23:55:29,877:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250503_235529_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:55:29,877:INFO:Adding model into prep_pipe
2025-05-03 23:55:29,877:INFO:./automl_outputs\automl_4\models\tuned_lr_20250503_235529_4.pkl saved in current working directory
2025-05-03 23:55:29,893:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-03 23:55:29,893:INFO:save_model() successfully completed......................................
2025-05-03 23:59:12,203:INFO:PyCaret RegressionExperiment
2025-05-03 23:59:12,203:INFO:Logging name: automl_bigdata_exp
2025-05-03 23:59:12,203:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-03 23:59:12,203:INFO:version 3.3.2
2025-05-03 23:59:12,203:INFO:Initializing setup()
2025-05-03 23:59:12,203:INFO:self.USI: 9d2f
2025-05-03 23:59:12,203:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-03 23:59:12,203:INFO:Checking environment
2025-05-03 23:59:12,203:INFO:python_version: 3.10.11
2025-05-03 23:59:12,203:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 23:59:12,203:INFO:machine: AMD64
2025-05-03 23:59:12,203:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-03 23:59:12,219:INFO:Memory: svmem(total=8403075072, available=1086820352, percent=87.1, used=7316254720, free=1086820352)
2025-05-03 23:59:12,219:INFO:Physical Core: 6
2025-05-03 23:59:12,219:INFO:Logical Core: 12
2025-05-03 23:59:12,219:INFO:Checking libraries
2025-05-03 23:59:12,219:INFO:System:
2025-05-03 23:59:12,219:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 23:59:12,219:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-03 23:59:12,219:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-03 23:59:12,219:INFO:PyCaret required dependencies:
2025-05-03 23:59:12,219:INFO:                 pip: 23.0.1
2025-05-03 23:59:12,219:INFO:          setuptools: 65.5.0
2025-05-03 23:59:12,219:INFO:             pycaret: 3.3.2
2025-05-03 23:59:12,219:INFO:             IPython: 8.36.0
2025-05-03 23:59:12,219:INFO:          ipywidgets: 8.1.6
2025-05-03 23:59:12,219:INFO:                tqdm: 4.67.1
2025-05-03 23:59:12,219:INFO:               numpy: 1.26.4
2025-05-03 23:59:12,219:INFO:              pandas: 1.5.3
2025-05-03 23:59:12,219:INFO:              jinja2: 3.1.6
2025-05-03 23:59:12,219:INFO:               scipy: 1.11.4
2025-05-03 23:59:12,219:INFO:              joblib: 1.3.2
2025-05-03 23:59:12,219:INFO:             sklearn: 1.4.2
2025-05-03 23:59:12,219:INFO:                pyod: 2.0.4
2025-05-03 23:59:12,219:INFO:            imblearn: 0.13.0
2025-05-03 23:59:12,219:INFO:   category_encoders: 2.7.0
2025-05-03 23:59:12,219:INFO:            lightgbm: 4.6.0
2025-05-03 23:59:12,219:INFO:               numba: 0.61.0
2025-05-03 23:59:12,219:INFO:            requests: 2.32.3
2025-05-03 23:59:12,219:INFO:          matplotlib: 3.7.5
2025-05-03 23:59:12,219:INFO:          scikitplot: 0.3.7
2025-05-03 23:59:12,219:INFO:         yellowbrick: 1.5
2025-05-03 23:59:12,219:INFO:              plotly: 5.24.1
2025-05-03 23:59:12,219:INFO:    plotly-resampler: Not installed
2025-05-03 23:59:12,219:INFO:             kaleido: 0.2.1
2025-05-03 23:59:12,219:INFO:           schemdraw: 0.15
2025-05-03 23:59:12,219:INFO:         statsmodels: 0.14.4
2025-05-03 23:59:12,219:INFO:              sktime: 0.26.0
2025-05-03 23:59:12,219:INFO:               tbats: 1.1.3
2025-05-03 23:59:12,219:INFO:            pmdarima: 2.0.4
2025-05-03 23:59:12,219:INFO:              psutil: 7.0.0
2025-05-03 23:59:12,219:INFO:          markupsafe: 3.0.2
2025-05-03 23:59:12,219:INFO:             pickle5: Not installed
2025-05-03 23:59:12,219:INFO:         cloudpickle: 2.2.1
2025-05-03 23:59:12,219:INFO:         deprecation: 2.1.0
2025-05-03 23:59:12,219:INFO:              xxhash: 3.5.0
2025-05-03 23:59:12,219:INFO:           wurlitzer: Not installed
2025-05-03 23:59:12,219:INFO:PyCaret optional dependencies:
2025-05-03 23:59:12,219:INFO:                shap: 0.47.2
2025-05-03 23:59:12,219:INFO:           interpret: Not installed
2025-05-03 23:59:12,219:INFO:                umap: Not installed
2025-05-03 23:59:12,219:INFO:     ydata_profiling: 4.16.1
2025-05-03 23:59:12,219:INFO:  explainerdashboard: Not installed
2025-05-03 23:59:12,219:INFO:             autoviz: Not installed
2025-05-03 23:59:12,219:INFO:           fairlearn: Not installed
2025-05-03 23:59:12,219:INFO:          deepchecks: Not installed
2025-05-03 23:59:12,219:INFO:             xgboost: Not installed
2025-05-03 23:59:12,219:INFO:            catboost: Not installed
2025-05-03 23:59:12,219:INFO:              kmodes: Not installed
2025-05-03 23:59:12,219:INFO:             mlxtend: Not installed
2025-05-03 23:59:12,219:INFO:       statsforecast: Not installed
2025-05-03 23:59:12,219:INFO:        tune_sklearn: Not installed
2025-05-03 23:59:12,219:INFO:                 ray: Not installed
2025-05-03 23:59:12,219:INFO:            hyperopt: Not installed
2025-05-03 23:59:12,219:INFO:              optuna: 4.3.0
2025-05-03 23:59:12,219:INFO:               skopt: Not installed
2025-05-03 23:59:12,219:INFO:              mlflow: 1.30.0
2025-05-03 23:59:12,219:INFO:              gradio: Not installed
2025-05-03 23:59:12,219:INFO:             fastapi: 0.115.12
2025-05-03 23:59:12,219:INFO:             uvicorn: 0.34.2
2025-05-03 23:59:12,219:INFO:              m2cgen: Not installed
2025-05-03 23:59:12,219:INFO:           evidently: 0.7.3
2025-05-03 23:59:12,219:INFO:               fugue: Not installed
2025-05-03 23:59:12,219:INFO:           streamlit: Not installed
2025-05-03 23:59:12,219:INFO:             prophet: Not installed
2025-05-03 23:59:12,219:INFO:None
2025-05-03 23:59:12,219:INFO:Set up data.
2025-05-03 23:59:12,219:INFO:Set up folding strategy.
2025-05-03 23:59:12,219:INFO:Set up train/test split.
2025-05-03 23:59:12,219:INFO:Set up index.
2025-05-03 23:59:12,219:INFO:Assigning column types.
2025-05-03 23:59:12,234:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 23:59:12,340:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,340:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,438:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,438:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,438:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-03 23:59:12,532:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,532:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,641:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,641:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,642:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-03 23:59:12,749:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,749:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,835:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,835:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,851:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-03 23:59:12,945:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:12,945:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,039:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,039:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 23:59:13,148:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,148:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,243:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,243:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,243:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-03 23:59:13,337:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,448:INFO:Preparing preprocessing pipeline...
2025-05-03 23:59:13,448:INFO:Set up simple imputation.
2025-05-03 23:59:13,448:INFO:Set up encoding of categorical features.
2025-05-03 23:59:13,454:INFO:Set up column name cleaning.
2025-05-03 23:59:13,535:INFO:Finished creating preprocessing pipeline.
2025-05-03 23:59:13,545:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:59:13,545:INFO:Creating final display dataframe.
2025-05-03 23:59:13,758:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                9d2f
2025-05-03 23:59:13,859:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,958:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,959:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:13,959:INFO:Logging experiment in loggers
2025-05-03 23:59:14,055:INFO:SubProcess save_model() called ==================================
2025-05-03 23:59:14,071:INFO:Initializing save_model()
2025-05-03 23:59:14,071:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpborcth04\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:59:14,071:INFO:Adding model into prep_pipe
2025-05-03 23:59:14,071:WARNING:Only Model saved as it was a pipeline.
2025-05-03 23:59:14,076:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpborcth04\Transformation Pipeline.pkl saved in current working directory
2025-05-03 23:59:14,084:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-03 23:59:14,084:INFO:save_model() successfully completed......................................
2025-05-03 23:59:14,251:INFO:SubProcess save_model() end ==================================
2025-05-03 23:59:14,267:INFO:setup() successfully completed in 1.76s...............
2025-05-03 23:59:14,316:INFO:Initializing create_model()
2025-05-03 23:59:14,316:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:59:14,316:INFO:Checking exceptions
2025-05-03 23:59:14,316:INFO:Importing libraries
2025-05-03 23:59:14,316:INFO:Copying training dataset
2025-05-03 23:59:14,323:INFO:Defining folds
2025-05-03 23:59:14,323:INFO:Declaring metric variables
2025-05-03 23:59:14,323:INFO:Importing untrained model
2025-05-03 23:59:14,323:INFO:Random Forest Regressor Imported successfully
2025-05-03 23:59:14,323:INFO:Starting cross validation
2025-05-03 23:59:14,323:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:59:14,993:INFO:Calculating mean and std
2025-05-03 23:59:14,993:INFO:Creating metrics dataframe
2025-05-03 23:59:14,995:INFO:Finalizing model
2025-05-03 23:59:15,264:INFO:Creating Dashboard logs
2025-05-03 23:59:15,264:INFO:Model: Random Forest Regressor
2025-05-03 23:59:15,285:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 23:59:15,406:INFO:Initializing predict_model()
2025-05-03 23:59:15,406:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190CA0>)
2025-05-03 23:59:15,406:INFO:Checking exceptions
2025-05-03 23:59:15,406:INFO:Preloading libraries
2025-05-03 23:59:15,489:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:59:15,949:INFO:Uploading results into container
2025-05-03 23:59:15,949:INFO:Uploading model into container now
2025-05-03 23:59:15,949:INFO:_master_model_container: 11
2025-05-03 23:59:15,949:INFO:_display_container: 8
2025-05-03 23:59:15,954:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 23:59:15,954:INFO:create_model() successfully completed......................................
2025-05-03 23:59:16,156:INFO:Initializing tune_model()
2025-05-03 23:59:16,156:INFO:tune_model(estimator=RandomForestRegressor(n_jobs=-1, random_state=4), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>)
2025-05-03 23:59:16,156:INFO:Checking exceptions
2025-05-03 23:59:16,156:INFO:Copying training dataset
2025-05-03 23:59:16,156:INFO:Checking base model
2025-05-03 23:59:16,156:INFO:Base model : Random Forest Regressor
2025-05-03 23:59:16,163:INFO:Declaring metric variables
2025-05-03 23:59:16,163:INFO:Defining Hyperparameters
2025-05-03 23:59:16,346:INFO:Tuning with n_jobs=-1
2025-05-03 23:59:16,346:INFO:Initializing RandomizedSearchCV
2025-05-03 23:59:49,879:INFO:best_params: {'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 10, 'actual_estimator__min_samples_leaf': 2, 'actual_estimator__min_impurity_decrease': 0.4, 'actual_estimator__max_features': 1.0, 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'absolute_error', 'actual_estimator__bootstrap': True}
2025-05-03 23:59:49,879:INFO:Hyperparameter search completed
2025-05-03 23:59:49,879:INFO:SubProcess create_model() called ==================================
2025-05-03 23:59:49,880:INFO:Initializing create_model()
2025-05-03 23:59:49,880:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263627323B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 190, 'min_samples_split': 10, 'min_samples_leaf': 2, 'min_impurity_decrease': 0.4, 'max_features': 1.0, 'max_depth': 6, 'criterion': 'absolute_error', 'bootstrap': True})
2025-05-03 23:59:49,880:INFO:Checking exceptions
2025-05-03 23:59:49,880:INFO:Importing libraries
2025-05-03 23:59:49,880:INFO:Copying training dataset
2025-05-03 23:59:49,884:INFO:Defining folds
2025-05-03 23:59:49,884:INFO:Declaring metric variables
2025-05-03 23:59:49,885:INFO:Importing untrained model
2025-05-03 23:59:49,885:INFO:Declaring custom model
2025-05-03 23:59:49,889:INFO:Random Forest Regressor Imported successfully
2025-05-03 23:59:49,889:INFO:Starting cross validation
2025-05-03 23:59:49,890:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:59:52,978:INFO:Calculating mean and std
2025-05-03 23:59:52,978:INFO:Creating metrics dataframe
2025-05-03 23:59:52,980:INFO:Finalizing model
2025-05-03 23:59:53,913:INFO:Uploading results into container
2025-05-03 23:59:53,914:INFO:Uploading model into container now
2025-05-03 23:59:53,914:INFO:_master_model_container: 12
2025-05-03 23:59:53,914:INFO:_display_container: 9
2025-05-03 23:59:53,915:INFO:RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4)
2025-05-03 23:59:53,915:INFO:create_model() successfully completed......................................
2025-05-03 23:59:54,064:INFO:SubProcess create_model() end ==================================
2025-05-03 23:59:54,064:INFO:choose_better activated
2025-05-03 23:59:54,064:INFO:SubProcess create_model() called ==================================
2025-05-03 23:59:54,064:INFO:Initializing create_model()
2025-05-03 23:59:54,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 23:59:54,065:INFO:Checking exceptions
2025-05-03 23:59:54,065:INFO:Importing libraries
2025-05-03 23:59:54,065:INFO:Copying training dataset
2025-05-03 23:59:54,068:INFO:Defining folds
2025-05-03 23:59:54,069:INFO:Declaring metric variables
2025-05-03 23:59:54,069:INFO:Importing untrained model
2025-05-03 23:59:54,069:INFO:Declaring custom model
2025-05-03 23:59:54,070:INFO:Random Forest Regressor Imported successfully
2025-05-03 23:59:54,070:INFO:Starting cross validation
2025-05-03 23:59:54,072:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 23:59:54,637:INFO:Calculating mean and std
2025-05-03 23:59:54,637:INFO:Creating metrics dataframe
2025-05-03 23:59:54,639:INFO:Finalizing model
2025-05-03 23:59:54,820:INFO:Uploading results into container
2025-05-03 23:59:54,821:INFO:Uploading model into container now
2025-05-03 23:59:54,821:INFO:_master_model_container: 13
2025-05-03 23:59:54,821:INFO:_display_container: 10
2025-05-03 23:59:54,821:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-03 23:59:54,821:INFO:create_model() successfully completed......................................
2025-05-03 23:59:54,950:INFO:SubProcess create_model() end ==================================
2025-05-03 23:59:54,951:INFO:RandomForestRegressor(n_jobs=-1, random_state=4) result for RMSE is 9922.6646
2025-05-03 23:59:54,951:INFO:RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4) result for RMSE is 9509.105
2025-05-03 23:59:54,951:INFO:RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4) is best model
2025-05-03 23:59:54,951:INFO:choose_better completed
2025-05-03 23:59:54,952:INFO:Creating Dashboard logs
2025-05-03 23:59:54,952:INFO:Model: Random Forest Regressor
2025-05-03 23:59:54,970:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'absolute_error', 'max_depth': 6, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.4, 'min_samples_leaf': 2, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 190, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-03 23:59:55,085:INFO:Initializing predict_model()
2025-05-03 23:59:55,085:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190E50>)
2025-05-03 23:59:55,085:INFO:Checking exceptions
2025-05-03 23:59:55,085:INFO:Preloading libraries
2025-05-03 23:59:55,176:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:59:55,538:INFO:_master_model_container: 13
2025-05-03 23:59:55,539:INFO:_display_container: 9
2025-05-03 23:59:55,539:INFO:RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4)
2025-05-03 23:59:55,539:INFO:tune_model() successfully completed......................................
2025-05-03 23:59:55,748:INFO:gpu_param set to False
2025-05-03 23:59:55,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:55,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:55,938:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:55,938:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 23:59:55,940:INFO:Initializing predict_model()
2025-05-03 23:59:55,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363184D30>)
2025-05-03 23:59:55,940:INFO:Checking exceptions
2025-05-03 23:59:55,940:INFO:Preloading libraries
2025-05-03 23:59:56,039:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-03 23:59:56,225:INFO:Initializing plot_model()
2025-05-03 23:59:56,225:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, system=True)
2025-05-03 23:59:56,225:INFO:Checking exceptions
2025-05-03 23:59:56,257:INFO:Preloading libraries
2025-05-03 23:59:56,269:INFO:Copying training dataset
2025-05-03 23:59:56,269:INFO:Plot type: feature
2025-05-03 23:59:56,269:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 23:59:56,323:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 23:59:56,459:INFO:Saving 'Feature Importance.png'
2025-05-03 23:59:56,577:INFO:Visual Rendered Successfully
2025-05-03 23:59:56,739:INFO:plot_model() successfully completed......................................
2025-05-03 23:59:56,756:INFO:Initializing plot_model()
2025-05-03 23:59:56,756:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, system=True)
2025-05-03 23:59:56,756:INFO:Checking exceptions
2025-05-03 23:59:56,789:INFO:Preloading libraries
2025-05-03 23:59:56,802:INFO:Copying training dataset
2025-05-03 23:59:56,802:INFO:Plot type: residuals
2025-05-03 23:59:56,802:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-03 23:59:56,999:INFO:Fitting Model
2025-05-03 23:59:56,999:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names
  warnings.warn(

2025-05-03 23:59:57,112:INFO:Scoring test/hold-out set
2025-05-03 23:59:57,244:INFO:Saving 'Residuals.png'
2025-05-03 23:59:57,588:INFO:Visual Rendered Successfully
2025-05-03 23:59:57,730:INFO:plot_model() successfully completed......................................
2025-05-03 23:59:57,742:INFO:Initializing plot_model()
2025-05-03 23:59:57,742:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, system=True)
2025-05-03 23:59:57,742:INFO:Checking exceptions
2025-05-03 23:59:57,771:INFO:Preloading libraries
2025-05-03 23:59:57,782:INFO:Copying training dataset
2025-05-03 23:59:57,782:INFO:Plot type: error
2025-05-03 23:59:57,864:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:59:57,945:INFO:Fitting Model
2025-05-03 23:59:57,945:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names
  warnings.warn(

2025-05-03 23:59:57,945:INFO:Scoring test/hold-out set
2025-05-03 23:59:58,029:INFO:Saving 'Prediction Error.png'
2025-05-03 23:59:58,270:INFO:Visual Rendered Successfully
2025-05-03 23:59:58,411:INFO:plot_model() successfully completed......................................
2025-05-03 23:59:58,423:INFO:Initializing plot_model()
2025-05-03 23:59:58,423:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363295630>, system=True)
2025-05-03 23:59:58,423:INFO:Checking exceptions
2025-05-03 23:59:58,449:INFO:Preloading libraries
2025-05-03 23:59:58,460:INFO:Copying training dataset
2025-05-03 23:59:58,460:INFO:Plot type: cooks
2025-05-03 23:59:58,541:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 23:59:58,621:INFO:Fitting Model
2025-05-03 23:59:58,680:INFO:Saving 'Cooks Distance.png'
2025-05-03 23:59:58,822:INFO:Visual Rendered Successfully
2025-05-03 23:59:59,132:INFO:plot_model() successfully completed......................................
2025-05-03 23:59:59,167:INFO:Initializing save_model()
2025-05-03 23:59:59,167:INFO:save_model(model=RandomForestRegressor(criterion='absolute_error', max_depth=6,
                      min_impurity_decrease=0.4, min_samples_leaf=2,
                      min_samples_split=10, n_estimators=190, n_jobs=-1,
                      random_state=4), model_name=./automl_outputs\automl_4\models\tuned_rf_20250503_235959_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-03 23:59:59,167:INFO:Adding model into prep_pipe
2025-05-03 23:59:59,218:INFO:./automl_outputs\automl_4\models\tuned_rf_20250503_235959_4.pkl saved in current working directory
2025-05-03 23:59:59,228:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder...
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 RandomForestRegressor(criterion='absolute_error', max_depth=6,
                                       min_impurity_decrease=0.4,
                                       min_samples_leaf=2, min_samples_split=10,
                                       n_estimators=190, n_jobs=-1,
                                       random_state=4))])
2025-05-03 23:59:59,228:INFO:save_model() successfully completed......................................
2025-05-04 00:00:35,535:INFO:PyCaret RegressionExperiment
2025-05-04 00:00:35,535:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:00:35,535:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:00:35,535:INFO:version 3.3.2
2025-05-04 00:00:35,535:INFO:Initializing setup()
2025-05-04 00:00:35,535:INFO:self.USI: 7d8b
2025-05-04 00:00:35,536:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:00:35,536:INFO:Checking environment
2025-05-04 00:00:35,536:INFO:python_version: 3.10.11
2025-05-04 00:00:35,536:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:00:35,536:INFO:machine: AMD64
2025-05-04 00:00:35,536:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:00:35,540:INFO:Memory: svmem(total=8403075072, available=894173184, percent=89.4, used=7508901888, free=894173184)
2025-05-04 00:00:35,541:INFO:Physical Core: 6
2025-05-04 00:00:35,541:INFO:Logical Core: 12
2025-05-04 00:00:35,541:INFO:Checking libraries
2025-05-04 00:00:35,541:INFO:System:
2025-05-04 00:00:35,541:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:00:35,541:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:00:35,541:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:00:35,541:INFO:PyCaret required dependencies:
2025-05-04 00:00:35,541:INFO:                 pip: 23.0.1
2025-05-04 00:00:35,541:INFO:          setuptools: 65.5.0
2025-05-04 00:00:35,541:INFO:             pycaret: 3.3.2
2025-05-04 00:00:35,541:INFO:             IPython: 8.36.0
2025-05-04 00:00:35,541:INFO:          ipywidgets: 8.1.6
2025-05-04 00:00:35,541:INFO:                tqdm: 4.67.1
2025-05-04 00:00:35,541:INFO:               numpy: 1.26.4
2025-05-04 00:00:35,541:INFO:              pandas: 1.5.3
2025-05-04 00:00:35,541:INFO:              jinja2: 3.1.6
2025-05-04 00:00:35,541:INFO:               scipy: 1.11.4
2025-05-04 00:00:35,541:INFO:              joblib: 1.3.2
2025-05-04 00:00:35,542:INFO:             sklearn: 1.4.2
2025-05-04 00:00:35,542:INFO:                pyod: 2.0.4
2025-05-04 00:00:35,542:INFO:            imblearn: 0.13.0
2025-05-04 00:00:35,542:INFO:   category_encoders: 2.7.0
2025-05-04 00:00:35,542:INFO:            lightgbm: 4.6.0
2025-05-04 00:00:35,542:INFO:               numba: 0.61.0
2025-05-04 00:00:35,542:INFO:            requests: 2.32.3
2025-05-04 00:00:35,542:INFO:          matplotlib: 3.7.5
2025-05-04 00:00:35,542:INFO:          scikitplot: 0.3.7
2025-05-04 00:00:35,542:INFO:         yellowbrick: 1.5
2025-05-04 00:00:35,542:INFO:              plotly: 5.24.1
2025-05-04 00:00:35,542:INFO:    plotly-resampler: Not installed
2025-05-04 00:00:35,542:INFO:             kaleido: 0.2.1
2025-05-04 00:00:35,542:INFO:           schemdraw: 0.15
2025-05-04 00:00:35,542:INFO:         statsmodels: 0.14.4
2025-05-04 00:00:35,542:INFO:              sktime: 0.26.0
2025-05-04 00:00:35,542:INFO:               tbats: 1.1.3
2025-05-04 00:00:35,542:INFO:            pmdarima: 2.0.4
2025-05-04 00:00:35,542:INFO:              psutil: 7.0.0
2025-05-04 00:00:35,543:INFO:          markupsafe: 3.0.2
2025-05-04 00:00:35,543:INFO:             pickle5: Not installed
2025-05-04 00:00:35,543:INFO:         cloudpickle: 2.2.1
2025-05-04 00:00:35,543:INFO:         deprecation: 2.1.0
2025-05-04 00:00:35,543:INFO:              xxhash: 3.5.0
2025-05-04 00:00:35,543:INFO:           wurlitzer: Not installed
2025-05-04 00:00:35,543:INFO:PyCaret optional dependencies:
2025-05-04 00:00:35,543:INFO:                shap: 0.47.2
2025-05-04 00:00:35,543:INFO:           interpret: Not installed
2025-05-04 00:00:35,543:INFO:                umap: Not installed
2025-05-04 00:00:35,543:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:00:35,543:INFO:  explainerdashboard: Not installed
2025-05-04 00:00:35,543:INFO:             autoviz: Not installed
2025-05-04 00:00:35,544:INFO:           fairlearn: Not installed
2025-05-04 00:00:35,544:INFO:          deepchecks: Not installed
2025-05-04 00:00:35,544:INFO:             xgboost: Not installed
2025-05-04 00:00:35,544:INFO:            catboost: Not installed
2025-05-04 00:00:35,544:INFO:              kmodes: Not installed
2025-05-04 00:00:35,544:INFO:             mlxtend: Not installed
2025-05-04 00:00:35,544:INFO:       statsforecast: Not installed
2025-05-04 00:00:35,544:INFO:        tune_sklearn: Not installed
2025-05-04 00:00:35,544:INFO:                 ray: Not installed
2025-05-04 00:00:35,544:INFO:            hyperopt: Not installed
2025-05-04 00:00:35,544:INFO:              optuna: 4.3.0
2025-05-04 00:00:35,544:INFO:               skopt: Not installed
2025-05-04 00:00:35,544:INFO:              mlflow: 1.30.0
2025-05-04 00:00:35,544:INFO:              gradio: Not installed
2025-05-04 00:00:35,544:INFO:             fastapi: 0.115.12
2025-05-04 00:00:35,544:INFO:             uvicorn: 0.34.2
2025-05-04 00:00:35,544:INFO:              m2cgen: Not installed
2025-05-04 00:00:35,544:INFO:           evidently: 0.7.3
2025-05-04 00:00:35,544:INFO:               fugue: Not installed
2025-05-04 00:00:35,544:INFO:           streamlit: Not installed
2025-05-04 00:00:35,544:INFO:             prophet: Not installed
2025-05-04 00:00:35,545:INFO:None
2025-05-04 00:00:35,545:INFO:Set up data.
2025-05-04 00:00:35,551:INFO:Set up folding strategy.
2025-05-04 00:00:35,551:INFO:Set up train/test split.
2025-05-04 00:00:35,555:INFO:Set up index.
2025-05-04 00:00:35,556:INFO:Assigning column types.
2025-05-04 00:00:35,559:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:00:35,650:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,650:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,759:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,759:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,759:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:00:35,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,853:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,966:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,967:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:35,967:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:00:36,108:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,108:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,207:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,207:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,207:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:00:36,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,394:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,394:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:00:36,495:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,595:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,595:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,596:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:00:36,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,790:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,790:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:36,791:INFO:Preparing preprocessing pipeline...
2025-05-04 00:00:36,791:INFO:Set up simple imputation.
2025-05-04 00:00:36,794:INFO:Set up encoding of categorical features.
2025-05-04 00:00:36,794:INFO:Set up column name cleaning.
2025-05-04 00:00:36,862:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:00:36,869:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:00:36,869:INFO:Creating final display dataframe.
2025-05-04 00:00:37,064:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                7d8b
2025-05-04 00:00:37,160:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:37,160:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:37,258:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:37,258:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:37,258:INFO:Logging experiment in loggers
2025-05-04 00:00:37,351:INFO:SubProcess save_model() called ==================================
2025-05-04 00:00:37,367:INFO:Initializing save_model()
2025-05-04 00:00:37,367:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpg809o_k5\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:00:37,367:INFO:Adding model into prep_pipe
2025-05-04 00:00:37,367:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:00:37,371:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpg809o_k5\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:00:37,380:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:00:37,380:INFO:save_model() successfully completed......................................
2025-05-04 00:00:37,557:INFO:SubProcess save_model() end ==================================
2025-05-04 00:00:37,574:INFO:setup() successfully completed in 1.72s...............
2025-05-04 00:00:37,650:INFO:Initializing create_model()
2025-05-04 00:00:37,650:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:00:37,650:INFO:Checking exceptions
2025-05-04 00:00:37,650:INFO:Importing libraries
2025-05-04 00:00:37,651:INFO:Copying training dataset
2025-05-04 00:00:37,654:INFO:Defining folds
2025-05-04 00:00:37,655:INFO:Declaring metric variables
2025-05-04 00:00:37,655:INFO:Importing untrained model
2025-05-04 00:00:37,655:INFO:Linear Regression Imported successfully
2025-05-04 00:00:37,655:INFO:Starting cross validation
2025-05-04 00:00:37,657:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:00:37,820:INFO:Calculating mean and std
2025-05-04 00:00:37,820:INFO:Creating metrics dataframe
2025-05-04 00:00:37,820:INFO:Finalizing model
2025-05-04 00:00:37,869:INFO:Creating Dashboard logs
2025-05-04 00:00:37,869:INFO:Model: Linear Regression
2025-05-04 00:00:37,894:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:00:38,000:INFO:Initializing predict_model()
2025-05-04 00:00:38,000:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190670>)
2025-05-04 00:00:38,000:INFO:Checking exceptions
2025-05-04 00:00:38,000:INFO:Preloading libraries
2025-05-04 00:00:38,106:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:00:38,869:INFO:Uploading results into container
2025-05-04 00:00:38,870:INFO:Uploading model into container now
2025-05-04 00:00:38,871:INFO:_master_model_container: 11
2025-05-04 00:00:38,871:INFO:_display_container: 8
2025-05-04 00:00:38,871:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:00:38,871:INFO:create_model() successfully completed......................................
2025-05-04 00:00:39,069:INFO:Initializing tune_model()
2025-05-04 00:00:39,069:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>)
2025-05-04 00:00:39,069:INFO:Checking exceptions
2025-05-04 00:00:39,072:INFO:Copying training dataset
2025-05-04 00:00:39,075:INFO:Checking base model
2025-05-04 00:00:39,075:INFO:Base model : Linear Regression
2025-05-04 00:00:39,075:INFO:Declaring metric variables
2025-05-04 00:00:39,075:INFO:Defining Hyperparameters
2025-05-04 00:00:39,075:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:00:39,264:INFO:Tuning with n_jobs=-1
2025-05-04 00:00:39,264:INFO:Initializing GridSearchCV
2025-05-04 00:00:39,425:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:00:39,425:INFO:Hyperparameter search completed
2025-05-04 00:00:39,425:INFO:SubProcess create_model() called ==================================
2025-05-04 00:00:39,425:INFO:Initializing create_model()
2025-05-04 00:00:39,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D65720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:00:39,425:INFO:Checking exceptions
2025-05-04 00:00:39,425:INFO:Importing libraries
2025-05-04 00:00:39,425:INFO:Copying training dataset
2025-05-04 00:00:39,428:INFO:Defining folds
2025-05-04 00:00:39,428:INFO:Declaring metric variables
2025-05-04 00:00:39,428:INFO:Importing untrained model
2025-05-04 00:00:39,428:INFO:Declaring custom model
2025-05-04 00:00:39,429:INFO:Linear Regression Imported successfully
2025-05-04 00:00:39,429:INFO:Starting cross validation
2025-05-04 00:00:39,430:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:00:39,533:INFO:Calculating mean and std
2025-05-04 00:00:39,534:INFO:Creating metrics dataframe
2025-05-04 00:00:39,534:INFO:Finalizing model
2025-05-04 00:00:39,581:INFO:Uploading results into container
2025-05-04 00:00:39,581:INFO:Uploading model into container now
2025-05-04 00:00:39,581:INFO:_master_model_container: 12
2025-05-04 00:00:39,581:INFO:_display_container: 9
2025-05-04 00:00:39,581:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:00:39,581:INFO:create_model() successfully completed......................................
2025-05-04 00:00:39,744:INFO:SubProcess create_model() end ==================================
2025-05-04 00:00:39,744:INFO:choose_better activated
2025-05-04 00:00:39,745:INFO:SubProcess create_model() called ==================================
2025-05-04 00:00:39,745:INFO:Initializing create_model()
2025-05-04 00:00:39,745:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:00:39,745:INFO:Checking exceptions
2025-05-04 00:00:39,746:INFO:Importing libraries
2025-05-04 00:00:39,746:INFO:Copying training dataset
2025-05-04 00:00:39,749:INFO:Defining folds
2025-05-04 00:00:39,749:INFO:Declaring metric variables
2025-05-04 00:00:39,749:INFO:Importing untrained model
2025-05-04 00:00:39,749:INFO:Declaring custom model
2025-05-04 00:00:39,749:INFO:Linear Regression Imported successfully
2025-05-04 00:00:39,749:INFO:Starting cross validation
2025-05-04 00:00:39,751:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:00:39,880:INFO:Calculating mean and std
2025-05-04 00:00:39,880:INFO:Creating metrics dataframe
2025-05-04 00:00:39,880:INFO:Finalizing model
2025-05-04 00:00:39,911:INFO:Uploading results into container
2025-05-04 00:00:39,911:INFO:Uploading model into container now
2025-05-04 00:00:39,911:INFO:_master_model_container: 13
2025-05-04 00:00:39,911:INFO:_display_container: 10
2025-05-04 00:00:39,911:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:00:39,911:INFO:create_model() successfully completed......................................
2025-05-04 00:00:40,064:INFO:SubProcess create_model() end ==================================
2025-05-04 00:00:40,064:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:00:40,064:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:00:40,064:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:00:40,064:INFO:choose_better completed
2025-05-04 00:00:40,065:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:00:40,065:INFO:Creating Dashboard logs
2025-05-04 00:00:40,065:INFO:Model: Linear Regression
2025-05-04 00:00:40,087:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:00:40,178:INFO:Initializing predict_model()
2025-05-04 00:00:40,178:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363191C60>)
2025-05-04 00:00:40,178:INFO:Checking exceptions
2025-05-04 00:00:40,178:INFO:Preloading libraries
2025-05-04 00:00:40,228:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:00:40,645:INFO:_master_model_container: 13
2025-05-04 00:00:40,645:INFO:_display_container: 9
2025-05-04 00:00:40,645:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:00:40,645:INFO:tune_model() successfully completed......................................
2025-05-04 00:00:40,879:INFO:gpu_param set to False
2025-05-04 00:00:40,973:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:40,973:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:41,081:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:41,081:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:00:41,081:INFO:Initializing predict_model()
2025-05-04 00:00:41,081:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263631913F0>)
2025-05-04 00:00:41,081:INFO:Checking exceptions
2025-05-04 00:00:41,081:INFO:Preloading libraries
2025-05-04 00:00:41,150:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:00:41,316:INFO:Initializing plot_model()
2025-05-04 00:00:41,316:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, system=True)
2025-05-04 00:00:41,316:INFO:Checking exceptions
2025-05-04 00:00:41,332:INFO:Preloading libraries
2025-05-04 00:00:41,332:INFO:Copying training dataset
2025-05-04 00:00:41,332:INFO:Plot type: feature
2025-05-04 00:00:41,378:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:00:41,575:INFO:Saving 'Feature Importance.png'
2025-05-04 00:00:41,697:INFO:Visual Rendered Successfully
2025-05-04 00:00:41,862:INFO:plot_model() successfully completed......................................
2025-05-04 00:00:41,883:INFO:Initializing plot_model()
2025-05-04 00:00:41,883:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, system=True)
2025-05-04 00:00:41,883:INFO:Checking exceptions
2025-05-04 00:00:41,883:INFO:Preloading libraries
2025-05-04 00:00:41,883:INFO:Copying training dataset
2025-05-04 00:00:41,883:INFO:Plot type: residuals
2025-05-04 00:00:41,883:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:00:42,150:INFO:Fitting Model
2025-05-04 00:00:42,150:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:00:42,194:INFO:Scoring test/hold-out set
2025-05-04 00:00:42,241:INFO:Saving 'Residuals.png'
2025-05-04 00:00:42,611:INFO:Visual Rendered Successfully
2025-05-04 00:00:42,779:INFO:plot_model() successfully completed......................................
2025-05-04 00:00:42,800:INFO:Initializing plot_model()
2025-05-04 00:00:42,800:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, system=True)
2025-05-04 00:00:42,800:INFO:Checking exceptions
2025-05-04 00:00:42,801:INFO:Preloading libraries
2025-05-04 00:00:42,801:INFO:Copying training dataset
2025-05-04 00:00:42,801:INFO:Plot type: error
2025-05-04 00:00:42,890:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:00:42,973:INFO:Fitting Model
2025-05-04 00:00:42,973:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:00:42,973:INFO:Scoring test/hold-out set
2025-05-04 00:00:42,996:INFO:Saving 'Prediction Error.png'
2025-05-04 00:00:43,195:INFO:Visual Rendered Successfully
2025-05-04 00:00:43,369:INFO:plot_model() successfully completed......................................
2025-05-04 00:00:43,383:INFO:Initializing plot_model()
2025-05-04 00:00:43,383:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BD63E0>, system=True)
2025-05-04 00:00:43,383:INFO:Checking exceptions
2025-05-04 00:00:43,390:INFO:Preloading libraries
2025-05-04 00:00:43,390:INFO:Copying training dataset
2025-05-04 00:00:43,390:INFO:Plot type: cooks
2025-05-04 00:00:43,480:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:00:43,581:INFO:Fitting Model
2025-05-04 00:00:43,649:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:00:43,822:INFO:Visual Rendered Successfully
2025-05-04 00:00:44,021:INFO:plot_model() successfully completed......................................
2025-05-04 00:00:44,065:INFO:Initializing save_model()
2025-05-04 00:00:44,066:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_000044_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:00:44,066:INFO:Adding model into prep_pipe
2025-05-04 00:00:44,071:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_000044_4.pkl saved in current working directory
2025-05-04 00:00:44,079:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:00:44,079:INFO:save_model() successfully completed......................................
2025-05-04 00:04:21,254:INFO:PyCaret RegressionExperiment
2025-05-04 00:04:21,254:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:04:21,254:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:04:21,254:INFO:version 3.3.2
2025-05-04 00:04:21,254:INFO:Initializing setup()
2025-05-04 00:04:21,254:INFO:self.USI: 2169
2025-05-04 00:04:21,254:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:04:21,254:INFO:Checking environment
2025-05-04 00:04:21,254:INFO:python_version: 3.10.11
2025-05-04 00:04:21,254:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:04:21,255:INFO:machine: AMD64
2025-05-04 00:04:21,255:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:04:21,259:INFO:Memory: svmem(total=8403075072, available=1042575360, percent=87.6, used=7360499712, free=1042575360)
2025-05-04 00:04:21,259:INFO:Physical Core: 6
2025-05-04 00:04:21,259:INFO:Logical Core: 12
2025-05-04 00:04:21,259:INFO:Checking libraries
2025-05-04 00:04:21,259:INFO:System:
2025-05-04 00:04:21,259:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:04:21,260:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:04:21,260:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:04:21,260:INFO:PyCaret required dependencies:
2025-05-04 00:04:21,260:INFO:                 pip: 23.0.1
2025-05-04 00:04:21,260:INFO:          setuptools: 65.5.0
2025-05-04 00:04:21,260:INFO:             pycaret: 3.3.2
2025-05-04 00:04:21,260:INFO:             IPython: 8.36.0
2025-05-04 00:04:21,260:INFO:          ipywidgets: 8.1.6
2025-05-04 00:04:21,260:INFO:                tqdm: 4.67.1
2025-05-04 00:04:21,260:INFO:               numpy: 1.26.4
2025-05-04 00:04:21,260:INFO:              pandas: 1.5.3
2025-05-04 00:04:21,260:INFO:              jinja2: 3.1.6
2025-05-04 00:04:21,260:INFO:               scipy: 1.11.4
2025-05-04 00:04:21,260:INFO:              joblib: 1.3.2
2025-05-04 00:04:21,260:INFO:             sklearn: 1.4.2
2025-05-04 00:04:21,260:INFO:                pyod: 2.0.4
2025-05-04 00:04:21,260:INFO:            imblearn: 0.13.0
2025-05-04 00:04:21,261:INFO:   category_encoders: 2.7.0
2025-05-04 00:04:21,261:INFO:            lightgbm: 4.6.0
2025-05-04 00:04:21,261:INFO:               numba: 0.61.0
2025-05-04 00:04:21,261:INFO:            requests: 2.32.3
2025-05-04 00:04:21,261:INFO:          matplotlib: 3.7.5
2025-05-04 00:04:21,261:INFO:          scikitplot: 0.3.7
2025-05-04 00:04:21,261:INFO:         yellowbrick: 1.5
2025-05-04 00:04:21,261:INFO:              plotly: 5.24.1
2025-05-04 00:04:21,261:INFO:    plotly-resampler: Not installed
2025-05-04 00:04:21,261:INFO:             kaleido: 0.2.1
2025-05-04 00:04:21,261:INFO:           schemdraw: 0.15
2025-05-04 00:04:21,261:INFO:         statsmodels: 0.14.4
2025-05-04 00:04:21,261:INFO:              sktime: 0.26.0
2025-05-04 00:04:21,261:INFO:               tbats: 1.1.3
2025-05-04 00:04:21,261:INFO:            pmdarima: 2.0.4
2025-05-04 00:04:21,261:INFO:              psutil: 7.0.0
2025-05-04 00:04:21,261:INFO:          markupsafe: 3.0.2
2025-05-04 00:04:21,261:INFO:             pickle5: Not installed
2025-05-04 00:04:21,262:INFO:         cloudpickle: 2.2.1
2025-05-04 00:04:21,262:INFO:         deprecation: 2.1.0
2025-05-04 00:04:21,262:INFO:              xxhash: 3.5.0
2025-05-04 00:04:21,262:INFO:           wurlitzer: Not installed
2025-05-04 00:04:21,262:INFO:PyCaret optional dependencies:
2025-05-04 00:04:21,262:INFO:                shap: 0.47.2
2025-05-04 00:04:21,262:INFO:           interpret: Not installed
2025-05-04 00:04:21,262:INFO:                umap: Not installed
2025-05-04 00:04:21,262:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:04:21,262:INFO:  explainerdashboard: Not installed
2025-05-04 00:04:21,262:INFO:             autoviz: Not installed
2025-05-04 00:04:21,262:INFO:           fairlearn: Not installed
2025-05-04 00:04:21,262:INFO:          deepchecks: Not installed
2025-05-04 00:04:21,262:INFO:             xgboost: Not installed
2025-05-04 00:04:21,262:INFO:            catboost: Not installed
2025-05-04 00:04:21,262:INFO:              kmodes: Not installed
2025-05-04 00:04:21,262:INFO:             mlxtend: Not installed
2025-05-04 00:04:21,263:INFO:       statsforecast: Not installed
2025-05-04 00:04:21,263:INFO:        tune_sklearn: Not installed
2025-05-04 00:04:21,263:INFO:                 ray: Not installed
2025-05-04 00:04:21,263:INFO:            hyperopt: Not installed
2025-05-04 00:04:21,263:INFO:              optuna: 4.3.0
2025-05-04 00:04:21,263:INFO:               skopt: Not installed
2025-05-04 00:04:21,263:INFO:              mlflow: 1.30.0
2025-05-04 00:04:21,263:INFO:              gradio: Not installed
2025-05-04 00:04:21,263:INFO:             fastapi: 0.115.12
2025-05-04 00:04:21,263:INFO:             uvicorn: 0.34.2
2025-05-04 00:04:21,263:INFO:              m2cgen: Not installed
2025-05-04 00:04:21,263:INFO:           evidently: 0.7.3
2025-05-04 00:04:21,263:INFO:               fugue: Not installed
2025-05-04 00:04:21,263:INFO:           streamlit: Not installed
2025-05-04 00:04:21,263:INFO:             prophet: Not installed
2025-05-04 00:04:21,263:INFO:None
2025-05-04 00:04:21,263:INFO:Set up data.
2025-05-04 00:04:21,270:INFO:Set up folding strategy.
2025-05-04 00:04:21,270:INFO:Set up train/test split.
2025-05-04 00:04:21,275:INFO:Set up index.
2025-05-04 00:04:21,275:INFO:Assigning column types.
2025-05-04 00:04:21,278:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:04:21,278:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,282:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,286:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,338:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,381:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,382:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,382:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,382:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,387:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,392:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,446:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,485:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,486:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,486:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:04:21,490:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,494:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,551:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,597:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,597:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,597:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,600:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,607:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,663:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,705:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,706:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,706:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,706:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:04:21,718:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,774:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,821:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,829:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,886:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,930:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:21,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:21,931:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:04:21,997:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,040:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,040:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,040:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,107:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,148:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,149:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,149:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,149:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:04:22,211:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,253:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,253:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,315:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:04:22,357:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,357:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,357:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:04:22,461:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,461:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,567:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,568:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,569:INFO:Preparing preprocessing pipeline...
2025-05-04 00:04:22,569:INFO:Set up simple imputation.
2025-05-04 00:04:22,571:INFO:Set up encoding of categorical features.
2025-05-04 00:04:22,571:INFO:Set up column name cleaning.
2025-05-04 00:04:22,651:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:04:22,659:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:04:22,659:INFO:Creating final display dataframe.
2025-05-04 00:04:22,892:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                2169
2025-05-04 00:04:22,996:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:22,996:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:23,100:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:23,100:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:04:23,101:INFO:Logging experiment in loggers
2025-05-04 00:04:23,199:INFO:SubProcess save_model() called ==================================
2025-05-04 00:04:23,215:INFO:Initializing save_model()
2025-05-04 00:04:23,215:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpzutl7b_t\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:04:23,215:INFO:Adding model into prep_pipe
2025-05-04 00:04:23,215:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:04:23,220:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpzutl7b_t\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:04:23,229:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:04:23,229:INFO:save_model() successfully completed......................................
2025-05-04 00:04:23,445:INFO:SubProcess save_model() end ==================================
2025-05-04 00:04:23,466:INFO:setup() successfully completed in 1.85s...............
2025-05-04 00:04:23,543:INFO:Initializing compare_models()
2025-05-04 00:04:23,543:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-04 00:04:23,543:INFO:Checking exceptions
2025-05-04 00:04:23,545:INFO:Preparing display monitor
2025-05-04 00:04:23,547:INFO:Initializing Linear Regression
2025-05-04 00:04:23,547:INFO:Total runtime is 0.0 minutes
2025-05-04 00:04:23,547:INFO:SubProcess create_model() called ==================================
2025-05-04 00:04:23,547:INFO:Initializing create_model()
2025-05-04 00:04:23,547:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362759420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:23,547:INFO:Checking exceptions
2025-05-04 00:04:23,547:INFO:Importing libraries
2025-05-04 00:04:23,547:INFO:Copying training dataset
2025-05-04 00:04:23,551:INFO:Defining folds
2025-05-04 00:04:23,551:INFO:Declaring metric variables
2025-05-04 00:04:23,551:INFO:Importing untrained model
2025-05-04 00:04:23,551:INFO:Linear Regression Imported successfully
2025-05-04 00:04:23,551:INFO:Starting cross validation
2025-05-04 00:04:23,552:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:23,725:INFO:Calculating mean and std
2025-05-04 00:04:23,725:INFO:Creating metrics dataframe
2025-05-04 00:04:23,725:INFO:Uploading results into container
2025-05-04 00:04:23,725:INFO:Uploading model into container now
2025-05-04 00:04:23,725:INFO:_master_model_container: 1
2025-05-04 00:04:23,725:INFO:_display_container: 2
2025-05-04 00:04:23,725:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:04:23,725:INFO:create_model() successfully completed......................................
2025-05-04 00:04:23,899:INFO:SubProcess create_model() end ==================================
2025-05-04 00:04:23,899:INFO:Creating metrics dataframe
2025-05-04 00:04:23,905:INFO:Initializing Ridge Regression
2025-05-04 00:04:23,905:INFO:Total runtime is 0.005973609288533529 minutes
2025-05-04 00:04:23,905:INFO:SubProcess create_model() called ==================================
2025-05-04 00:04:23,905:INFO:Initializing create_model()
2025-05-04 00:04:23,905:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362759420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:23,905:INFO:Checking exceptions
2025-05-04 00:04:23,905:INFO:Importing libraries
2025-05-04 00:04:23,905:INFO:Copying training dataset
2025-05-04 00:04:23,911:INFO:Defining folds
2025-05-04 00:04:23,911:INFO:Declaring metric variables
2025-05-04 00:04:23,911:INFO:Importing untrained model
2025-05-04 00:04:23,911:INFO:Ridge Regression Imported successfully
2025-05-04 00:04:23,912:INFO:Starting cross validation
2025-05-04 00:04:23,913:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:24,150:INFO:Calculating mean and std
2025-05-04 00:04:24,150:INFO:Creating metrics dataframe
2025-05-04 00:04:24,153:INFO:Uploading results into container
2025-05-04 00:04:24,154:INFO:Uploading model into container now
2025-05-04 00:04:24,154:INFO:_master_model_container: 2
2025-05-04 00:04:24,154:INFO:_display_container: 2
2025-05-04 00:04:24,154:INFO:Ridge(random_state=4)
2025-05-04 00:04:24,155:INFO:create_model() successfully completed......................................
2025-05-04 00:04:24,433:INFO:SubProcess create_model() end ==================================
2025-05-04 00:04:24,434:INFO:Creating metrics dataframe
2025-05-04 00:04:24,441:INFO:Initializing Light Gradient Boosting Machine
2025-05-04 00:04:24,442:INFO:Total runtime is 0.014921534061431884 minutes
2025-05-04 00:04:24,442:INFO:SubProcess create_model() called ==================================
2025-05-04 00:04:24,442:INFO:Initializing create_model()
2025-05-04 00:04:24,442:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362759420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:24,442:INFO:Checking exceptions
2025-05-04 00:04:24,442:INFO:Importing libraries
2025-05-04 00:04:24,442:INFO:Copying training dataset
2025-05-04 00:04:24,445:INFO:Defining folds
2025-05-04 00:04:24,445:INFO:Declaring metric variables
2025-05-04 00:04:24,446:INFO:Importing untrained model
2025-05-04 00:04:24,447:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 00:04:24,447:INFO:Starting cross validation
2025-05-04 00:04:24,448:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:24,912:INFO:Calculating mean and std
2025-05-04 00:04:24,912:INFO:Creating metrics dataframe
2025-05-04 00:04:24,912:INFO:Uploading results into container
2025-05-04 00:04:24,912:INFO:Uploading model into container now
2025-05-04 00:04:24,912:INFO:_master_model_container: 3
2025-05-04 00:04:24,912:INFO:_display_container: 2
2025-05-04 00:04:24,912:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:24,912:INFO:create_model() successfully completed......................................
2025-05-04 00:04:25,087:INFO:SubProcess create_model() end ==================================
2025-05-04 00:04:25,087:INFO:Creating metrics dataframe
2025-05-04 00:04:25,091:INFO:Initializing Random Forest Regressor
2025-05-04 00:04:25,091:INFO:Total runtime is 0.02573314110438029 minutes
2025-05-04 00:04:25,091:INFO:SubProcess create_model() called ==================================
2025-05-04 00:04:25,091:INFO:Initializing create_model()
2025-05-04 00:04:25,091:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362759420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:25,092:INFO:Checking exceptions
2025-05-04 00:04:25,092:INFO:Importing libraries
2025-05-04 00:04:25,092:INFO:Copying training dataset
2025-05-04 00:04:25,095:INFO:Defining folds
2025-05-04 00:04:25,095:INFO:Declaring metric variables
2025-05-04 00:04:25,095:INFO:Importing untrained model
2025-05-04 00:04:25,095:INFO:Random Forest Regressor Imported successfully
2025-05-04 00:04:25,095:INFO:Starting cross validation
2025-05-04 00:04:25,096:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:25,650:INFO:Calculating mean and std
2025-05-04 00:04:25,650:INFO:Creating metrics dataframe
2025-05-04 00:04:25,654:INFO:Uploading results into container
2025-05-04 00:04:25,655:INFO:Uploading model into container now
2025-05-04 00:04:25,655:INFO:_master_model_container: 4
2025-05-04 00:04:25,655:INFO:_display_container: 2
2025-05-04 00:04:25,656:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:25,656:INFO:create_model() successfully completed......................................
2025-05-04 00:04:25,828:INFO:SubProcess create_model() end ==================================
2025-05-04 00:04:25,828:INFO:Creating metrics dataframe
2025-05-04 00:04:25,828:INFO:Initializing Extra Trees Regressor
2025-05-04 00:04:25,828:INFO:Total runtime is 0.03802154858907064 minutes
2025-05-04 00:04:25,828:INFO:SubProcess create_model() called ==================================
2025-05-04 00:04:25,828:INFO:Initializing create_model()
2025-05-04 00:04:25,828:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362759420>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:25,828:INFO:Checking exceptions
2025-05-04 00:04:25,828:INFO:Importing libraries
2025-05-04 00:04:25,828:INFO:Copying training dataset
2025-05-04 00:04:25,835:INFO:Defining folds
2025-05-04 00:04:25,835:INFO:Declaring metric variables
2025-05-04 00:04:25,835:INFO:Importing untrained model
2025-05-04 00:04:25,835:INFO:Extra Trees Regressor Imported successfully
2025-05-04 00:04:25,835:INFO:Starting cross validation
2025-05-04 00:04:25,835:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:26,265:INFO:Calculating mean and std
2025-05-04 00:04:26,265:INFO:Creating metrics dataframe
2025-05-04 00:04:26,265:INFO:Uploading results into container
2025-05-04 00:04:26,265:INFO:Uploading model into container now
2025-05-04 00:04:26,265:INFO:_master_model_container: 5
2025-05-04 00:04:26,265:INFO:_display_container: 2
2025-05-04 00:04:26,265:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:26,265:INFO:create_model() successfully completed......................................
2025-05-04 00:04:26,435:INFO:SubProcess create_model() end ==================================
2025-05-04 00:04:26,435:INFO:Creating metrics dataframe
2025-05-04 00:04:26,442:INFO:Initializing create_model()
2025-05-04 00:04:26,442:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=Ridge(random_state=4), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:26,442:INFO:Checking exceptions
2025-05-04 00:04:26,443:INFO:Importing libraries
2025-05-04 00:04:26,443:INFO:Copying training dataset
2025-05-04 00:04:26,446:INFO:Defining folds
2025-05-04 00:04:26,446:INFO:Declaring metric variables
2025-05-04 00:04:26,446:INFO:Importing untrained model
2025-05-04 00:04:26,446:INFO:Declaring custom model
2025-05-04 00:04:26,447:INFO:Ridge Regression Imported successfully
2025-05-04 00:04:26,448:INFO:Cross validation set to False
2025-05-04 00:04:26,448:INFO:Fitting Model
2025-05-04 00:04:26,493:INFO:Ridge(random_state=4)
2025-05-04 00:04:26,493:INFO:create_model() successfully completed......................................
2025-05-04 00:04:26,692:INFO:Creating Dashboard logs
2025-05-04 00:04:26,692:INFO:Model: Ridge Regression
2025-05-04 00:04:26,713:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 00:04:26,807:INFO:Initializing predict_model()
2025-05-04 00:04:26,808:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362AAAD40>)
2025-05-04 00:04:26,808:INFO:Checking exceptions
2025-05-04 00:04:26,808:INFO:Preloading libraries
2025-05-04 00:04:26,913:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:27,316:INFO:Creating Dashboard logs
2025-05-04 00:04:27,316:INFO:Model: Linear Regression
2025-05-04 00:04:27,347:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:04:27,877:INFO:Creating Dashboard logs
2025-05-04 00:04:27,877:INFO:Model: Random Forest Regressor
2025-05-04 00:04:27,909:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-04 00:04:28,378:INFO:Creating Dashboard logs
2025-05-04 00:04:28,378:INFO:Model: Light Gradient Boosting Machine
2025-05-04 00:04:28,410:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 00:04:28,706:INFO:Creating Dashboard logs
2025-05-04 00:04:28,706:INFO:Model: Extra Trees Regressor
2025-05-04 00:04:28,737:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-04 00:04:29,004:INFO:_master_model_container: 5
2025-05-04 00:04:29,004:INFO:_display_container: 2
2025-05-04 00:04:29,004:INFO:Ridge(random_state=4)
2025-05-04 00:04:29,004:INFO:compare_models() successfully completed......................................
2025-05-04 00:04:29,098:INFO:Initializing create_model()
2025-05-04 00:04:29,098:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:29,098:INFO:Checking exceptions
2025-05-04 00:04:29,098:INFO:Importing libraries
2025-05-04 00:04:29,098:INFO:Copying training dataset
2025-05-04 00:04:29,098:INFO:Defining folds
2025-05-04 00:04:29,098:INFO:Declaring metric variables
2025-05-04 00:04:29,098:INFO:Importing untrained model
2025-05-04 00:04:29,098:INFO:Linear Regression Imported successfully
2025-05-04 00:04:29,098:INFO:Starting cross validation
2025-05-04 00:04:29,098:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:29,237:INFO:Calculating mean and std
2025-05-04 00:04:29,237:INFO:Creating metrics dataframe
2025-05-04 00:04:29,237:INFO:Finalizing model
2025-05-04 00:04:29,272:INFO:Creating Dashboard logs
2025-05-04 00:04:29,272:INFO:Model: Linear Regression
2025-05-04 00:04:29,299:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:04:29,379:INFO:Initializing predict_model()
2025-05-04 00:04:29,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362AAADD0>)
2025-05-04 00:04:29,379:INFO:Checking exceptions
2025-05-04 00:04:29,379:INFO:Preloading libraries
2025-05-04 00:04:29,491:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:29,854:INFO:Uploading results into container
2025-05-04 00:04:29,856:INFO:Uploading model into container now
2025-05-04 00:04:29,856:INFO:_master_model_container: 6
2025-05-04 00:04:29,856:INFO:_display_container: 3
2025-05-04 00:04:29,856:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:04:29,856:INFO:create_model() successfully completed......................................
2025-05-04 00:04:30,071:INFO:Initializing plot_model()
2025-05-04 00:04:30,072:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, system=True)
2025-05-04 00:04:30,072:INFO:Checking exceptions
2025-05-04 00:04:30,073:INFO:Preloading libraries
2025-05-04 00:04:30,074:INFO:Copying training dataset
2025-05-04 00:04:30,074:INFO:Plot type: feature
2025-05-04 00:04:30,163:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:04:30,256:INFO:Saving 'Feature Importance.png'
2025-05-04 00:04:30,354:INFO:Visual Rendered Successfully
2025-05-04 00:04:30,488:INFO:plot_model() successfully completed......................................
2025-05-04 00:04:30,570:INFO:Initializing create_model()
2025-05-04 00:04:30,570:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:30,570:INFO:Checking exceptions
2025-05-04 00:04:30,571:INFO:Importing libraries
2025-05-04 00:04:30,571:INFO:Copying training dataset
2025-05-04 00:04:30,575:INFO:Defining folds
2025-05-04 00:04:30,575:INFO:Declaring metric variables
2025-05-04 00:04:30,575:INFO:Importing untrained model
2025-05-04 00:04:30,575:INFO:Ridge Regression Imported successfully
2025-05-04 00:04:30,575:INFO:Starting cross validation
2025-05-04 00:04:30,576:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:30,706:INFO:Calculating mean and std
2025-05-04 00:04:30,706:INFO:Creating metrics dataframe
2025-05-04 00:04:30,706:INFO:Finalizing model
2025-05-04 00:04:30,737:INFO:Creating Dashboard logs
2025-05-04 00:04:30,737:INFO:Model: Ridge Regression
2025-05-04 00:04:30,752:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 4, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 00:04:30,847:INFO:Initializing predict_model()
2025-05-04 00:04:30,847:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=Ridge(random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362919F30>)
2025-05-04 00:04:30,847:INFO:Checking exceptions
2025-05-04 00:04:30,847:INFO:Preloading libraries
2025-05-04 00:04:30,949:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:31,257:INFO:Uploading results into container
2025-05-04 00:04:31,257:INFO:Uploading model into container now
2025-05-04 00:04:31,257:INFO:_master_model_container: 7
2025-05-04 00:04:31,257:INFO:_display_container: 4
2025-05-04 00:04:31,257:INFO:Ridge(random_state=4)
2025-05-04 00:04:31,257:INFO:create_model() successfully completed......................................
2025-05-04 00:04:31,410:INFO:Initializing plot_model()
2025-05-04 00:04:31,410:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, system=True)
2025-05-04 00:04:31,410:INFO:Checking exceptions
2025-05-04 00:04:31,410:INFO:Preloading libraries
2025-05-04 00:04:31,425:INFO:Copying training dataset
2025-05-04 00:04:31,425:INFO:Plot type: feature
2025-05-04 00:04:31,503:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:04:31,600:INFO:Saving 'Feature Importance.png'
2025-05-04 00:04:31,676:INFO:Visual Rendered Successfully
2025-05-04 00:04:31,820:INFO:plot_model() successfully completed......................................
2025-05-04 00:04:31,894:INFO:Initializing create_model()
2025-05-04 00:04:31,894:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:31,894:INFO:Checking exceptions
2025-05-04 00:04:31,894:INFO:Importing libraries
2025-05-04 00:04:31,894:INFO:Copying training dataset
2025-05-04 00:04:31,894:INFO:Defining folds
2025-05-04 00:04:31,910:INFO:Declaring metric variables
2025-05-04 00:04:31,910:INFO:Importing untrained model
2025-05-04 00:04:31,910:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 00:04:31,910:INFO:Starting cross validation
2025-05-04 00:04:31,910:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:32,364:INFO:Calculating mean and std
2025-05-04 00:04:32,364:INFO:Creating metrics dataframe
2025-05-04 00:04:32,364:INFO:Finalizing model
2025-05-04 00:04:32,480:INFO:Creating Dashboard logs
2025-05-04 00:04:32,480:INFO:Model: Light Gradient Boosting Machine
2025-05-04 00:04:32,496:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 4, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 00:04:32,590:INFO:Initializing predict_model()
2025-05-04 00:04:32,590:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=LGBMRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363185870>)
2025-05-04 00:04:32,590:INFO:Checking exceptions
2025-05-04 00:04:32,590:INFO:Preloading libraries
2025-05-04 00:04:32,686:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:33,075:INFO:Uploading results into container
2025-05-04 00:04:33,075:INFO:Uploading model into container now
2025-05-04 00:04:33,075:INFO:_master_model_container: 8
2025-05-04 00:04:33,075:INFO:_display_container: 5
2025-05-04 00:04:33,075:INFO:LGBMRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:33,075:INFO:create_model() successfully completed......................................
2025-05-04 00:04:33,267:INFO:Initializing plot_model()
2025-05-04 00:04:33,267:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, system=True)
2025-05-04 00:04:33,267:INFO:Checking exceptions
2025-05-04 00:04:33,267:INFO:Preloading libraries
2025-05-04 00:04:33,285:INFO:Copying training dataset
2025-05-04 00:04:33,285:INFO:Plot type: feature
2025-05-04 00:04:33,286:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:04:33,339:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:04:33,460:INFO:Saving 'Feature Importance.png'
2025-05-04 00:04:33,547:INFO:Visual Rendered Successfully
2025-05-04 00:04:33,683:INFO:plot_model() successfully completed......................................
2025-05-04 00:04:33,771:INFO:Initializing create_model()
2025-05-04 00:04:33,771:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:33,771:INFO:Checking exceptions
2025-05-04 00:04:33,772:INFO:Importing libraries
2025-05-04 00:04:33,772:INFO:Copying training dataset
2025-05-04 00:04:33,775:INFO:Defining folds
2025-05-04 00:04:33,776:INFO:Declaring metric variables
2025-05-04 00:04:33,776:INFO:Importing untrained model
2025-05-04 00:04:33,776:INFO:Random Forest Regressor Imported successfully
2025-05-04 00:04:33,776:INFO:Starting cross validation
2025-05-04 00:04:33,777:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:34,402:INFO:Calculating mean and std
2025-05-04 00:04:34,402:INFO:Creating metrics dataframe
2025-05-04 00:04:34,405:INFO:Finalizing model
2025-05-04 00:04:34,620:INFO:Creating Dashboard logs
2025-05-04 00:04:34,620:INFO:Model: Random Forest Regressor
2025-05-04 00:04:34,655:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-04 00:04:34,759:INFO:Initializing predict_model()
2025-05-04 00:04:34,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363191360>)
2025-05-04 00:04:34,759:INFO:Checking exceptions
2025-05-04 00:04:34,759:INFO:Preloading libraries
2025-05-04 00:04:34,905:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:35,406:INFO:Uploading results into container
2025-05-04 00:04:35,407:INFO:Uploading model into container now
2025-05-04 00:04:35,407:INFO:_master_model_container: 9
2025-05-04 00:04:35,407:INFO:_display_container: 6
2025-05-04 00:04:35,407:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:35,407:INFO:create_model() successfully completed......................................
2025-05-04 00:04:35,610:INFO:Initializing plot_model()
2025-05-04 00:04:35,610:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, system=True)
2025-05-04 00:04:35,610:INFO:Checking exceptions
2025-05-04 00:04:35,631:INFO:Preloading libraries
2025-05-04 00:04:35,653:INFO:Copying training dataset
2025-05-04 00:04:35,653:INFO:Plot type: feature
2025-05-04 00:04:35,654:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:04:35,713:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:04:35,807:INFO:Saving 'Feature Importance.png'
2025-05-04 00:04:35,908:INFO:Visual Rendered Successfully
2025-05-04 00:04:36,135:INFO:plot_model() successfully completed......................................
2025-05-04 00:04:36,227:INFO:Initializing create_model()
2025-05-04 00:04:36,227:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:04:36,227:INFO:Checking exceptions
2025-05-04 00:04:36,227:INFO:Importing libraries
2025-05-04 00:04:36,227:INFO:Copying training dataset
2025-05-04 00:04:36,231:INFO:Defining folds
2025-05-04 00:04:36,231:INFO:Declaring metric variables
2025-05-04 00:04:36,231:INFO:Importing untrained model
2025-05-04 00:04:36,231:INFO:Extra Trees Regressor Imported successfully
2025-05-04 00:04:36,231:INFO:Starting cross validation
2025-05-04 00:04:36,231:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:04:36,682:INFO:Calculating mean and std
2025-05-04 00:04:36,682:INFO:Creating metrics dataframe
2025-05-04 00:04:36,682:INFO:Finalizing model
2025-05-04 00:04:36,823:INFO:Creating Dashboard logs
2025-05-04 00:04:36,823:INFO:Model: Extra Trees Regressor
2025-05-04 00:04:36,839:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 4, 'verbose': 0, 'warm_start': False}
2025-05-04 00:04:36,935:INFO:Initializing predict_model()
2025-05-04 00:04:36,935:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362AAB010>)
2025-05-04 00:04:36,935:INFO:Checking exceptions
2025-05-04 00:04:36,935:INFO:Preloading libraries
2025-05-04 00:04:37,056:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:04:37,451:INFO:Uploading results into container
2025-05-04 00:04:37,452:INFO:Uploading model into container now
2025-05-04 00:04:37,453:INFO:_master_model_container: 10
2025-05-04 00:04:37,453:INFO:_display_container: 7
2025-05-04 00:04:37,453:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2025-05-04 00:04:37,453:INFO:create_model() successfully completed......................................
2025-05-04 00:04:37,645:INFO:Initializing plot_model()
2025-05-04 00:04:37,645:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263656221A0>, system=True)
2025-05-04 00:04:37,645:INFO:Checking exceptions
2025-05-04 00:04:37,679:INFO:Preloading libraries
2025-05-04 00:04:37,715:INFO:Copying training dataset
2025-05-04 00:04:37,715:INFO:Plot type: feature
2025-05-04 00:04:37,715:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:04:37,782:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:04:37,879:INFO:Saving 'Feature Importance.png'
2025-05-04 00:04:37,984:INFO:Visual Rendered Successfully
2025-05-04 00:04:38,130:INFO:plot_model() successfully completed......................................
2025-05-04 00:05:33,750:INFO:PyCaret RegressionExperiment
2025-05-04 00:05:33,750:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:05:33,750:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:05:33,750:INFO:version 3.3.2
2025-05-04 00:05:33,750:INFO:Initializing setup()
2025-05-04 00:05:33,750:INFO:self.USI: 6bf3
2025-05-04 00:05:33,750:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:05:33,750:INFO:Checking environment
2025-05-04 00:05:33,750:INFO:python_version: 3.10.11
2025-05-04 00:05:33,750:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:05:33,750:INFO:machine: AMD64
2025-05-04 00:05:33,750:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:05:33,754:INFO:Memory: svmem(total=8403075072, available=1151922176, percent=86.3, used=7251152896, free=1151922176)
2025-05-04 00:05:33,754:INFO:Physical Core: 6
2025-05-04 00:05:33,754:INFO:Logical Core: 12
2025-05-04 00:05:33,755:INFO:Checking libraries
2025-05-04 00:05:33,755:INFO:System:
2025-05-04 00:05:33,755:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:05:33,755:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:05:33,755:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:05:33,755:INFO:PyCaret required dependencies:
2025-05-04 00:05:33,755:INFO:                 pip: 23.0.1
2025-05-04 00:05:33,755:INFO:          setuptools: 65.5.0
2025-05-04 00:05:33,755:INFO:             pycaret: 3.3.2
2025-05-04 00:05:33,755:INFO:             IPython: 8.36.0
2025-05-04 00:05:33,755:INFO:          ipywidgets: 8.1.6
2025-05-04 00:05:33,755:INFO:                tqdm: 4.67.1
2025-05-04 00:05:33,755:INFO:               numpy: 1.26.4
2025-05-04 00:05:33,755:INFO:              pandas: 1.5.3
2025-05-04 00:05:33,755:INFO:              jinja2: 3.1.6
2025-05-04 00:05:33,755:INFO:               scipy: 1.11.4
2025-05-04 00:05:33,755:INFO:              joblib: 1.3.2
2025-05-04 00:05:33,755:INFO:             sklearn: 1.4.2
2025-05-04 00:05:33,756:INFO:                pyod: 2.0.4
2025-05-04 00:05:33,756:INFO:            imblearn: 0.13.0
2025-05-04 00:05:33,756:INFO:   category_encoders: 2.7.0
2025-05-04 00:05:33,756:INFO:            lightgbm: 4.6.0
2025-05-04 00:05:33,756:INFO:               numba: 0.61.0
2025-05-04 00:05:33,756:INFO:            requests: 2.32.3
2025-05-04 00:05:33,756:INFO:          matplotlib: 3.7.5
2025-05-04 00:05:33,756:INFO:          scikitplot: 0.3.7
2025-05-04 00:05:33,756:INFO:         yellowbrick: 1.5
2025-05-04 00:05:33,756:INFO:              plotly: 5.24.1
2025-05-04 00:05:33,756:INFO:    plotly-resampler: Not installed
2025-05-04 00:05:33,756:INFO:             kaleido: 0.2.1
2025-05-04 00:05:33,756:INFO:           schemdraw: 0.15
2025-05-04 00:05:33,756:INFO:         statsmodels: 0.14.4
2025-05-04 00:05:33,756:INFO:              sktime: 0.26.0
2025-05-04 00:05:33,756:INFO:               tbats: 1.1.3
2025-05-04 00:05:33,756:INFO:            pmdarima: 2.0.4
2025-05-04 00:05:33,756:INFO:              psutil: 7.0.0
2025-05-04 00:05:33,756:INFO:          markupsafe: 3.0.2
2025-05-04 00:05:33,756:INFO:             pickle5: Not installed
2025-05-04 00:05:33,757:INFO:         cloudpickle: 2.2.1
2025-05-04 00:05:33,757:INFO:         deprecation: 2.1.0
2025-05-04 00:05:33,757:INFO:              xxhash: 3.5.0
2025-05-04 00:05:33,757:INFO:           wurlitzer: Not installed
2025-05-04 00:05:33,757:INFO:PyCaret optional dependencies:
2025-05-04 00:05:33,757:INFO:                shap: 0.47.2
2025-05-04 00:05:33,757:INFO:           interpret: Not installed
2025-05-04 00:05:33,757:INFO:                umap: Not installed
2025-05-04 00:05:33,757:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:05:33,757:INFO:  explainerdashboard: Not installed
2025-05-04 00:05:33,757:INFO:             autoviz: Not installed
2025-05-04 00:05:33,757:INFO:           fairlearn: Not installed
2025-05-04 00:05:33,757:INFO:          deepchecks: Not installed
2025-05-04 00:05:33,757:INFO:             xgboost: Not installed
2025-05-04 00:05:33,757:INFO:            catboost: Not installed
2025-05-04 00:05:33,757:INFO:              kmodes: Not installed
2025-05-04 00:05:33,757:INFO:             mlxtend: Not installed
2025-05-04 00:05:33,757:INFO:       statsforecast: Not installed
2025-05-04 00:05:33,757:INFO:        tune_sklearn: Not installed
2025-05-04 00:05:33,757:INFO:                 ray: Not installed
2025-05-04 00:05:33,757:INFO:            hyperopt: Not installed
2025-05-04 00:05:33,758:INFO:              optuna: 4.3.0
2025-05-04 00:05:33,758:INFO:               skopt: Not installed
2025-05-04 00:05:33,758:INFO:              mlflow: 1.30.0
2025-05-04 00:05:33,758:INFO:              gradio: Not installed
2025-05-04 00:05:33,758:INFO:             fastapi: 0.115.12
2025-05-04 00:05:33,758:INFO:             uvicorn: 0.34.2
2025-05-04 00:05:33,758:INFO:              m2cgen: Not installed
2025-05-04 00:05:33,758:INFO:           evidently: 0.7.3
2025-05-04 00:05:33,758:INFO:               fugue: Not installed
2025-05-04 00:05:33,758:INFO:           streamlit: Not installed
2025-05-04 00:05:33,758:INFO:             prophet: Not installed
2025-05-04 00:05:33,758:INFO:None
2025-05-04 00:05:33,758:INFO:Set up data.
2025-05-04 00:05:33,764:INFO:Set up folding strategy.
2025-05-04 00:05:33,764:INFO:Set up train/test split.
2025-05-04 00:05:33,768:INFO:Set up index.
2025-05-04 00:05:33,768:INFO:Assigning column types.
2025-05-04 00:05:33,771:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:05:33,868:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:33,868:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:33,965:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:33,965:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:33,965:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:05:34,056:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,056:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,153:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,153:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:05:34,258:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,258:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,360:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,360:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,360:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:05:34,456:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,457:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,549:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,555:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,556:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:05:34,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,759:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,759:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,759:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:05:34,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,944:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,944:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:34,944:INFO:Preparing preprocessing pipeline...
2025-05-04 00:05:34,944:INFO:Set up simple imputation.
2025-05-04 00:05:34,952:INFO:Set up encoding of categorical features.
2025-05-04 00:05:34,952:INFO:Set up column name cleaning.
2025-05-04 00:05:35,021:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:05:35,033:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:05:35,034:INFO:Creating final display dataframe.
2025-05-04 00:05:35,286:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                6bf3
2025-05-04 00:05:35,385:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:35,385:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:35,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:35,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:35,507:INFO:Logging experiment in loggers
2025-05-04 00:05:35,652:INFO:SubProcess save_model() called ==================================
2025-05-04 00:05:35,685:INFO:Initializing save_model()
2025-05-04 00:05:35,685:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmprxctfwhu\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:05:35,685:INFO:Adding model into prep_pipe
2025-05-04 00:05:35,685:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:05:35,692:INFO:C:\Users\Nghia\AppData\Local\Temp\tmprxctfwhu\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:05:35,708:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:05:35,708:INFO:save_model() successfully completed......................................
2025-05-04 00:05:36,058:INFO:SubProcess save_model() end ==================================
2025-05-04 00:05:36,080:INFO:setup() successfully completed in 1.76s...............
2025-05-04 00:05:36,147:INFO:Initializing create_model()
2025-05-04 00:05:36,147:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:05:36,147:INFO:Checking exceptions
2025-05-04 00:05:36,148:INFO:Importing libraries
2025-05-04 00:05:36,148:INFO:Copying training dataset
2025-05-04 00:05:36,152:INFO:Defining folds
2025-05-04 00:05:36,153:INFO:Declaring metric variables
2025-05-04 00:05:36,153:INFO:Importing untrained model
2025-05-04 00:05:36,154:INFO:Linear Regression Imported successfully
2025-05-04 00:05:36,154:INFO:Starting cross validation
2025-05-04 00:05:36,155:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:05:36,335:INFO:Calculating mean and std
2025-05-04 00:05:36,336:INFO:Creating metrics dataframe
2025-05-04 00:05:36,338:INFO:Finalizing model
2025-05-04 00:05:36,408:INFO:Creating Dashboard logs
2025-05-04 00:05:36,409:INFO:Model: Linear Regression
2025-05-04 00:05:36,434:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:05:36,548:INFO:Initializing predict_model()
2025-05-04 00:05:36,548:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFF910>)
2025-05-04 00:05:36,555:INFO:Checking exceptions
2025-05-04 00:05:36,555:INFO:Preloading libraries
2025-05-04 00:05:36,611:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:05:37,120:INFO:Uploading results into container
2025-05-04 00:05:37,122:INFO:Uploading model into container now
2025-05-04 00:05:37,122:INFO:_master_model_container: 11
2025-05-04 00:05:37,122:INFO:_display_container: 8
2025-05-04 00:05:37,122:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:05:37,123:INFO:create_model() successfully completed......................................
2025-05-04 00:05:37,320:INFO:Initializing tune_model()
2025-05-04 00:05:37,320:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>)
2025-05-04 00:05:37,320:INFO:Checking exceptions
2025-05-04 00:05:37,323:INFO:Copying training dataset
2025-05-04 00:05:37,325:INFO:Checking base model
2025-05-04 00:05:37,325:INFO:Base model : Linear Regression
2025-05-04 00:05:37,326:INFO:Declaring metric variables
2025-05-04 00:05:37,326:INFO:Defining Hyperparameters
2025-05-04 00:05:37,326:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:05:37,514:INFO:Tuning with n_jobs=-1
2025-05-04 00:05:37,514:INFO:Initializing GridSearchCV
2025-05-04 00:05:37,708:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:05:37,708:INFO:Hyperparameter search completed
2025-05-04 00:05:37,708:INFO:SubProcess create_model() called ==================================
2025-05-04 00:05:37,708:INFO:Initializing create_model()
2025-05-04 00:05:37,708:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636579BB20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:05:37,708:INFO:Checking exceptions
2025-05-04 00:05:37,708:INFO:Importing libraries
2025-05-04 00:05:37,708:INFO:Copying training dataset
2025-05-04 00:05:37,708:INFO:Defining folds
2025-05-04 00:05:37,708:INFO:Declaring metric variables
2025-05-04 00:05:37,708:INFO:Importing untrained model
2025-05-04 00:05:37,708:INFO:Declaring custom model
2025-05-04 00:05:37,708:INFO:Linear Regression Imported successfully
2025-05-04 00:05:37,708:INFO:Starting cross validation
2025-05-04 00:05:37,715:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:05:37,861:INFO:Calculating mean and std
2025-05-04 00:05:37,861:INFO:Creating metrics dataframe
2025-05-04 00:05:37,861:INFO:Finalizing model
2025-05-04 00:05:37,913:INFO:Uploading results into container
2025-05-04 00:05:37,913:INFO:Uploading model into container now
2025-05-04 00:05:37,914:INFO:_master_model_container: 12
2025-05-04 00:05:37,914:INFO:_display_container: 9
2025-05-04 00:05:37,914:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:05:37,914:INFO:create_model() successfully completed......................................
2025-05-04 00:05:38,128:INFO:SubProcess create_model() end ==================================
2025-05-04 00:05:38,128:INFO:choose_better activated
2025-05-04 00:05:38,128:INFO:SubProcess create_model() called ==================================
2025-05-04 00:05:38,129:INFO:Initializing create_model()
2025-05-04 00:05:38,129:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:05:38,129:INFO:Checking exceptions
2025-05-04 00:05:38,129:INFO:Importing libraries
2025-05-04 00:05:38,129:INFO:Copying training dataset
2025-05-04 00:05:38,132:INFO:Defining folds
2025-05-04 00:05:38,133:INFO:Declaring metric variables
2025-05-04 00:05:38,133:INFO:Importing untrained model
2025-05-04 00:05:38,133:INFO:Declaring custom model
2025-05-04 00:05:38,133:INFO:Linear Regression Imported successfully
2025-05-04 00:05:38,133:INFO:Starting cross validation
2025-05-04 00:05:38,134:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:05:38,277:INFO:Calculating mean and std
2025-05-04 00:05:38,277:INFO:Creating metrics dataframe
2025-05-04 00:05:38,277:INFO:Finalizing model
2025-05-04 00:05:38,336:INFO:Uploading results into container
2025-05-04 00:05:38,336:INFO:Uploading model into container now
2025-05-04 00:05:38,336:INFO:_master_model_container: 13
2025-05-04 00:05:38,336:INFO:_display_container: 10
2025-05-04 00:05:38,337:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:05:38,337:INFO:create_model() successfully completed......................................
2025-05-04 00:05:38,514:INFO:SubProcess create_model() end ==================================
2025-05-04 00:05:38,514:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:05:38,514:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:05:38,515:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:05:38,515:INFO:choose_better completed
2025-05-04 00:05:38,515:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:05:38,515:INFO:Creating Dashboard logs
2025-05-04 00:05:38,515:INFO:Model: Linear Regression
2025-05-04 00:05:38,547:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:05:38,653:INFO:Initializing predict_model()
2025-05-04 00:05:38,653:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362AAAC20>)
2025-05-04 00:05:38,653:INFO:Checking exceptions
2025-05-04 00:05:38,653:INFO:Preloading libraries
2025-05-04 00:05:38,701:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:05:39,167:INFO:_master_model_container: 13
2025-05-04 00:05:39,167:INFO:_display_container: 9
2025-05-04 00:05:39,167:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:05:39,167:INFO:tune_model() successfully completed......................................
2025-05-04 00:05:39,410:INFO:gpu_param set to False
2025-05-04 00:05:39,521:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:39,527:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:39,625:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:39,625:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:05:39,625:INFO:Initializing predict_model()
2025-05-04 00:05:39,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFE290>)
2025-05-04 00:05:39,625:INFO:Checking exceptions
2025-05-04 00:05:39,625:INFO:Preloading libraries
2025-05-04 00:05:39,695:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:05:39,890:INFO:Initializing plot_model()
2025-05-04 00:05:39,890:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, system=True)
2025-05-04 00:05:39,890:INFO:Checking exceptions
2025-05-04 00:05:39,892:INFO:Preloading libraries
2025-05-04 00:05:39,892:INFO:Copying training dataset
2025-05-04 00:05:39,892:INFO:Plot type: feature
2025-05-04 00:05:39,945:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:05:40,049:INFO:Saving 'Feature Importance.png'
2025-05-04 00:05:40,147:INFO:Visual Rendered Successfully
2025-05-04 00:05:40,310:INFO:plot_model() successfully completed......................................
2025-05-04 00:05:40,328:INFO:Initializing plot_model()
2025-05-04 00:05:40,328:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, system=True)
2025-05-04 00:05:40,328:INFO:Checking exceptions
2025-05-04 00:05:40,330:INFO:Preloading libraries
2025-05-04 00:05:40,330:INFO:Copying training dataset
2025-05-04 00:05:40,330:INFO:Plot type: residuals
2025-05-04 00:05:40,330:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:05:40,533:INFO:Fitting Model
2025-05-04 00:05:40,534:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:05:40,570:INFO:Scoring test/hold-out set
2025-05-04 00:05:40,606:INFO:Saving 'Residuals.png'
2025-05-04 00:05:40,944:INFO:Visual Rendered Successfully
2025-05-04 00:05:41,149:INFO:plot_model() successfully completed......................................
2025-05-04 00:05:41,172:INFO:Initializing plot_model()
2025-05-04 00:05:41,172:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, system=True)
2025-05-04 00:05:41,172:INFO:Checking exceptions
2025-05-04 00:05:41,176:INFO:Preloading libraries
2025-05-04 00:05:41,176:INFO:Copying training dataset
2025-05-04 00:05:41,176:INFO:Plot type: error
2025-05-04 00:05:41,303:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:05:41,399:INFO:Fitting Model
2025-05-04 00:05:41,399:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:05:41,400:INFO:Scoring test/hold-out set
2025-05-04 00:05:41,420:INFO:Saving 'Prediction Error.png'
2025-05-04 00:05:41,694:INFO:Visual Rendered Successfully
2025-05-04 00:05:41,854:INFO:plot_model() successfully completed......................................
2025-05-04 00:05:41,875:INFO:Initializing plot_model()
2025-05-04 00:05:41,875:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000263628AFD00>, system=True)
2025-05-04 00:05:41,875:INFO:Checking exceptions
2025-05-04 00:05:41,875:INFO:Preloading libraries
2025-05-04 00:05:41,875:INFO:Copying training dataset
2025-05-04 00:05:41,875:INFO:Plot type: cooks
2025-05-04 00:05:41,972:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:05:42,066:INFO:Fitting Model
2025-05-04 00:05:42,134:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:05:42,291:INFO:Visual Rendered Successfully
2025-05-04 00:05:42,467:INFO:plot_model() successfully completed......................................
2025-05-04 00:05:42,514:INFO:Initializing save_model()
2025-05-04 00:05:42,514:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_000542_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:05:42,514:INFO:Adding model into prep_pipe
2025-05-04 00:05:42,519:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_000542_4.pkl saved in current working directory
2025-05-04 00:05:42,528:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:05:42,528:INFO:save_model() successfully completed......................................
2025-05-04 00:06:38,305:INFO:PyCaret RegressionExperiment
2025-05-04 00:06:38,306:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:06:38,306:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:06:38,306:INFO:version 3.3.2
2025-05-04 00:06:38,306:INFO:Initializing setup()
2025-05-04 00:06:38,306:INFO:self.USI: 03da
2025-05-04 00:06:38,306:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:06:38,306:INFO:Checking environment
2025-05-04 00:06:38,306:INFO:python_version: 3.10.11
2025-05-04 00:06:38,306:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:06:38,306:INFO:machine: AMD64
2025-05-04 00:06:38,306:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:06:38,311:INFO:Memory: svmem(total=8403075072, available=976965632, percent=88.4, used=7426109440, free=976965632)
2025-05-04 00:06:38,311:INFO:Physical Core: 6
2025-05-04 00:06:38,311:INFO:Logical Core: 12
2025-05-04 00:06:38,311:INFO:Checking libraries
2025-05-04 00:06:38,312:INFO:System:
2025-05-04 00:06:38,312:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:06:38,312:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:06:38,312:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:06:38,312:INFO:PyCaret required dependencies:
2025-05-04 00:06:38,312:INFO:                 pip: 23.0.1
2025-05-04 00:06:38,312:INFO:          setuptools: 65.5.0
2025-05-04 00:06:38,312:INFO:             pycaret: 3.3.2
2025-05-04 00:06:38,312:INFO:             IPython: 8.36.0
2025-05-04 00:06:38,312:INFO:          ipywidgets: 8.1.6
2025-05-04 00:06:38,312:INFO:                tqdm: 4.67.1
2025-05-04 00:06:38,312:INFO:               numpy: 1.26.4
2025-05-04 00:06:38,312:INFO:              pandas: 1.5.3
2025-05-04 00:06:38,312:INFO:              jinja2: 3.1.6
2025-05-04 00:06:38,312:INFO:               scipy: 1.11.4
2025-05-04 00:06:38,312:INFO:              joblib: 1.3.2
2025-05-04 00:06:38,312:INFO:             sklearn: 1.4.2
2025-05-04 00:06:38,312:INFO:                pyod: 2.0.4
2025-05-04 00:06:38,313:INFO:            imblearn: 0.13.0
2025-05-04 00:06:38,313:INFO:   category_encoders: 2.7.0
2025-05-04 00:06:38,313:INFO:            lightgbm: 4.6.0
2025-05-04 00:06:38,313:INFO:               numba: 0.61.0
2025-05-04 00:06:38,313:INFO:            requests: 2.32.3
2025-05-04 00:06:38,313:INFO:          matplotlib: 3.7.5
2025-05-04 00:06:38,313:INFO:          scikitplot: 0.3.7
2025-05-04 00:06:38,313:INFO:         yellowbrick: 1.5
2025-05-04 00:06:38,313:INFO:              plotly: 5.24.1
2025-05-04 00:06:38,313:INFO:    plotly-resampler: Not installed
2025-05-04 00:06:38,313:INFO:             kaleido: 0.2.1
2025-05-04 00:06:38,313:INFO:           schemdraw: 0.15
2025-05-04 00:06:38,313:INFO:         statsmodels: 0.14.4
2025-05-04 00:06:38,313:INFO:              sktime: 0.26.0
2025-05-04 00:06:38,313:INFO:               tbats: 1.1.3
2025-05-04 00:06:38,313:INFO:            pmdarima: 2.0.4
2025-05-04 00:06:38,313:INFO:              psutil: 7.0.0
2025-05-04 00:06:38,313:INFO:          markupsafe: 3.0.2
2025-05-04 00:06:38,313:INFO:             pickle5: Not installed
2025-05-04 00:06:38,313:INFO:         cloudpickle: 2.2.1
2025-05-04 00:06:38,314:INFO:         deprecation: 2.1.0
2025-05-04 00:06:38,314:INFO:              xxhash: 3.5.0
2025-05-04 00:06:38,314:INFO:           wurlitzer: Not installed
2025-05-04 00:06:38,314:INFO:PyCaret optional dependencies:
2025-05-04 00:06:38,314:INFO:                shap: 0.47.2
2025-05-04 00:06:38,314:INFO:           interpret: Not installed
2025-05-04 00:06:38,314:INFO:                umap: Not installed
2025-05-04 00:06:38,314:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:06:38,314:INFO:  explainerdashboard: Not installed
2025-05-04 00:06:38,314:INFO:             autoviz: Not installed
2025-05-04 00:06:38,314:INFO:           fairlearn: Not installed
2025-05-04 00:06:38,314:INFO:          deepchecks: Not installed
2025-05-04 00:06:38,314:INFO:             xgboost: Not installed
2025-05-04 00:06:38,314:INFO:            catboost: Not installed
2025-05-04 00:06:38,314:INFO:              kmodes: Not installed
2025-05-04 00:06:38,314:INFO:             mlxtend: Not installed
2025-05-04 00:06:38,314:INFO:       statsforecast: Not installed
2025-05-04 00:06:38,314:INFO:        tune_sklearn: Not installed
2025-05-04 00:06:38,314:INFO:                 ray: Not installed
2025-05-04 00:06:38,314:INFO:            hyperopt: Not installed
2025-05-04 00:06:38,315:INFO:              optuna: 4.3.0
2025-05-04 00:06:38,315:INFO:               skopt: Not installed
2025-05-04 00:06:38,315:INFO:              mlflow: 1.30.0
2025-05-04 00:06:38,315:INFO:              gradio: Not installed
2025-05-04 00:06:38,315:INFO:             fastapi: 0.115.12
2025-05-04 00:06:38,315:INFO:             uvicorn: 0.34.2
2025-05-04 00:06:38,315:INFO:              m2cgen: Not installed
2025-05-04 00:06:38,315:INFO:           evidently: 0.7.3
2025-05-04 00:06:38,315:INFO:               fugue: Not installed
2025-05-04 00:06:38,315:INFO:           streamlit: Not installed
2025-05-04 00:06:38,315:INFO:             prophet: Not installed
2025-05-04 00:06:38,315:INFO:None
2025-05-04 00:06:38,315:INFO:Set up data.
2025-05-04 00:06:38,321:INFO:Set up folding strategy.
2025-05-04 00:06:38,321:INFO:Set up train/test split.
2025-05-04 00:06:38,325:INFO:Set up index.
2025-05-04 00:06:38,326:INFO:Assigning column types.
2025-05-04 00:06:38,329:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:06:38,429:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,526:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,526:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,526:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:06:38,623:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,722:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:06:38,840:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,942:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,942:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:38,942:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:06:39,042:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,042:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,141:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,141:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,141:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:06:39,252:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,252:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,356:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,356:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,357:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:06:39,450:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,450:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,561:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,561:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,562:INFO:Preparing preprocessing pipeline...
2025-05-04 00:06:39,562:INFO:Set up simple imputation.
2025-05-04 00:06:39,564:INFO:Set up encoding of categorical features.
2025-05-04 00:06:39,565:INFO:Set up column name cleaning.
2025-05-04 00:06:39,637:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:06:39,644:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:06:39,644:INFO:Creating final display dataframe.
2025-05-04 00:06:39,845:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                03da
2025-05-04 00:06:39,942:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:39,943:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:40,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:40,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:40,042:INFO:Logging experiment in loggers
2025-05-04 00:06:40,126:INFO:SubProcess save_model() called ==================================
2025-05-04 00:06:40,142:INFO:Initializing save_model()
2025-05-04 00:06:40,142:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp4qh_vgsv\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:06:40,142:INFO:Adding model into prep_pipe
2025-05-04 00:06:40,142:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:06:40,146:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp4qh_vgsv\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:06:40,154:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:06:40,154:INFO:save_model() successfully completed......................................
2025-05-04 00:06:40,310:INFO:SubProcess save_model() end ==================================
2025-05-04 00:06:40,326:INFO:setup() successfully completed in 1.74s...............
2025-05-04 00:06:40,377:INFO:Initializing create_model()
2025-05-04 00:06:40,377:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:06:40,377:INFO:Checking exceptions
2025-05-04 00:06:40,378:INFO:Importing libraries
2025-05-04 00:06:40,378:INFO:Copying training dataset
2025-05-04 00:06:40,382:INFO:Defining folds
2025-05-04 00:06:40,382:INFO:Declaring metric variables
2025-05-04 00:06:40,383:INFO:Importing untrained model
2025-05-04 00:06:40,383:INFO:Linear Regression Imported successfully
2025-05-04 00:06:40,383:INFO:Starting cross validation
2025-05-04 00:06:40,384:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:06:40,512:INFO:Calculating mean and std
2025-05-04 00:06:40,512:INFO:Creating metrics dataframe
2025-05-04 00:06:40,512:INFO:Finalizing model
2025-05-04 00:06:40,561:INFO:Creating Dashboard logs
2025-05-04 00:06:40,561:INFO:Model: Linear Regression
2025-05-04 00:06:40,582:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:06:40,679:INFO:Initializing predict_model()
2025-05-04 00:06:40,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFDFC0>)
2025-05-04 00:06:40,679:INFO:Checking exceptions
2025-05-04 00:06:40,679:INFO:Preloading libraries
2025-05-04 00:06:40,734:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:06:41,107:INFO:Uploading results into container
2025-05-04 00:06:41,108:INFO:Uploading model into container now
2025-05-04 00:06:41,109:INFO:_master_model_container: 11
2025-05-04 00:06:41,109:INFO:_display_container: 8
2025-05-04 00:06:41,110:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:06:41,110:INFO:create_model() successfully completed......................................
2025-05-04 00:06:41,276:INFO:Initializing tune_model()
2025-05-04 00:06:41,276:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>)
2025-05-04 00:06:41,276:INFO:Checking exceptions
2025-05-04 00:06:41,283:INFO:Copying training dataset
2025-05-04 00:06:41,283:INFO:Checking base model
2025-05-04 00:06:41,283:INFO:Base model : Linear Regression
2025-05-04 00:06:41,283:INFO:Declaring metric variables
2025-05-04 00:06:41,283:INFO:Defining Hyperparameters
2025-05-04 00:06:41,283:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:06:41,471:INFO:Tuning with n_jobs=-1
2025-05-04 00:06:41,471:INFO:Initializing GridSearchCV
2025-05-04 00:06:41,645:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:06:41,646:INFO:Hyperparameter search completed
2025-05-04 00:06:41,646:INFO:SubProcess create_model() called ==================================
2025-05-04 00:06:41,646:INFO:Initializing create_model()
2025-05-04 00:06:41,646:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362D48580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:06:41,646:INFO:Checking exceptions
2025-05-04 00:06:41,646:INFO:Importing libraries
2025-05-04 00:06:41,646:INFO:Copying training dataset
2025-05-04 00:06:41,649:INFO:Defining folds
2025-05-04 00:06:41,649:INFO:Declaring metric variables
2025-05-04 00:06:41,649:INFO:Importing untrained model
2025-05-04 00:06:41,649:INFO:Declaring custom model
2025-05-04 00:06:41,650:INFO:Linear Regression Imported successfully
2025-05-04 00:06:41,650:INFO:Starting cross validation
2025-05-04 00:06:41,651:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:06:41,840:INFO:Calculating mean and std
2025-05-04 00:06:41,841:INFO:Creating metrics dataframe
2025-05-04 00:06:41,842:INFO:Finalizing model
2025-05-04 00:06:41,903:INFO:Uploading results into container
2025-05-04 00:06:41,904:INFO:Uploading model into container now
2025-05-04 00:06:41,904:INFO:_master_model_container: 12
2025-05-04 00:06:41,904:INFO:_display_container: 9
2025-05-04 00:06:41,904:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:06:41,905:INFO:create_model() successfully completed......................................
2025-05-04 00:06:42,137:INFO:SubProcess create_model() end ==================================
2025-05-04 00:06:42,137:INFO:choose_better activated
2025-05-04 00:06:42,137:INFO:SubProcess create_model() called ==================================
2025-05-04 00:06:42,138:INFO:Initializing create_model()
2025-05-04 00:06:42,138:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:06:42,138:INFO:Checking exceptions
2025-05-04 00:06:42,139:INFO:Importing libraries
2025-05-04 00:06:42,139:INFO:Copying training dataset
2025-05-04 00:06:42,142:INFO:Defining folds
2025-05-04 00:06:42,143:INFO:Declaring metric variables
2025-05-04 00:06:42,143:INFO:Importing untrained model
2025-05-04 00:06:42,143:INFO:Declaring custom model
2025-05-04 00:06:42,143:INFO:Linear Regression Imported successfully
2025-05-04 00:06:42,144:INFO:Starting cross validation
2025-05-04 00:06:42,146:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:06:42,335:INFO:Calculating mean and std
2025-05-04 00:06:42,335:INFO:Creating metrics dataframe
2025-05-04 00:06:42,337:INFO:Finalizing model
2025-05-04 00:06:42,398:INFO:Uploading results into container
2025-05-04 00:06:42,398:INFO:Uploading model into container now
2025-05-04 00:06:42,398:INFO:_master_model_container: 13
2025-05-04 00:06:42,399:INFO:_display_container: 10
2025-05-04 00:06:42,399:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:06:42,399:INFO:create_model() successfully completed......................................
2025-05-04 00:06:42,588:INFO:SubProcess create_model() end ==================================
2025-05-04 00:06:42,588:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:06:42,591:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:06:42,591:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:06:42,591:INFO:choose_better completed
2025-05-04 00:06:42,591:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:06:42,592:INFO:Creating Dashboard logs
2025-05-04 00:06:42,592:INFO:Model: Linear Regression
2025-05-04 00:06:42,612:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:06:42,715:INFO:Initializing predict_model()
2025-05-04 00:06:42,715:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363191900>)
2025-05-04 00:06:42,715:INFO:Checking exceptions
2025-05-04 00:06:42,715:INFO:Preloading libraries
2025-05-04 00:06:42,770:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:06:43,151:INFO:_master_model_container: 13
2025-05-04 00:06:43,151:INFO:_display_container: 9
2025-05-04 00:06:43,151:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:06:43,151:INFO:tune_model() successfully completed......................................
2025-05-04 00:06:43,353:INFO:gpu_param set to False
2025-05-04 00:06:43,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:43,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:43,560:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:43,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:06:43,563:INFO:Initializing predict_model()
2025-05-04 00:06:43,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFFE20>)
2025-05-04 00:06:43,563:INFO:Checking exceptions
2025-05-04 00:06:43,563:INFO:Preloading libraries
2025-05-04 00:06:43,626:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:06:43,805:INFO:Initializing plot_model()
2025-05-04 00:06:43,805:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, system=True)
2025-05-04 00:06:43,805:INFO:Checking exceptions
2025-05-04 00:06:43,807:INFO:Preloading libraries
2025-05-04 00:06:43,807:INFO:Copying training dataset
2025-05-04 00:06:43,807:INFO:Plot type: feature
2025-05-04 00:06:43,861:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:06:43,964:INFO:Saving 'Feature Importance.png'
2025-05-04 00:06:44,061:INFO:Visual Rendered Successfully
2025-05-04 00:06:44,227:INFO:plot_model() successfully completed......................................
2025-05-04 00:06:44,245:INFO:Initializing plot_model()
2025-05-04 00:06:44,245:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, system=True)
2025-05-04 00:06:44,245:INFO:Checking exceptions
2025-05-04 00:06:44,245:INFO:Preloading libraries
2025-05-04 00:06:44,245:INFO:Copying training dataset
2025-05-04 00:06:44,245:INFO:Plot type: residuals
2025-05-04 00:06:44,248:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:06:44,449:INFO:Fitting Model
2025-05-04 00:06:44,449:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:06:44,484:INFO:Scoring test/hold-out set
2025-05-04 00:06:44,519:INFO:Saving 'Residuals.png'
2025-05-04 00:06:44,897:INFO:Visual Rendered Successfully
2025-05-04 00:06:45,061:INFO:plot_model() successfully completed......................................
2025-05-04 00:06:45,082:INFO:Initializing plot_model()
2025-05-04 00:06:45,082:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, system=True)
2025-05-04 00:06:45,082:INFO:Checking exceptions
2025-05-04 00:06:45,082:INFO:Preloading libraries
2025-05-04 00:06:45,082:INFO:Copying training dataset
2025-05-04 00:06:45,082:INFO:Plot type: error
2025-05-04 00:06:45,182:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:06:45,269:INFO:Fitting Model
2025-05-04 00:06:45,269:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:06:45,269:INFO:Scoring test/hold-out set
2025-05-04 00:06:45,283:INFO:Saving 'Prediction Error.png'
2025-05-04 00:06:45,558:INFO:Visual Rendered Successfully
2025-05-04 00:06:45,766:INFO:plot_model() successfully completed......................................
2025-05-04 00:06:45,783:INFO:Initializing plot_model()
2025-05-04 00:06:45,783:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DB8730>, system=True)
2025-05-04 00:06:45,783:INFO:Checking exceptions
2025-05-04 00:06:45,783:INFO:Preloading libraries
2025-05-04 00:06:45,783:INFO:Copying training dataset
2025-05-04 00:06:45,783:INFO:Plot type: cooks
2025-05-04 00:06:45,885:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:06:45,977:INFO:Fitting Model
2025-05-04 00:06:46,040:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:06:46,220:INFO:Visual Rendered Successfully
2025-05-04 00:06:46,394:INFO:plot_model() successfully completed......................................
2025-05-04 00:06:46,449:INFO:Initializing save_model()
2025-05-04 00:06:46,449:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_000646_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:06:46,449:INFO:Adding model into prep_pipe
2025-05-04 00:06:46,456:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_000646_4.pkl saved in current working directory
2025-05-04 00:06:46,470:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:06:46,470:INFO:save_model() successfully completed......................................
2025-05-04 00:17:09,050:INFO:PyCaret RegressionExperiment
2025-05-04 00:17:09,050:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:17:09,050:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:17:09,050:INFO:version 3.3.2
2025-05-04 00:17:09,050:INFO:Initializing setup()
2025-05-04 00:17:09,050:INFO:self.USI: fcca
2025-05-04 00:17:09,050:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:17:09,050:INFO:Checking environment
2025-05-04 00:17:09,050:INFO:python_version: 3.10.11
2025-05-04 00:17:09,050:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:17:09,050:INFO:machine: AMD64
2025-05-04 00:17:09,050:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:17:09,050:INFO:Memory: svmem(total=8403075072, available=1429663744, percent=83.0, used=6973411328, free=1429663744)
2025-05-04 00:17:09,050:INFO:Physical Core: 6
2025-05-04 00:17:09,050:INFO:Logical Core: 12
2025-05-04 00:17:09,050:INFO:Checking libraries
2025-05-04 00:17:09,050:INFO:System:
2025-05-04 00:17:09,050:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:17:09,050:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:17:09,050:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:17:09,050:INFO:PyCaret required dependencies:
2025-05-04 00:17:09,050:INFO:                 pip: 23.0.1
2025-05-04 00:17:09,050:INFO:          setuptools: 65.5.0
2025-05-04 00:17:09,050:INFO:             pycaret: 3.3.2
2025-05-04 00:17:09,050:INFO:             IPython: 8.36.0
2025-05-04 00:17:09,050:INFO:          ipywidgets: 8.1.6
2025-05-04 00:17:09,050:INFO:                tqdm: 4.67.1
2025-05-04 00:17:09,050:INFO:               numpy: 1.26.4
2025-05-04 00:17:09,050:INFO:              pandas: 1.5.3
2025-05-04 00:17:09,050:INFO:              jinja2: 3.1.6
2025-05-04 00:17:09,050:INFO:               scipy: 1.11.4
2025-05-04 00:17:09,050:INFO:              joblib: 1.3.2
2025-05-04 00:17:09,050:INFO:             sklearn: 1.4.2
2025-05-04 00:17:09,050:INFO:                pyod: 2.0.4
2025-05-04 00:17:09,050:INFO:            imblearn: 0.13.0
2025-05-04 00:17:09,057:INFO:   category_encoders: 2.7.0
2025-05-04 00:17:09,057:INFO:            lightgbm: 4.6.0
2025-05-04 00:17:09,057:INFO:               numba: 0.61.0
2025-05-04 00:17:09,057:INFO:            requests: 2.32.3
2025-05-04 00:17:09,057:INFO:          matplotlib: 3.7.5
2025-05-04 00:17:09,057:INFO:          scikitplot: 0.3.7
2025-05-04 00:17:09,057:INFO:         yellowbrick: 1.5
2025-05-04 00:17:09,057:INFO:              plotly: 5.24.1
2025-05-04 00:17:09,057:INFO:    plotly-resampler: Not installed
2025-05-04 00:17:09,057:INFO:             kaleido: 0.2.1
2025-05-04 00:17:09,057:INFO:           schemdraw: 0.15
2025-05-04 00:17:09,057:INFO:         statsmodels: 0.14.4
2025-05-04 00:17:09,057:INFO:              sktime: 0.26.0
2025-05-04 00:17:09,057:INFO:               tbats: 1.1.3
2025-05-04 00:17:09,057:INFO:            pmdarima: 2.0.4
2025-05-04 00:17:09,057:INFO:              psutil: 7.0.0
2025-05-04 00:17:09,057:INFO:          markupsafe: 3.0.2
2025-05-04 00:17:09,057:INFO:             pickle5: Not installed
2025-05-04 00:17:09,057:INFO:         cloudpickle: 2.2.1
2025-05-04 00:17:09,057:INFO:         deprecation: 2.1.0
2025-05-04 00:17:09,057:INFO:              xxhash: 3.5.0
2025-05-04 00:17:09,057:INFO:           wurlitzer: Not installed
2025-05-04 00:17:09,057:INFO:PyCaret optional dependencies:
2025-05-04 00:17:09,057:INFO:                shap: 0.47.2
2025-05-04 00:17:09,057:INFO:           interpret: Not installed
2025-05-04 00:17:09,057:INFO:                umap: Not installed
2025-05-04 00:17:09,057:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:17:09,057:INFO:  explainerdashboard: Not installed
2025-05-04 00:17:09,057:INFO:             autoviz: Not installed
2025-05-04 00:17:09,057:INFO:           fairlearn: Not installed
2025-05-04 00:17:09,057:INFO:          deepchecks: Not installed
2025-05-04 00:17:09,057:INFO:             xgboost: Not installed
2025-05-04 00:17:09,057:INFO:            catboost: Not installed
2025-05-04 00:17:09,057:INFO:              kmodes: Not installed
2025-05-04 00:17:09,057:INFO:             mlxtend: Not installed
2025-05-04 00:17:09,057:INFO:       statsforecast: Not installed
2025-05-04 00:17:09,057:INFO:        tune_sklearn: Not installed
2025-05-04 00:17:09,057:INFO:                 ray: Not installed
2025-05-04 00:17:09,057:INFO:            hyperopt: Not installed
2025-05-04 00:17:09,057:INFO:              optuna: 4.3.0
2025-05-04 00:17:09,057:INFO:               skopt: Not installed
2025-05-04 00:17:09,057:INFO:              mlflow: 1.30.0
2025-05-04 00:17:09,057:INFO:              gradio: Not installed
2025-05-04 00:17:09,057:INFO:             fastapi: 0.115.12
2025-05-04 00:17:09,057:INFO:             uvicorn: 0.34.2
2025-05-04 00:17:09,057:INFO:              m2cgen: Not installed
2025-05-04 00:17:09,057:INFO:           evidently: 0.7.3
2025-05-04 00:17:09,057:INFO:               fugue: Not installed
2025-05-04 00:17:09,057:INFO:           streamlit: Not installed
2025-05-04 00:17:09,057:INFO:             prophet: Not installed
2025-05-04 00:17:09,057:INFO:None
2025-05-04 00:17:09,057:INFO:Set up data.
2025-05-04 00:17:09,064:INFO:Set up folding strategy.
2025-05-04 00:17:09,064:INFO:Set up train/test split.
2025-05-04 00:17:09,064:INFO:Set up index.
2025-05-04 00:17:09,064:INFO:Assigning column types.
2025-05-04 00:17:09,073:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:17:09,174:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,174:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,273:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,273:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,273:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:17:09,370:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,477:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,478:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,478:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:17:09,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,696:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,696:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:17:09,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,817:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,938:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,938:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:09,939:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:17:10,060:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,060:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,184:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,184:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,185:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:17:10,293:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,293:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,391:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,391:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,391:INFO:Preparing preprocessing pipeline...
2025-05-04 00:17:10,391:INFO:Set up simple imputation.
2025-05-04 00:17:10,398:INFO:Set up encoding of categorical features.
2025-05-04 00:17:10,398:INFO:Set up column name cleaning.
2025-05-04 00:17:10,467:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:17:10,480:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:17:10,481:INFO:Creating final display dataframe.
2025-05-04 00:17:10,678:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                fcca
2025-05-04 00:17:10,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,877:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:10,877:INFO:Logging experiment in loggers
2025-05-04 00:17:10,974:INFO:SubProcess save_model() called ==================================
2025-05-04 00:17:10,988:INFO:Initializing save_model()
2025-05-04 00:17:10,988:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmplcksci1k\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:17:10,988:INFO:Adding model into prep_pipe
2025-05-04 00:17:10,988:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:17:10,995:INFO:C:\Users\Nghia\AppData\Local\Temp\tmplcksci1k\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:17:11,002:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:17:11,002:INFO:save_model() successfully completed......................................
2025-05-04 00:17:11,174:INFO:SubProcess save_model() end ==================================
2025-05-04 00:17:11,192:INFO:setup() successfully completed in 1.83s...............
2025-05-04 00:17:11,252:INFO:Initializing create_model()
2025-05-04 00:17:11,253:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:17:11,253:INFO:Checking exceptions
2025-05-04 00:17:11,253:INFO:Importing libraries
2025-05-04 00:17:11,253:INFO:Copying training dataset
2025-05-04 00:17:11,253:INFO:Defining folds
2025-05-04 00:17:11,253:INFO:Declaring metric variables
2025-05-04 00:17:11,253:INFO:Importing untrained model
2025-05-04 00:17:11,253:INFO:Linear Regression Imported successfully
2025-05-04 00:17:11,253:INFO:Starting cross validation
2025-05-04 00:17:11,259:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:16,884:INFO:Calculating mean and std
2025-05-04 00:17:16,884:INFO:Creating metrics dataframe
2025-05-04 00:17:16,891:INFO:Finalizing model
2025-05-04 00:17:16,981:INFO:Creating Dashboard logs
2025-05-04 00:17:16,981:INFO:Model: Linear Regression
2025-05-04 00:17:17,009:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:17:17,106:INFO:Initializing predict_model()
2025-05-04 00:17:17,106:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363185240>)
2025-05-04 00:17:17,106:INFO:Checking exceptions
2025-05-04 00:17:17,106:INFO:Preloading libraries
2025-05-04 00:17:17,154:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:17,592:INFO:Uploading results into container
2025-05-04 00:17:17,599:INFO:Uploading model into container now
2025-05-04 00:17:17,599:INFO:_master_model_container: 11
2025-05-04 00:17:17,599:INFO:_display_container: 8
2025-05-04 00:17:17,600:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:17,600:INFO:create_model() successfully completed......................................
2025-05-04 00:17:17,766:INFO:Initializing tune_model()
2025-05-04 00:17:17,766:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>)
2025-05-04 00:17:17,766:INFO:Checking exceptions
2025-05-04 00:17:17,766:INFO:Copying training dataset
2025-05-04 00:17:17,766:INFO:Checking base model
2025-05-04 00:17:17,766:INFO:Base model : Linear Regression
2025-05-04 00:17:17,772:INFO:Declaring metric variables
2025-05-04 00:17:17,772:INFO:Defining Hyperparameters
2025-05-04 00:17:17,772:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:17:17,937:INFO:Tuning with n_jobs=-1
2025-05-04 00:17:17,937:INFO:Initializing GridSearchCV
2025-05-04 00:17:21,955:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:17:21,955:INFO:Hyperparameter search completed
2025-05-04 00:17:21,955:INFO:SubProcess create_model() called ==================================
2025-05-04 00:17:21,957:INFO:Initializing create_model()
2025-05-04 00:17:21,957:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362A4DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:17:21,957:INFO:Checking exceptions
2025-05-04 00:17:21,957:INFO:Importing libraries
2025-05-04 00:17:21,957:INFO:Copying training dataset
2025-05-04 00:17:21,968:INFO:Defining folds
2025-05-04 00:17:21,969:INFO:Declaring metric variables
2025-05-04 00:17:21,969:INFO:Importing untrained model
2025-05-04 00:17:21,969:INFO:Declaring custom model
2025-05-04 00:17:21,970:INFO:Linear Regression Imported successfully
2025-05-04 00:17:21,970:INFO:Starting cross validation
2025-05-04 00:17:21,972:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:22,238:INFO:Calculating mean and std
2025-05-04 00:17:22,239:INFO:Creating metrics dataframe
2025-05-04 00:17:22,241:INFO:Finalizing model
2025-05-04 00:17:22,288:INFO:Uploading results into container
2025-05-04 00:17:22,288:INFO:Uploading model into container now
2025-05-04 00:17:22,289:INFO:_master_model_container: 12
2025-05-04 00:17:22,289:INFO:_display_container: 9
2025-05-04 00:17:22,289:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:22,289:INFO:create_model() successfully completed......................................
2025-05-04 00:17:22,473:INFO:SubProcess create_model() end ==================================
2025-05-04 00:17:22,473:INFO:choose_better activated
2025-05-04 00:17:22,474:INFO:SubProcess create_model() called ==================================
2025-05-04 00:17:22,475:INFO:Initializing create_model()
2025-05-04 00:17:22,475:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:17:22,475:INFO:Checking exceptions
2025-05-04 00:17:22,475:INFO:Importing libraries
2025-05-04 00:17:22,475:INFO:Copying training dataset
2025-05-04 00:17:22,475:INFO:Defining folds
2025-05-04 00:17:22,475:INFO:Declaring metric variables
2025-05-04 00:17:22,475:INFO:Importing untrained model
2025-05-04 00:17:22,475:INFO:Declaring custom model
2025-05-04 00:17:22,475:INFO:Linear Regression Imported successfully
2025-05-04 00:17:22,475:INFO:Starting cross validation
2025-05-04 00:17:22,475:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:22,606:INFO:Calculating mean and std
2025-05-04 00:17:22,606:INFO:Creating metrics dataframe
2025-05-04 00:17:22,606:INFO:Finalizing model
2025-05-04 00:17:22,657:INFO:Uploading results into container
2025-05-04 00:17:22,658:INFO:Uploading model into container now
2025-05-04 00:17:22,658:INFO:_master_model_container: 13
2025-05-04 00:17:22,658:INFO:_display_container: 10
2025-05-04 00:17:22,658:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:22,659:INFO:create_model() successfully completed......................................
2025-05-04 00:17:22,842:INFO:SubProcess create_model() end ==================================
2025-05-04 00:17:22,842:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:17:22,842:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:17:22,842:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:17:22,842:INFO:choose_better completed
2025-05-04 00:17:22,842:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:17:22,842:INFO:Creating Dashboard logs
2025-05-04 00:17:22,842:INFO:Model: Linear Regression
2025-05-04 00:17:22,863:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:17:22,967:INFO:Initializing predict_model()
2025-05-04 00:17:22,967:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363187B50>)
2025-05-04 00:17:22,967:INFO:Checking exceptions
2025-05-04 00:17:22,967:INFO:Preloading libraries
2025-05-04 00:17:23,029:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:23,446:INFO:_master_model_container: 13
2025-05-04 00:17:23,446:INFO:_display_container: 9
2025-05-04 00:17:23,446:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:23,446:INFO:tune_model() successfully completed......................................
2025-05-04 00:17:23,679:INFO:gpu_param set to False
2025-05-04 00:17:23,779:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:23,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:23,884:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:23,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:23,884:INFO:Initializing predict_model()
2025-05-04 00:17:23,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363185900>)
2025-05-04 00:17:23,884:INFO:Checking exceptions
2025-05-04 00:17:23,884:INFO:Preloading libraries
2025-05-04 00:17:23,939:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:24,119:INFO:Initializing plot_model()
2025-05-04 00:17:24,119:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, system=True)
2025-05-04 00:17:24,119:INFO:Checking exceptions
2025-05-04 00:17:24,120:INFO:Preloading libraries
2025-05-04 00:17:24,120:INFO:Copying training dataset
2025-05-04 00:17:24,120:INFO:Plot type: feature
2025-05-04 00:17:24,167:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:17:24,355:INFO:Saving 'Feature Importance.png'
2025-05-04 00:17:24,460:INFO:Visual Rendered Successfully
2025-05-04 00:17:24,662:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:24,692:INFO:Initializing plot_model()
2025-05-04 00:17:24,692:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, system=True)
2025-05-04 00:17:24,692:INFO:Checking exceptions
2025-05-04 00:17:24,694:INFO:Preloading libraries
2025-05-04 00:17:24,694:INFO:Copying training dataset
2025-05-04 00:17:24,694:INFO:Plot type: residuals
2025-05-04 00:17:24,694:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:17:24,897:INFO:Fitting Model
2025-05-04 00:17:24,897:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:17:24,939:INFO:Scoring test/hold-out set
2025-05-04 00:17:24,967:INFO:Saving 'Residuals.png'
2025-05-04 00:17:25,293:INFO:Visual Rendered Successfully
2025-05-04 00:17:25,473:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:25,496:INFO:Initializing plot_model()
2025-05-04 00:17:25,496:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, system=True)
2025-05-04 00:17:25,496:INFO:Checking exceptions
2025-05-04 00:17:25,498:INFO:Preloading libraries
2025-05-04 00:17:25,498:INFO:Copying training dataset
2025-05-04 00:17:25,498:INFO:Plot type: error
2025-05-04 00:17:25,598:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:17:25,689:INFO:Fitting Model
2025-05-04 00:17:25,689:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:17:25,689:INFO:Scoring test/hold-out set
2025-05-04 00:17:25,705:INFO:Saving 'Prediction Error.png'
2025-05-04 00:17:25,911:INFO:Visual Rendered Successfully
2025-05-04 00:17:26,079:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:26,096:INFO:Initializing plot_model()
2025-05-04 00:17:26,096:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362AD6DA0>, system=True)
2025-05-04 00:17:26,096:INFO:Checking exceptions
2025-05-04 00:17:26,098:INFO:Preloading libraries
2025-05-04 00:17:26,098:INFO:Copying training dataset
2025-05-04 00:17:26,098:INFO:Plot type: cooks
2025-05-04 00:17:26,185:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:17:26,281:INFO:Fitting Model
2025-05-04 00:17:26,349:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:17:26,513:INFO:Visual Rendered Successfully
2025-05-04 00:17:26,697:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:26,745:INFO:Initializing save_model()
2025-05-04 00:17:26,745:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_001726_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:17:26,745:INFO:Adding model into prep_pipe
2025-05-04 00:17:26,750:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_001726_4.pkl saved in current working directory
2025-05-04 00:17:26,759:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:17:26,759:INFO:save_model() successfully completed......................................
2025-05-04 00:17:44,751:INFO:PyCaret RegressionExperiment
2025-05-04 00:17:44,751:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:17:44,751:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:17:44,751:INFO:version 3.3.2
2025-05-04 00:17:44,751:INFO:Initializing setup()
2025-05-04 00:17:44,751:INFO:self.USI: 0b5c
2025-05-04 00:17:44,751:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:17:44,751:INFO:Checking environment
2025-05-04 00:17:44,751:INFO:python_version: 3.10.11
2025-05-04 00:17:44,751:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:17:44,751:INFO:machine: AMD64
2025-05-04 00:17:44,751:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:17:44,758:INFO:Memory: svmem(total=8403075072, available=401444864, percent=95.2, used=8001630208, free=401444864)
2025-05-04 00:17:44,758:INFO:Physical Core: 6
2025-05-04 00:17:44,758:INFO:Logical Core: 12
2025-05-04 00:17:44,758:INFO:Checking libraries
2025-05-04 00:17:44,758:INFO:System:
2025-05-04 00:17:44,758:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:17:44,758:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:17:44,758:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:17:44,758:INFO:PyCaret required dependencies:
2025-05-04 00:17:44,758:INFO:                 pip: 23.0.1
2025-05-04 00:17:44,758:INFO:          setuptools: 65.5.0
2025-05-04 00:17:44,758:INFO:             pycaret: 3.3.2
2025-05-04 00:17:44,758:INFO:             IPython: 8.36.0
2025-05-04 00:17:44,758:INFO:          ipywidgets: 8.1.6
2025-05-04 00:17:44,758:INFO:                tqdm: 4.67.1
2025-05-04 00:17:44,758:INFO:               numpy: 1.26.4
2025-05-04 00:17:44,758:INFO:              pandas: 1.5.3
2025-05-04 00:17:44,758:INFO:              jinja2: 3.1.6
2025-05-04 00:17:44,758:INFO:               scipy: 1.11.4
2025-05-04 00:17:44,758:INFO:              joblib: 1.3.2
2025-05-04 00:17:44,758:INFO:             sklearn: 1.4.2
2025-05-04 00:17:44,758:INFO:                pyod: 2.0.4
2025-05-04 00:17:44,758:INFO:            imblearn: 0.13.0
2025-05-04 00:17:44,758:INFO:   category_encoders: 2.7.0
2025-05-04 00:17:44,758:INFO:            lightgbm: 4.6.0
2025-05-04 00:17:44,758:INFO:               numba: 0.61.0
2025-05-04 00:17:44,758:INFO:            requests: 2.32.3
2025-05-04 00:17:44,758:INFO:          matplotlib: 3.7.5
2025-05-04 00:17:44,758:INFO:          scikitplot: 0.3.7
2025-05-04 00:17:44,758:INFO:         yellowbrick: 1.5
2025-05-04 00:17:44,758:INFO:              plotly: 5.24.1
2025-05-04 00:17:44,758:INFO:    plotly-resampler: Not installed
2025-05-04 00:17:44,758:INFO:             kaleido: 0.2.1
2025-05-04 00:17:44,758:INFO:           schemdraw: 0.15
2025-05-04 00:17:44,758:INFO:         statsmodels: 0.14.4
2025-05-04 00:17:44,758:INFO:              sktime: 0.26.0
2025-05-04 00:17:44,758:INFO:               tbats: 1.1.3
2025-05-04 00:17:44,758:INFO:            pmdarima: 2.0.4
2025-05-04 00:17:44,758:INFO:              psutil: 7.0.0
2025-05-04 00:17:44,758:INFO:          markupsafe: 3.0.2
2025-05-04 00:17:44,758:INFO:             pickle5: Not installed
2025-05-04 00:17:44,758:INFO:         cloudpickle: 2.2.1
2025-05-04 00:17:44,758:INFO:         deprecation: 2.1.0
2025-05-04 00:17:44,758:INFO:              xxhash: 3.5.0
2025-05-04 00:17:44,758:INFO:           wurlitzer: Not installed
2025-05-04 00:17:44,758:INFO:PyCaret optional dependencies:
2025-05-04 00:17:44,758:INFO:                shap: 0.47.2
2025-05-04 00:17:44,758:INFO:           interpret: Not installed
2025-05-04 00:17:44,758:INFO:                umap: Not installed
2025-05-04 00:17:44,758:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:17:44,758:INFO:  explainerdashboard: Not installed
2025-05-04 00:17:44,758:INFO:             autoviz: Not installed
2025-05-04 00:17:44,758:INFO:           fairlearn: Not installed
2025-05-04 00:17:44,758:INFO:          deepchecks: Not installed
2025-05-04 00:17:44,758:INFO:             xgboost: Not installed
2025-05-04 00:17:44,758:INFO:            catboost: Not installed
2025-05-04 00:17:44,758:INFO:              kmodes: Not installed
2025-05-04 00:17:44,758:INFO:             mlxtend: Not installed
2025-05-04 00:17:44,758:INFO:       statsforecast: Not installed
2025-05-04 00:17:44,758:INFO:        tune_sklearn: Not installed
2025-05-04 00:17:44,758:INFO:                 ray: Not installed
2025-05-04 00:17:44,758:INFO:            hyperopt: Not installed
2025-05-04 00:17:44,758:INFO:              optuna: 4.3.0
2025-05-04 00:17:44,758:INFO:               skopt: Not installed
2025-05-04 00:17:44,758:INFO:              mlflow: 1.30.0
2025-05-04 00:17:44,758:INFO:              gradio: Not installed
2025-05-04 00:17:44,758:INFO:             fastapi: 0.115.12
2025-05-04 00:17:44,758:INFO:             uvicorn: 0.34.2
2025-05-04 00:17:44,758:INFO:              m2cgen: Not installed
2025-05-04 00:17:44,758:INFO:           evidently: 0.7.3
2025-05-04 00:17:44,758:INFO:               fugue: Not installed
2025-05-04 00:17:44,758:INFO:           streamlit: Not installed
2025-05-04 00:17:44,758:INFO:             prophet: Not installed
2025-05-04 00:17:44,758:INFO:None
2025-05-04 00:17:44,758:INFO:Set up data.
2025-05-04 00:17:44,765:INFO:Set up folding strategy.
2025-05-04 00:17:44,765:INFO:Set up train/test split.
2025-05-04 00:17:44,771:INFO:Set up index.
2025-05-04 00:17:44,771:INFO:Assigning column types.
2025-05-04 00:17:44,772:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:17:44,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:44,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:44,966:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:44,966:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:44,966:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:17:45,064:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,064:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,160:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,161:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:17:45,261:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,364:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:17:45,463:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,463:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,566:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,566:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,566:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:17:45,674:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,674:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,796:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,796:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:17:45,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:45,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,009:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,010:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,011:INFO:Preparing preprocessing pipeline...
2025-05-04 00:17:46,011:INFO:Set up simple imputation.
2025-05-04 00:17:46,013:INFO:Set up encoding of categorical features.
2025-05-04 00:17:46,014:INFO:Set up column name cleaning.
2025-05-04 00:17:46,128:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:17:46,143:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:17:46,143:INFO:Creating final display dataframe.
2025-05-04 00:17:46,533:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                0b5c
2025-05-04 00:17:46,663:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,775:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:46,776:INFO:Logging experiment in loggers
2025-05-04 00:17:46,872:INFO:SubProcess save_model() called ==================================
2025-05-04 00:17:46,888:INFO:Initializing save_model()
2025-05-04 00:17:46,888:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpw039mg5l\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:17:46,888:INFO:Adding model into prep_pipe
2025-05-04 00:17:46,888:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:17:46,893:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpw039mg5l\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:17:46,901:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:17:46,901:INFO:save_model() successfully completed......................................
2025-05-04 00:17:47,070:INFO:SubProcess save_model() end ==================================
2025-05-04 00:17:47,086:INFO:setup() successfully completed in 2.03s...............
2025-05-04 00:17:47,134:INFO:Initializing create_model()
2025-05-04 00:17:47,134:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:17:47,134:INFO:Checking exceptions
2025-05-04 00:17:47,134:INFO:Importing libraries
2025-05-04 00:17:47,134:INFO:Copying training dataset
2025-05-04 00:17:47,140:INFO:Defining folds
2025-05-04 00:17:47,140:INFO:Declaring metric variables
2025-05-04 00:17:47,140:INFO:Importing untrained model
2025-05-04 00:17:47,140:INFO:Linear Regression Imported successfully
2025-05-04 00:17:47,140:INFO:Starting cross validation
2025-05-04 00:17:47,140:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:47,269:INFO:Calculating mean and std
2025-05-04 00:17:47,270:INFO:Creating metrics dataframe
2025-05-04 00:17:47,272:INFO:Finalizing model
2025-05-04 00:17:47,315:INFO:Creating Dashboard logs
2025-05-04 00:17:47,315:INFO:Model: Linear Regression
2025-05-04 00:17:47,331:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:17:47,418:INFO:Initializing predict_model()
2025-05-04 00:17:47,418:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFDC60>)
2025-05-04 00:17:47,418:INFO:Checking exceptions
2025-05-04 00:17:47,418:INFO:Preloading libraries
2025-05-04 00:17:47,456:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:47,811:INFO:Uploading results into container
2025-05-04 00:17:47,827:INFO:Uploading model into container now
2025-05-04 00:17:47,827:INFO:_master_model_container: 11
2025-05-04 00:17:47,827:INFO:_display_container: 8
2025-05-04 00:17:47,827:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:47,827:INFO:create_model() successfully completed......................................
2025-05-04 00:17:47,985:INFO:Initializing tune_model()
2025-05-04 00:17:47,985:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>)
2025-05-04 00:17:47,985:INFO:Checking exceptions
2025-05-04 00:17:47,989:INFO:Copying training dataset
2025-05-04 00:17:47,991:INFO:Checking base model
2025-05-04 00:17:47,991:INFO:Base model : Linear Regression
2025-05-04 00:17:47,991:INFO:Declaring metric variables
2025-05-04 00:17:47,991:INFO:Defining Hyperparameters
2025-05-04 00:17:47,991:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:17:48,224:INFO:Tuning with n_jobs=-1
2025-05-04 00:17:48,224:INFO:Initializing GridSearchCV
2025-05-04 00:17:48,429:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:17:48,429:INFO:Hyperparameter search completed
2025-05-04 00:17:48,429:INFO:SubProcess create_model() called ==================================
2025-05-04 00:17:48,430:INFO:Initializing create_model()
2025-05-04 00:17:48,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D05270>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:17:48,430:INFO:Checking exceptions
2025-05-04 00:17:48,430:INFO:Importing libraries
2025-05-04 00:17:48,430:INFO:Copying training dataset
2025-05-04 00:17:48,436:INFO:Defining folds
2025-05-04 00:17:48,436:INFO:Declaring metric variables
2025-05-04 00:17:48,436:INFO:Importing untrained model
2025-05-04 00:17:48,436:INFO:Declaring custom model
2025-05-04 00:17:48,436:INFO:Linear Regression Imported successfully
2025-05-04 00:17:48,436:INFO:Starting cross validation
2025-05-04 00:17:48,437:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:48,586:INFO:Calculating mean and std
2025-05-04 00:17:48,586:INFO:Creating metrics dataframe
2025-05-04 00:17:48,588:INFO:Finalizing model
2025-05-04 00:17:48,644:INFO:Uploading results into container
2025-05-04 00:17:48,645:INFO:Uploading model into container now
2025-05-04 00:17:48,645:INFO:_master_model_container: 12
2025-05-04 00:17:48,645:INFO:_display_container: 9
2025-05-04 00:17:48,645:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:48,645:INFO:create_model() successfully completed......................................
2025-05-04 00:17:48,901:INFO:SubProcess create_model() end ==================================
2025-05-04 00:17:48,901:INFO:choose_better activated
2025-05-04 00:17:48,902:INFO:SubProcess create_model() called ==================================
2025-05-04 00:17:48,902:INFO:Initializing create_model()
2025-05-04 00:17:48,902:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:17:48,902:INFO:Checking exceptions
2025-05-04 00:17:48,904:INFO:Importing libraries
2025-05-04 00:17:48,904:INFO:Copying training dataset
2025-05-04 00:17:48,907:INFO:Defining folds
2025-05-04 00:17:48,907:INFO:Declaring metric variables
2025-05-04 00:17:48,908:INFO:Importing untrained model
2025-05-04 00:17:48,908:INFO:Declaring custom model
2025-05-04 00:17:48,908:INFO:Linear Regression Imported successfully
2025-05-04 00:17:48,908:INFO:Starting cross validation
2025-05-04 00:17:48,909:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:17:49,002:INFO:Calculating mean and std
2025-05-04 00:17:49,002:INFO:Creating metrics dataframe
2025-05-04 00:17:49,002:INFO:Finalizing model
2025-05-04 00:17:49,046:INFO:Uploading results into container
2025-05-04 00:17:49,046:INFO:Uploading model into container now
2025-05-04 00:17:49,046:INFO:_master_model_container: 13
2025-05-04 00:17:49,046:INFO:_display_container: 10
2025-05-04 00:17:49,046:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:49,047:INFO:create_model() successfully completed......................................
2025-05-04 00:17:49,183:INFO:SubProcess create_model() end ==================================
2025-05-04 00:17:49,183:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:17:49,183:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:17:49,183:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:17:49,183:INFO:choose_better completed
2025-05-04 00:17:49,183:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:17:49,183:INFO:Creating Dashboard logs
2025-05-04 00:17:49,183:INFO:Model: Linear Regression
2025-05-04 00:17:49,217:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:17:49,353:INFO:Initializing predict_model()
2025-05-04 00:17:49,353:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363190430>)
2025-05-04 00:17:49,353:INFO:Checking exceptions
2025-05-04 00:17:49,353:INFO:Preloading libraries
2025-05-04 00:17:49,431:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:50,124:INFO:_master_model_container: 13
2025-05-04 00:17:50,124:INFO:_display_container: 9
2025-05-04 00:17:50,124:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:17:50,124:INFO:tune_model() successfully completed......................................
2025-05-04 00:17:50,371:INFO:gpu_param set to False
2025-05-04 00:17:50,478:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:50,478:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:50,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:50,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:17:50,565:INFO:Initializing predict_model()
2025-05-04 00:17:50,565:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363186050>)
2025-05-04 00:17:50,565:INFO:Checking exceptions
2025-05-04 00:17:50,565:INFO:Preloading libraries
2025-05-04 00:17:50,625:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:17:50,793:INFO:Initializing plot_model()
2025-05-04 00:17:50,793:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, system=True)
2025-05-04 00:17:50,793:INFO:Checking exceptions
2025-05-04 00:17:50,795:INFO:Preloading libraries
2025-05-04 00:17:50,795:INFO:Copying training dataset
2025-05-04 00:17:50,795:INFO:Plot type: feature
2025-05-04 00:17:50,856:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:17:50,958:INFO:Saving 'Feature Importance.png'
2025-05-04 00:17:51,051:INFO:Visual Rendered Successfully
2025-05-04 00:17:51,205:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:51,223:INFO:Initializing plot_model()
2025-05-04 00:17:51,223:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, system=True)
2025-05-04 00:17:51,223:INFO:Checking exceptions
2025-05-04 00:17:51,224:INFO:Preloading libraries
2025-05-04 00:17:51,225:INFO:Copying training dataset
2025-05-04 00:17:51,225:INFO:Plot type: residuals
2025-05-04 00:17:51,225:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:17:51,420:INFO:Fitting Model
2025-05-04 00:17:51,420:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:17:51,477:INFO:Scoring test/hold-out set
2025-05-04 00:17:51,522:INFO:Saving 'Residuals.png'
2025-05-04 00:17:51,862:INFO:Visual Rendered Successfully
2025-05-04 00:17:52,003:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:52,018:INFO:Initializing plot_model()
2025-05-04 00:17:52,018:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, system=True)
2025-05-04 00:17:52,018:INFO:Checking exceptions
2025-05-04 00:17:52,033:INFO:Preloading libraries
2025-05-04 00:17:52,033:INFO:Copying training dataset
2025-05-04 00:17:52,033:INFO:Plot type: error
2025-05-04 00:17:52,109:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:17:52,198:INFO:Fitting Model
2025-05-04 00:17:52,198:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:17:52,198:INFO:Scoring test/hold-out set
2025-05-04 00:17:52,230:INFO:Saving 'Prediction Error.png'
2025-05-04 00:17:52,416:INFO:Visual Rendered Successfully
2025-05-04 00:17:52,578:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:52,595:INFO:Initializing plot_model()
2025-05-04 00:17:52,595:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026365368A90>, system=True)
2025-05-04 00:17:52,595:INFO:Checking exceptions
2025-05-04 00:17:52,597:INFO:Preloading libraries
2025-05-04 00:17:52,597:INFO:Copying training dataset
2025-05-04 00:17:52,597:INFO:Plot type: cooks
2025-05-04 00:17:52,678:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:17:52,765:INFO:Fitting Model
2025-05-04 00:17:52,834:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:17:52,988:INFO:Visual Rendered Successfully
2025-05-04 00:17:53,174:INFO:plot_model() successfully completed......................................
2025-05-04 00:17:53,219:INFO:Initializing save_model()
2025-05-04 00:17:53,219:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_001753_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:17:53,219:INFO:Adding model into prep_pipe
2025-05-04 00:17:53,224:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_001753_4.pkl saved in current working directory
2025-05-04 00:17:53,231:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:17:53,231:INFO:save_model() successfully completed......................................
2025-05-04 00:26:04,971:INFO:PyCaret RegressionExperiment
2025-05-04 00:26:04,971:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:26:04,971:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:26:04,971:INFO:version 3.3.2
2025-05-04 00:26:04,971:INFO:Initializing setup()
2025-05-04 00:26:04,971:INFO:self.USI: 8243
2025-05-04 00:26:04,971:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:26:04,972:INFO:Checking environment
2025-05-04 00:26:04,972:INFO:python_version: 3.10.11
2025-05-04 00:26:04,972:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:26:04,972:INFO:machine: AMD64
2025-05-04 00:26:04,972:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:26:04,978:INFO:Memory: svmem(total=8403075072, available=1947602944, percent=76.8, used=6455472128, free=1947602944)
2025-05-04 00:26:04,979:INFO:Physical Core: 6
2025-05-04 00:26:04,979:INFO:Logical Core: 12
2025-05-04 00:26:04,979:INFO:Checking libraries
2025-05-04 00:26:04,979:INFO:System:
2025-05-04 00:26:04,979:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:26:04,979:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:26:04,979:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:26:04,979:INFO:PyCaret required dependencies:
2025-05-04 00:26:04,979:INFO:                 pip: 23.0.1
2025-05-04 00:26:04,979:INFO:          setuptools: 65.5.0
2025-05-04 00:26:04,979:INFO:             pycaret: 3.3.2
2025-05-04 00:26:04,979:INFO:             IPython: 8.36.0
2025-05-04 00:26:04,979:INFO:          ipywidgets: 8.1.6
2025-05-04 00:26:04,979:INFO:                tqdm: 4.67.1
2025-05-04 00:26:04,979:INFO:               numpy: 1.26.4
2025-05-04 00:26:04,979:INFO:              pandas: 1.5.3
2025-05-04 00:26:04,979:INFO:              jinja2: 3.1.6
2025-05-04 00:26:04,979:INFO:               scipy: 1.11.4
2025-05-04 00:26:04,979:INFO:              joblib: 1.3.2
2025-05-04 00:26:04,979:INFO:             sklearn: 1.4.2
2025-05-04 00:26:04,979:INFO:                pyod: 2.0.4
2025-05-04 00:26:04,979:INFO:            imblearn: 0.13.0
2025-05-04 00:26:04,979:INFO:   category_encoders: 2.7.0
2025-05-04 00:26:04,980:INFO:            lightgbm: 4.6.0
2025-05-04 00:26:04,980:INFO:               numba: 0.61.0
2025-05-04 00:26:04,980:INFO:            requests: 2.32.3
2025-05-04 00:26:04,980:INFO:          matplotlib: 3.7.5
2025-05-04 00:26:04,980:INFO:          scikitplot: 0.3.7
2025-05-04 00:26:04,980:INFO:         yellowbrick: 1.5
2025-05-04 00:26:04,980:INFO:              plotly: 5.24.1
2025-05-04 00:26:04,980:INFO:    plotly-resampler: Not installed
2025-05-04 00:26:04,980:INFO:             kaleido: 0.2.1
2025-05-04 00:26:04,980:INFO:           schemdraw: 0.15
2025-05-04 00:26:04,980:INFO:         statsmodels: 0.14.4
2025-05-04 00:26:04,980:INFO:              sktime: 0.26.0
2025-05-04 00:26:04,980:INFO:               tbats: 1.1.3
2025-05-04 00:26:04,980:INFO:            pmdarima: 2.0.4
2025-05-04 00:26:04,980:INFO:              psutil: 7.0.0
2025-05-04 00:26:04,980:INFO:          markupsafe: 3.0.2
2025-05-04 00:26:04,980:INFO:             pickle5: Not installed
2025-05-04 00:26:04,980:INFO:         cloudpickle: 2.2.1
2025-05-04 00:26:04,980:INFO:         deprecation: 2.1.0
2025-05-04 00:26:04,980:INFO:              xxhash: 3.5.0
2025-05-04 00:26:04,980:INFO:           wurlitzer: Not installed
2025-05-04 00:26:04,980:INFO:PyCaret optional dependencies:
2025-05-04 00:26:04,981:INFO:                shap: 0.47.2
2025-05-04 00:26:04,981:INFO:           interpret: Not installed
2025-05-04 00:26:04,981:INFO:                umap: Not installed
2025-05-04 00:26:04,981:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:26:04,981:INFO:  explainerdashboard: Not installed
2025-05-04 00:26:04,981:INFO:             autoviz: Not installed
2025-05-04 00:26:04,981:INFO:           fairlearn: Not installed
2025-05-04 00:26:04,981:INFO:          deepchecks: Not installed
2025-05-04 00:26:04,981:INFO:             xgboost: Not installed
2025-05-04 00:26:04,981:INFO:            catboost: Not installed
2025-05-04 00:26:04,981:INFO:              kmodes: Not installed
2025-05-04 00:26:04,981:INFO:             mlxtend: Not installed
2025-05-04 00:26:04,981:INFO:       statsforecast: Not installed
2025-05-04 00:26:04,981:INFO:        tune_sklearn: Not installed
2025-05-04 00:26:04,981:INFO:                 ray: Not installed
2025-05-04 00:26:04,981:INFO:            hyperopt: Not installed
2025-05-04 00:26:04,981:INFO:              optuna: 4.3.0
2025-05-04 00:26:04,981:INFO:               skopt: Not installed
2025-05-04 00:26:04,981:INFO:              mlflow: 1.30.0
2025-05-04 00:26:04,981:INFO:              gradio: Not installed
2025-05-04 00:26:04,981:INFO:             fastapi: 0.115.12
2025-05-04 00:26:04,981:INFO:             uvicorn: 0.34.2
2025-05-04 00:26:04,981:INFO:              m2cgen: Not installed
2025-05-04 00:26:04,981:INFO:           evidently: 0.7.3
2025-05-04 00:26:04,981:INFO:               fugue: Not installed
2025-05-04 00:26:04,981:INFO:           streamlit: Not installed
2025-05-04 00:26:04,982:INFO:             prophet: Not installed
2025-05-04 00:26:04,982:INFO:None
2025-05-04 00:26:04,982:INFO:Set up data.
2025-05-04 00:26:04,990:INFO:Set up folding strategy.
2025-05-04 00:26:04,991:INFO:Set up train/test split.
2025-05-04 00:26:04,997:INFO:Set up index.
2025-05-04 00:26:04,997:INFO:Assigning column types.
2025-05-04 00:26:05,001:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:26:05,109:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,210:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,210:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:26:05,344:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,344:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,490:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,490:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:26:05,623:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,721:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:26:05,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,940:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:05,940:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:26:06,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,033:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,163:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,164:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:26:06,263:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,362:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,362:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,362:INFO:Preparing preprocessing pipeline...
2025-05-04 00:26:06,362:INFO:Set up simple imputation.
2025-05-04 00:26:06,378:INFO:Set up encoding of categorical features.
2025-05-04 00:26:06,378:INFO:Set up column name cleaning.
2025-05-04 00:26:06,460:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:26:06,468:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:26:06,468:INFO:Creating final display dataframe.
2025-05-04 00:26:06,581:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                8243
2025-05-04 00:26:06,674:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,674:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,774:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:06,775:INFO:Logging experiment in loggers
2025-05-04 00:26:06,846:INFO:SubProcess save_model() called ==================================
2025-05-04 00:26:06,862:INFO:Initializing save_model()
2025-05-04 00:26:06,862:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpyhgph8x3\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:26:06,862:INFO:Adding model into prep_pipe
2025-05-04 00:26:06,862:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:26:06,862:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpyhgph8x3\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:26:06,878:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:26:06,878:INFO:save_model() successfully completed......................................
2025-05-04 00:26:07,133:INFO:SubProcess save_model() end ==================================
2025-05-04 00:26:07,143:INFO:setup() successfully completed in 1.81s...............
2025-05-04 00:26:07,190:INFO:Initializing create_model()
2025-05-04 00:26:07,190:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:26:07,190:INFO:Checking exceptions
2025-05-04 00:26:07,190:INFO:Importing libraries
2025-05-04 00:26:07,190:INFO:Copying training dataset
2025-05-04 00:26:07,190:INFO:Defining folds
2025-05-04 00:26:07,190:INFO:Declaring metric variables
2025-05-04 00:26:07,190:INFO:Importing untrained model
2025-05-04 00:26:07,190:INFO:Linear Regression Imported successfully
2025-05-04 00:26:07,190:INFO:Starting cross validation
2025-05-04 00:26:07,190:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:26:11,470:INFO:Calculating mean and std
2025-05-04 00:26:11,471:INFO:Creating metrics dataframe
2025-05-04 00:26:11,474:INFO:Finalizing model
2025-05-04 00:26:11,581:INFO:Creating Dashboard logs
2025-05-04 00:26:11,582:INFO:Model: Linear Regression
2025-05-04 00:26:11,606:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:26:11,699:INFO:Initializing predict_model()
2025-05-04 00:26:11,699:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFEF80>)
2025-05-04 00:26:11,699:INFO:Checking exceptions
2025-05-04 00:26:11,699:INFO:Preloading libraries
2025-05-04 00:26:11,765:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:26:12,125:INFO:Uploading results into container
2025-05-04 00:26:12,125:INFO:Uploading model into container now
2025-05-04 00:26:12,125:INFO:_master_model_container: 11
2025-05-04 00:26:12,125:INFO:_display_container: 8
2025-05-04 00:26:12,125:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:26:12,125:INFO:create_model() successfully completed......................................
2025-05-04 00:26:12,331:INFO:Initializing tune_model()
2025-05-04 00:26:12,331:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>)
2025-05-04 00:26:12,331:INFO:Checking exceptions
2025-05-04 00:26:12,333:INFO:Copying training dataset
2025-05-04 00:26:12,335:INFO:Checking base model
2025-05-04 00:26:12,335:INFO:Base model : Linear Regression
2025-05-04 00:26:12,335:INFO:Declaring metric variables
2025-05-04 00:26:12,335:INFO:Defining Hyperparameters
2025-05-04 00:26:12,335:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 00:26:12,523:INFO:Tuning with n_jobs=-1
2025-05-04 00:26:12,523:INFO:Initializing GridSearchCV
2025-05-04 00:26:16,571:INFO:best_params: {'actual_estimator__fit_intercept': True}
2025-05-04 00:26:16,571:INFO:Hyperparameter search completed
2025-05-04 00:26:16,571:INFO:SubProcess create_model() called ==================================
2025-05-04 00:26:16,571:INFO:Initializing create_model()
2025-05-04 00:26:16,571:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026361D4C100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True})
2025-05-04 00:26:16,571:INFO:Checking exceptions
2025-05-04 00:26:16,571:INFO:Importing libraries
2025-05-04 00:26:16,571:INFO:Copying training dataset
2025-05-04 00:26:16,571:INFO:Defining folds
2025-05-04 00:26:16,571:INFO:Declaring metric variables
2025-05-04 00:26:16,571:INFO:Importing untrained model
2025-05-04 00:26:16,571:INFO:Declaring custom model
2025-05-04 00:26:16,571:INFO:Linear Regression Imported successfully
2025-05-04 00:26:16,571:INFO:Starting cross validation
2025-05-04 00:26:16,587:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:26:16,748:INFO:Calculating mean and std
2025-05-04 00:26:16,748:INFO:Creating metrics dataframe
2025-05-04 00:26:16,748:INFO:Finalizing model
2025-05-04 00:26:16,803:INFO:Uploading results into container
2025-05-04 00:26:16,803:INFO:Uploading model into container now
2025-05-04 00:26:16,803:INFO:_master_model_container: 12
2025-05-04 00:26:16,803:INFO:_display_container: 9
2025-05-04 00:26:16,804:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:26:16,804:INFO:create_model() successfully completed......................................
2025-05-04 00:26:16,958:INFO:SubProcess create_model() end ==================================
2025-05-04 00:26:16,958:INFO:choose_better activated
2025-05-04 00:26:16,958:INFO:SubProcess create_model() called ==================================
2025-05-04 00:26:16,959:INFO:Initializing create_model()
2025-05-04 00:26:16,959:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:26:16,959:INFO:Checking exceptions
2025-05-04 00:26:16,961:INFO:Importing libraries
2025-05-04 00:26:16,961:INFO:Copying training dataset
2025-05-04 00:26:16,964:INFO:Defining folds
2025-05-04 00:26:16,964:INFO:Declaring metric variables
2025-05-04 00:26:16,964:INFO:Importing untrained model
2025-05-04 00:26:16,964:INFO:Declaring custom model
2025-05-04 00:26:16,964:INFO:Linear Regression Imported successfully
2025-05-04 00:26:16,964:INFO:Starting cross validation
2025-05-04 00:26:16,965:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:26:17,105:INFO:Calculating mean and std
2025-05-04 00:26:17,105:INFO:Creating metrics dataframe
2025-05-04 00:26:17,108:INFO:Finalizing model
2025-05-04 00:26:17,142:INFO:Uploading results into container
2025-05-04 00:26:17,142:INFO:Uploading model into container now
2025-05-04 00:26:17,142:INFO:_master_model_container: 13
2025-05-04 00:26:17,142:INFO:_display_container: 10
2025-05-04 00:26:17,142:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:26:17,142:INFO:create_model() successfully completed......................................
2025-05-04 00:26:17,280:INFO:SubProcess create_model() end ==================================
2025-05-04 00:26:17,280:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:26:17,280:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9308.3333
2025-05-04 00:26:17,280:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 00:26:17,280:INFO:choose_better completed
2025-05-04 00:26:17,280:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 00:26:17,280:INFO:Creating Dashboard logs
2025-05-04 00:26:17,280:INFO:Model: Linear Regression
2025-05-04 00:26:17,296:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:26:17,438:INFO:Initializing predict_model()
2025-05-04 00:26:17,438:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFE3B0>)
2025-05-04 00:26:17,438:INFO:Checking exceptions
2025-05-04 00:26:17,438:INFO:Preloading libraries
2025-05-04 00:26:17,494:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:26:17,823:INFO:_master_model_container: 13
2025-05-04 00:26:17,823:INFO:_display_container: 9
2025-05-04 00:26:17,823:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:26:17,823:INFO:tune_model() successfully completed......................................
2025-05-04 00:26:18,078:INFO:gpu_param set to False
2025-05-04 00:26:18,205:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:18,205:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:18,314:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:18,315:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:18,317:INFO:Initializing predict_model()
2025-05-04 00:26:18,317:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026363184940>)
2025-05-04 00:26:18,317:INFO:Checking exceptions
2025-05-04 00:26:18,317:INFO:Preloading libraries
2025-05-04 00:26:18,369:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:26:18,561:INFO:Initializing plot_model()
2025-05-04 00:26:18,561:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, system=True)
2025-05-04 00:26:18,561:INFO:Checking exceptions
2025-05-04 00:26:18,562:INFO:Preloading libraries
2025-05-04 00:26:18,562:INFO:Copying training dataset
2025-05-04 00:26:18,562:INFO:Plot type: feature
2025-05-04 00:26:18,612:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:26:18,816:INFO:Saving 'Feature Importance.png'
2025-05-04 00:26:18,929:INFO:Visual Rendered Successfully
2025-05-04 00:26:19,066:INFO:plot_model() successfully completed......................................
2025-05-04 00:26:19,082:INFO:Initializing plot_model()
2025-05-04 00:26:19,082:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, system=True)
2025-05-04 00:26:19,082:INFO:Checking exceptions
2025-05-04 00:26:19,085:INFO:Preloading libraries
2025-05-04 00:26:19,085:INFO:Copying training dataset
2025-05-04 00:26:19,085:INFO:Plot type: residuals
2025-05-04 00:26:19,085:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 00:26:19,275:INFO:Fitting Model
2025-05-04 00:26:19,279:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:26:19,316:INFO:Scoring test/hold-out set
2025-05-04 00:26:19,348:INFO:Saving 'Residuals.png'
2025-05-04 00:26:19,677:INFO:Visual Rendered Successfully
2025-05-04 00:26:19,808:INFO:plot_model() successfully completed......................................
2025-05-04 00:26:19,823:INFO:Initializing plot_model()
2025-05-04 00:26:19,823:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, system=True)
2025-05-04 00:26:19,823:INFO:Checking exceptions
2025-05-04 00:26:19,836:INFO:Preloading libraries
2025-05-04 00:26:19,837:INFO:Copying training dataset
2025-05-04 00:26:19,837:INFO:Plot type: error
2025-05-04 00:26:19,909:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:26:19,986:INFO:Fitting Model
2025-05-04 00:26:19,986:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 00:26:19,986:INFO:Scoring test/hold-out set
2025-05-04 00:26:20,017:INFO:Saving 'Prediction Error.png'
2025-05-04 00:26:20,209:INFO:Visual Rendered Successfully
2025-05-04 00:26:20,383:INFO:plot_model() successfully completed......................................
2025-05-04 00:26:20,404:INFO:Initializing plot_model()
2025-05-04 00:26:20,404:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002636287C730>, system=True)
2025-05-04 00:26:20,404:INFO:Checking exceptions
2025-05-04 00:26:20,405:INFO:Preloading libraries
2025-05-04 00:26:20,405:INFO:Copying training dataset
2025-05-04 00:26:20,405:INFO:Plot type: cooks
2025-05-04 00:26:20,484:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 00:26:20,582:INFO:Fitting Model
2025-05-04 00:26:20,649:INFO:Saving 'Cooks Distance.png'
2025-05-04 00:26:20,817:INFO:Visual Rendered Successfully
2025-05-04 00:26:21,098:INFO:plot_model() successfully completed......................................
2025-05-04 00:26:21,148:INFO:Initializing save_model()
2025-05-04 00:26:21,148:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:26:21,148:INFO:Adding model into prep_pipe
2025-05-04 00:26:21,158:INFO:./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4.pkl saved in current working directory
2025-05-04 00:26:21,168:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:26:21,168:INFO:save_model() successfully completed......................................
2025-05-04 00:26:36,323:INFO:PyCaret RegressionExperiment
2025-05-04 00:26:36,323:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:26:36,323:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:26:36,323:INFO:version 3.3.2
2025-05-04 00:26:36,323:INFO:Initializing setup()
2025-05-04 00:26:36,323:INFO:self.USI: 9825
2025-05-04 00:26:36,323:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:26:36,324:INFO:Checking environment
2025-05-04 00:26:36,324:INFO:python_version: 3.10.11
2025-05-04 00:26:36,324:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:26:36,324:INFO:machine: AMD64
2025-05-04 00:26:36,324:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:26:36,328:INFO:Memory: svmem(total=8403075072, available=389861376, percent=95.4, used=8013213696, free=389861376)
2025-05-04 00:26:36,329:INFO:Physical Core: 6
2025-05-04 00:26:36,329:INFO:Logical Core: 12
2025-05-04 00:26:36,329:INFO:Checking libraries
2025-05-04 00:26:36,329:INFO:System:
2025-05-04 00:26:36,329:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:26:36,329:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:26:36,329:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:26:36,329:INFO:PyCaret required dependencies:
2025-05-04 00:26:36,329:INFO:                 pip: 23.0.1
2025-05-04 00:26:36,329:INFO:          setuptools: 65.5.0
2025-05-04 00:26:36,329:INFO:             pycaret: 3.3.2
2025-05-04 00:26:36,329:INFO:             IPython: 8.36.0
2025-05-04 00:26:36,329:INFO:          ipywidgets: 8.1.6
2025-05-04 00:26:36,329:INFO:                tqdm: 4.67.1
2025-05-04 00:26:36,329:INFO:               numpy: 1.26.4
2025-05-04 00:26:36,329:INFO:              pandas: 1.5.3
2025-05-04 00:26:36,329:INFO:              jinja2: 3.1.6
2025-05-04 00:26:36,329:INFO:               scipy: 1.11.4
2025-05-04 00:26:36,329:INFO:              joblib: 1.3.2
2025-05-04 00:26:36,329:INFO:             sklearn: 1.4.2
2025-05-04 00:26:36,329:INFO:                pyod: 2.0.4
2025-05-04 00:26:36,330:INFO:            imblearn: 0.13.0
2025-05-04 00:26:36,330:INFO:   category_encoders: 2.7.0
2025-05-04 00:26:36,330:INFO:            lightgbm: 4.6.0
2025-05-04 00:26:36,330:INFO:               numba: 0.61.0
2025-05-04 00:26:36,330:INFO:            requests: 2.32.3
2025-05-04 00:26:36,330:INFO:          matplotlib: 3.7.5
2025-05-04 00:26:36,330:INFO:          scikitplot: 0.3.7
2025-05-04 00:26:36,330:INFO:         yellowbrick: 1.5
2025-05-04 00:26:36,330:INFO:              plotly: 5.24.1
2025-05-04 00:26:36,330:INFO:    plotly-resampler: Not installed
2025-05-04 00:26:36,330:INFO:             kaleido: 0.2.1
2025-05-04 00:26:36,330:INFO:           schemdraw: 0.15
2025-05-04 00:26:36,330:INFO:         statsmodels: 0.14.4
2025-05-04 00:26:36,330:INFO:              sktime: 0.26.0
2025-05-04 00:26:36,330:INFO:               tbats: 1.1.3
2025-05-04 00:26:36,330:INFO:            pmdarima: 2.0.4
2025-05-04 00:26:36,330:INFO:              psutil: 7.0.0
2025-05-04 00:26:36,330:INFO:          markupsafe: 3.0.2
2025-05-04 00:26:36,330:INFO:             pickle5: Not installed
2025-05-04 00:26:36,330:INFO:         cloudpickle: 2.2.1
2025-05-04 00:26:36,330:INFO:         deprecation: 2.1.0
2025-05-04 00:26:36,330:INFO:              xxhash: 3.5.0
2025-05-04 00:26:36,330:INFO:           wurlitzer: Not installed
2025-05-04 00:26:36,330:INFO:PyCaret optional dependencies:
2025-05-04 00:26:36,330:INFO:                shap: 0.47.2
2025-05-04 00:26:36,330:INFO:           interpret: Not installed
2025-05-04 00:26:36,330:INFO:                umap: Not installed
2025-05-04 00:26:36,330:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:26:36,331:INFO:  explainerdashboard: Not installed
2025-05-04 00:26:36,331:INFO:             autoviz: Not installed
2025-05-04 00:26:36,331:INFO:           fairlearn: Not installed
2025-05-04 00:26:36,331:INFO:          deepchecks: Not installed
2025-05-04 00:26:36,331:INFO:             xgboost: Not installed
2025-05-04 00:26:36,331:INFO:            catboost: Not installed
2025-05-04 00:26:36,331:INFO:              kmodes: Not installed
2025-05-04 00:26:36,331:INFO:             mlxtend: Not installed
2025-05-04 00:26:36,331:INFO:       statsforecast: Not installed
2025-05-04 00:26:36,331:INFO:        tune_sklearn: Not installed
2025-05-04 00:26:36,331:INFO:                 ray: Not installed
2025-05-04 00:26:36,331:INFO:            hyperopt: Not installed
2025-05-04 00:26:36,331:INFO:              optuna: 4.3.0
2025-05-04 00:26:36,331:INFO:               skopt: Not installed
2025-05-04 00:26:36,331:INFO:              mlflow: 1.30.0
2025-05-04 00:26:36,331:INFO:              gradio: Not installed
2025-05-04 00:26:36,331:INFO:             fastapi: 0.115.12
2025-05-04 00:26:36,331:INFO:             uvicorn: 0.34.2
2025-05-04 00:26:36,331:INFO:              m2cgen: Not installed
2025-05-04 00:26:36,331:INFO:           evidently: 0.7.3
2025-05-04 00:26:36,331:INFO:               fugue: Not installed
2025-05-04 00:26:36,331:INFO:           streamlit: Not installed
2025-05-04 00:26:36,331:INFO:             prophet: Not installed
2025-05-04 00:26:36,331:INFO:None
2025-05-04 00:26:36,331:INFO:Set up data.
2025-05-04 00:26:36,336:INFO:Set up folding strategy.
2025-05-04 00:26:36,336:INFO:Set up train/test split.
2025-05-04 00:26:36,340:INFO:Set up index.
2025-05-04 00:26:36,340:INFO:Assigning column types.
2025-05-04 00:26:36,343:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:26:36,446:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,446:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,539:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,539:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,540:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:26:36,644:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,740:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:26:36,835:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,835:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:36,942:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:26:37,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,133:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,133:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:26:37,250:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,251:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,359:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,359:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:26:37,466:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,466:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,568:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,568:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,569:INFO:Preparing preprocessing pipeline...
2025-05-04 00:26:37,569:INFO:Set up simple imputation.
2025-05-04 00:26:37,571:INFO:Set up encoding of categorical features.
2025-05-04 00:26:37,572:INFO:Set up column name cleaning.
2025-05-04 00:26:37,645:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:26:37,654:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:26:37,654:INFO:Creating final display dataframe.
2025-05-04 00:26:37,815:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                9825
2025-05-04 00:26:37,955:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:37,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:38,076:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:38,077:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:26:38,079:INFO:Logging experiment in loggers
2025-05-04 00:26:38,198:INFO:SubProcess save_model() called ==================================
2025-05-04 00:26:38,220:INFO:Initializing save_model()
2025-05-04 00:26:38,221:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpyra9ohcq\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:26:38,221:INFO:Adding model into prep_pipe
2025-05-04 00:26:38,221:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:26:38,229:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpyra9ohcq\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:26:38,238:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:26:38,238:INFO:save_model() successfully completed......................................
2025-05-04 00:26:38,495:INFO:SubProcess save_model() end ==================================
2025-05-04 00:26:38,510:INFO:setup() successfully completed in 1.76s...............
2025-05-04 00:26:38,555:INFO:Initializing load_model()
2025-05-04 00:26:38,555:INFO:load_model(model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4, platform=None, authentication=None, verbose=False)
2025-05-04 00:26:38,580:INFO:Initializing finalize_model()
2025-05-04 00:26:38,581:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362E928C0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-04 00:26:38,589:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:26:38,606:INFO:Initializing create_model()
2025-05-04 00:26:38,606:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362E928C0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:26:38,607:INFO:Checking exceptions
2025-05-04 00:26:38,611:INFO:Importing libraries
2025-05-04 00:26:38,611:INFO:Copying training dataset
2025-05-04 00:26:38,612:INFO:Defining folds
2025-05-04 00:26:38,612:INFO:Declaring metric variables
2025-05-04 00:26:38,612:INFO:Importing untrained model
2025-05-04 00:26:38,612:INFO:Declaring custom model
2025-05-04 00:26:38,618:INFO:Linear Regression Imported successfully
2025-05-04 00:26:38,620:INFO:Cross validation set to False
2025-05-04 00:26:38,620:INFO:Fitting Model
2025-05-04 00:26:38,720:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:26:38,721:INFO:create_model() successfully completed......................................
2025-05-04 00:26:38,875:INFO:Creating Dashboard logs
2025-05-04 00:26:38,875:INFO:Model: Linear Regression
2025-05-04 00:26:38,906:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:26:39,215:INFO:_master_model_container: 10
2025-05-04 00:26:39,215:INFO:_display_container: 7
2025-05-04 00:26:39,231:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:26:39,231:INFO:finalize_model() successfully completed......................................
2025-05-04 00:26:39,403:INFO:Initializing save_model()
2025-05-04 00:26:39,403:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), model_name=./automl_outputs\automl_4\models\final_lr_20250504_002639_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:26:39,403:INFO:Adding model into prep_pipe
2025-05-04 00:26:39,403:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:26:39,403:INFO:./automl_outputs\automl_4\models\final_lr_20250504_002639_4.pkl saved in current working directory
2025-05-04 00:26:39,422:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:26:39,422:INFO:save_model() successfully completed......................................
2025-05-04 00:28:37,226:INFO:PyCaret RegressionExperiment
2025-05-04 00:28:37,226:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:28:37,226:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:28:37,226:INFO:version 3.3.2
2025-05-04 00:28:37,226:INFO:Initializing setup()
2025-05-04 00:28:37,226:INFO:self.USI: 8bb6
2025-05-04 00:28:37,226:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:28:37,226:INFO:Checking environment
2025-05-04 00:28:37,226:INFO:python_version: 3.10.11
2025-05-04 00:28:37,226:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:28:37,226:INFO:machine: AMD64
2025-05-04 00:28:37,226:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:28:37,226:INFO:Memory: svmem(total=8403075072, available=803393536, percent=90.4, used=7599681536, free=803393536)
2025-05-04 00:28:37,226:INFO:Physical Core: 6
2025-05-04 00:28:37,226:INFO:Logical Core: 12
2025-05-04 00:28:37,226:INFO:Checking libraries
2025-05-04 00:28:37,226:INFO:System:
2025-05-04 00:28:37,226:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:28:37,226:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:28:37,226:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:28:37,226:INFO:PyCaret required dependencies:
2025-05-04 00:28:37,226:INFO:                 pip: 23.0.1
2025-05-04 00:28:37,226:INFO:          setuptools: 65.5.0
2025-05-04 00:28:37,226:INFO:             pycaret: 3.3.2
2025-05-04 00:28:37,226:INFO:             IPython: 8.36.0
2025-05-04 00:28:37,226:INFO:          ipywidgets: 8.1.6
2025-05-04 00:28:37,226:INFO:                tqdm: 4.67.1
2025-05-04 00:28:37,226:INFO:               numpy: 1.26.4
2025-05-04 00:28:37,226:INFO:              pandas: 1.5.3
2025-05-04 00:28:37,226:INFO:              jinja2: 3.1.6
2025-05-04 00:28:37,226:INFO:               scipy: 1.11.4
2025-05-04 00:28:37,226:INFO:              joblib: 1.3.2
2025-05-04 00:28:37,226:INFO:             sklearn: 1.4.2
2025-05-04 00:28:37,226:INFO:                pyod: 2.0.4
2025-05-04 00:28:37,226:INFO:            imblearn: 0.13.0
2025-05-04 00:28:37,226:INFO:   category_encoders: 2.7.0
2025-05-04 00:28:37,226:INFO:            lightgbm: 4.6.0
2025-05-04 00:28:37,226:INFO:               numba: 0.61.0
2025-05-04 00:28:37,226:INFO:            requests: 2.32.3
2025-05-04 00:28:37,226:INFO:          matplotlib: 3.7.5
2025-05-04 00:28:37,226:INFO:          scikitplot: 0.3.7
2025-05-04 00:28:37,226:INFO:         yellowbrick: 1.5
2025-05-04 00:28:37,226:INFO:              plotly: 5.24.1
2025-05-04 00:28:37,226:INFO:    plotly-resampler: Not installed
2025-05-04 00:28:37,226:INFO:             kaleido: 0.2.1
2025-05-04 00:28:37,226:INFO:           schemdraw: 0.15
2025-05-04 00:28:37,226:INFO:         statsmodels: 0.14.4
2025-05-04 00:28:37,226:INFO:              sktime: 0.26.0
2025-05-04 00:28:37,226:INFO:               tbats: 1.1.3
2025-05-04 00:28:37,226:INFO:            pmdarima: 2.0.4
2025-05-04 00:28:37,226:INFO:              psutil: 7.0.0
2025-05-04 00:28:37,226:INFO:          markupsafe: 3.0.2
2025-05-04 00:28:37,226:INFO:             pickle5: Not installed
2025-05-04 00:28:37,226:INFO:         cloudpickle: 2.2.1
2025-05-04 00:28:37,226:INFO:         deprecation: 2.1.0
2025-05-04 00:28:37,226:INFO:              xxhash: 3.5.0
2025-05-04 00:28:37,226:INFO:           wurlitzer: Not installed
2025-05-04 00:28:37,226:INFO:PyCaret optional dependencies:
2025-05-04 00:28:37,226:INFO:                shap: 0.47.2
2025-05-04 00:28:37,226:INFO:           interpret: Not installed
2025-05-04 00:28:37,226:INFO:                umap: Not installed
2025-05-04 00:28:37,226:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:28:37,226:INFO:  explainerdashboard: Not installed
2025-05-04 00:28:37,226:INFO:             autoviz: Not installed
2025-05-04 00:28:37,226:INFO:           fairlearn: Not installed
2025-05-04 00:28:37,226:INFO:          deepchecks: Not installed
2025-05-04 00:28:37,226:INFO:             xgboost: Not installed
2025-05-04 00:28:37,226:INFO:            catboost: Not installed
2025-05-04 00:28:37,226:INFO:              kmodes: Not installed
2025-05-04 00:28:37,226:INFO:             mlxtend: Not installed
2025-05-04 00:28:37,226:INFO:       statsforecast: Not installed
2025-05-04 00:28:37,226:INFO:        tune_sklearn: Not installed
2025-05-04 00:28:37,226:INFO:                 ray: Not installed
2025-05-04 00:28:37,226:INFO:            hyperopt: Not installed
2025-05-04 00:28:37,226:INFO:              optuna: 4.3.0
2025-05-04 00:28:37,226:INFO:               skopt: Not installed
2025-05-04 00:28:37,226:INFO:              mlflow: 1.30.0
2025-05-04 00:28:37,226:INFO:              gradio: Not installed
2025-05-04 00:28:37,226:INFO:             fastapi: 0.115.12
2025-05-04 00:28:37,226:INFO:             uvicorn: 0.34.2
2025-05-04 00:28:37,226:INFO:              m2cgen: Not installed
2025-05-04 00:28:37,226:INFO:           evidently: 0.7.3
2025-05-04 00:28:37,226:INFO:               fugue: Not installed
2025-05-04 00:28:37,226:INFO:           streamlit: Not installed
2025-05-04 00:28:37,226:INFO:             prophet: Not installed
2025-05-04 00:28:37,226:INFO:None
2025-05-04 00:28:37,226:INFO:Set up data.
2025-05-04 00:28:37,226:INFO:Set up folding strategy.
2025-05-04 00:28:37,226:INFO:Set up train/test split.
2025-05-04 00:28:37,242:INFO:Set up index.
2025-05-04 00:28:37,242:INFO:Assigning column types.
2025-05-04 00:28:37,242:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:28:37,336:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,336:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,430:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,430:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,430:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:28:37,524:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,524:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,641:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,641:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,641:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:28:37,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,838:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,838:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,838:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:28:37,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:37,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,026:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,026:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,026:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:28:38,123:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,123:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,230:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,230:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:28:38,323:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,323:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,428:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,428:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,429:INFO:Preparing preprocessing pipeline...
2025-05-04 00:28:38,429:INFO:Set up simple imputation.
2025-05-04 00:28:38,431:INFO:Set up encoding of categorical features.
2025-05-04 00:28:38,432:INFO:Set up column name cleaning.
2025-05-04 00:28:38,533:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:28:38,542:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:28:38,542:INFO:Creating final display dataframe.
2025-05-04 00:28:38,686:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                8bb6
2025-05-04 00:28:38,790:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,790:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,894:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,895:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:28:38,895:INFO:Logging experiment in loggers
2025-05-04 00:28:38,984:INFO:SubProcess save_model() called ==================================
2025-05-04 00:28:38,999:INFO:Initializing save_model()
2025-05-04 00:28:38,999:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpyhed7tcf\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:28:38,999:INFO:Adding model into prep_pipe
2025-05-04 00:28:38,999:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:28:39,004:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpyhed7tcf\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:28:39,011:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:28:39,011:INFO:save_model() successfully completed......................................
2025-05-04 00:28:39,159:INFO:SubProcess save_model() end ==================================
2025-05-04 00:28:39,176:INFO:setup() successfully completed in 1.67s...............
2025-05-04 00:28:39,218:INFO:Initializing load_model()
2025-05-04 00:28:39,218:INFO:load_model(model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4, platform=None, authentication=None, verbose=False)
2025-05-04 00:28:39,241:INFO:Initializing finalize_model()
2025-05-04 00:28:39,241:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BF8EB0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-04 00:28:39,249:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:28:39,259:INFO:Initializing create_model()
2025-05-04 00:28:39,259:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362BF8EB0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:28:39,259:INFO:Checking exceptions
2025-05-04 00:28:39,260:INFO:Importing libraries
2025-05-04 00:28:39,260:INFO:Copying training dataset
2025-05-04 00:28:39,260:INFO:Defining folds
2025-05-04 00:28:39,260:INFO:Declaring metric variables
2025-05-04 00:28:39,260:INFO:Importing untrained model
2025-05-04 00:28:39,260:INFO:Declaring custom model
2025-05-04 00:28:39,265:INFO:Linear Regression Imported successfully
2025-05-04 00:28:39,266:INFO:Cross validation set to False
2025-05-04 00:28:39,266:INFO:Fitting Model
2025-05-04 00:28:39,343:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:28:39,344:INFO:create_model() successfully completed......................................
2025-05-04 00:28:39,468:INFO:Creating Dashboard logs
2025-05-04 00:28:39,468:INFO:Model: Linear Regression
2025-05-04 00:28:39,499:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:28:39,768:INFO:_master_model_container: 10
2025-05-04 00:28:39,768:INFO:_display_container: 7
2025-05-04 00:28:39,768:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:28:39,768:INFO:finalize_model() successfully completed......................................
2025-05-04 00:28:39,937:INFO:Initializing save_model()
2025-05-04 00:28:39,937:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), model_name=./automl_outputs\automl_4\models\final_lr_20250504_002839_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:28:39,937:INFO:Adding model into prep_pipe
2025-05-04 00:28:39,937:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:28:39,940:INFO:./automl_outputs\automl_4\models\final_lr_20250504_002839_4.pkl saved in current working directory
2025-05-04 00:28:39,940:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:28:39,940:INFO:save_model() successfully completed......................................
2025-05-04 00:32:36,296:INFO:PyCaret RegressionExperiment
2025-05-04 00:32:36,296:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:32:36,296:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:32:36,296:INFO:version 3.3.2
2025-05-04 00:32:36,296:INFO:Initializing setup()
2025-05-04 00:32:36,296:INFO:self.USI: 01ea
2025-05-04 00:32:36,296:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:32:36,296:INFO:Checking environment
2025-05-04 00:32:36,296:INFO:python_version: 3.10.11
2025-05-04 00:32:36,296:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:32:36,297:INFO:machine: AMD64
2025-05-04 00:32:36,297:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:32:36,300:INFO:Memory: svmem(total=8403075072, available=1682735104, percent=80.0, used=6720339968, free=1682735104)
2025-05-04 00:32:36,300:INFO:Physical Core: 6
2025-05-04 00:32:36,300:INFO:Logical Core: 12
2025-05-04 00:32:36,300:INFO:Checking libraries
2025-05-04 00:32:36,300:INFO:System:
2025-05-04 00:32:36,300:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:32:36,300:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:32:36,300:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:32:36,300:INFO:PyCaret required dependencies:
2025-05-04 00:32:36,300:INFO:                 pip: 23.0.1
2025-05-04 00:32:36,300:INFO:          setuptools: 65.5.0
2025-05-04 00:32:36,300:INFO:             pycaret: 3.3.2
2025-05-04 00:32:36,300:INFO:             IPython: 8.36.0
2025-05-04 00:32:36,300:INFO:          ipywidgets: 8.1.6
2025-05-04 00:32:36,300:INFO:                tqdm: 4.67.1
2025-05-04 00:32:36,300:INFO:               numpy: 1.26.4
2025-05-04 00:32:36,300:INFO:              pandas: 1.5.3
2025-05-04 00:32:36,300:INFO:              jinja2: 3.1.6
2025-05-04 00:32:36,300:INFO:               scipy: 1.11.4
2025-05-04 00:32:36,300:INFO:              joblib: 1.3.2
2025-05-04 00:32:36,300:INFO:             sklearn: 1.4.2
2025-05-04 00:32:36,301:INFO:                pyod: 2.0.4
2025-05-04 00:32:36,301:INFO:            imblearn: 0.13.0
2025-05-04 00:32:36,301:INFO:   category_encoders: 2.7.0
2025-05-04 00:32:36,301:INFO:            lightgbm: 4.6.0
2025-05-04 00:32:36,301:INFO:               numba: 0.61.0
2025-05-04 00:32:36,301:INFO:            requests: 2.32.3
2025-05-04 00:32:36,301:INFO:          matplotlib: 3.7.5
2025-05-04 00:32:36,301:INFO:          scikitplot: 0.3.7
2025-05-04 00:32:36,301:INFO:         yellowbrick: 1.5
2025-05-04 00:32:36,301:INFO:              plotly: 5.24.1
2025-05-04 00:32:36,301:INFO:    plotly-resampler: Not installed
2025-05-04 00:32:36,301:INFO:             kaleido: 0.2.1
2025-05-04 00:32:36,301:INFO:           schemdraw: 0.15
2025-05-04 00:32:36,301:INFO:         statsmodels: 0.14.4
2025-05-04 00:32:36,301:INFO:              sktime: 0.26.0
2025-05-04 00:32:36,301:INFO:               tbats: 1.1.3
2025-05-04 00:32:36,301:INFO:            pmdarima: 2.0.4
2025-05-04 00:32:36,301:INFO:              psutil: 7.0.0
2025-05-04 00:32:36,301:INFO:          markupsafe: 3.0.2
2025-05-04 00:32:36,301:INFO:             pickle5: Not installed
2025-05-04 00:32:36,301:INFO:         cloudpickle: 2.2.1
2025-05-04 00:32:36,301:INFO:         deprecation: 2.1.0
2025-05-04 00:32:36,301:INFO:              xxhash: 3.5.0
2025-05-04 00:32:36,301:INFO:           wurlitzer: Not installed
2025-05-04 00:32:36,301:INFO:PyCaret optional dependencies:
2025-05-04 00:32:36,301:INFO:                shap: 0.47.2
2025-05-04 00:32:36,301:INFO:           interpret: Not installed
2025-05-04 00:32:36,301:INFO:                umap: Not installed
2025-05-04 00:32:36,301:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:32:36,302:INFO:  explainerdashboard: Not installed
2025-05-04 00:32:36,302:INFO:             autoviz: Not installed
2025-05-04 00:32:36,302:INFO:           fairlearn: Not installed
2025-05-04 00:32:36,302:INFO:          deepchecks: Not installed
2025-05-04 00:32:36,302:INFO:             xgboost: Not installed
2025-05-04 00:32:36,302:INFO:            catboost: Not installed
2025-05-04 00:32:36,302:INFO:              kmodes: Not installed
2025-05-04 00:32:36,302:INFO:             mlxtend: Not installed
2025-05-04 00:32:36,302:INFO:       statsforecast: Not installed
2025-05-04 00:32:36,302:INFO:        tune_sklearn: Not installed
2025-05-04 00:32:36,302:INFO:                 ray: Not installed
2025-05-04 00:32:36,302:INFO:            hyperopt: Not installed
2025-05-04 00:32:36,302:INFO:              optuna: 4.3.0
2025-05-04 00:32:36,302:INFO:               skopt: Not installed
2025-05-04 00:32:36,302:INFO:              mlflow: 1.30.0
2025-05-04 00:32:36,302:INFO:              gradio: Not installed
2025-05-04 00:32:36,302:INFO:             fastapi: 0.115.12
2025-05-04 00:32:36,302:INFO:             uvicorn: 0.34.2
2025-05-04 00:32:36,302:INFO:              m2cgen: Not installed
2025-05-04 00:32:36,302:INFO:           evidently: 0.7.3
2025-05-04 00:32:36,302:INFO:               fugue: Not installed
2025-05-04 00:32:36,303:INFO:           streamlit: Not installed
2025-05-04 00:32:36,303:INFO:             prophet: Not installed
2025-05-04 00:32:36,303:INFO:None
2025-05-04 00:32:36,303:INFO:Set up data.
2025-05-04 00:32:36,303:INFO:Set up folding strategy.
2025-05-04 00:32:36,303:INFO:Set up train/test split.
2025-05-04 00:32:36,303:INFO:Set up index.
2025-05-04 00:32:36,303:INFO:Assigning column types.
2025-05-04 00:32:36,303:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:32:36,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,490:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,490:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:32:36,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,681:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,682:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:32:36,780:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,780:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,878:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,879:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,879:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:32:36,972:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:36,972:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,065:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,065:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,065:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:32:37,174:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,174:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,268:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,268:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,268:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:32:37,379:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,379:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,486:INFO:Preparing preprocessing pipeline...
2025-05-04 00:32:37,486:INFO:Set up simple imputation.
2025-05-04 00:32:37,488:INFO:Set up encoding of categorical features.
2025-05-04 00:32:37,489:INFO:Set up column name cleaning.
2025-05-04 00:32:37,563:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:32:37,571:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:32:37,571:INFO:Creating final display dataframe.
2025-05-04 00:32:37,709:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                01ea
2025-05-04 00:32:37,815:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,816:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,914:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,914:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:32:37,915:INFO:Logging experiment in loggers
2025-05-04 00:32:38,008:INFO:SubProcess save_model() called ==================================
2025-05-04 00:32:38,023:INFO:Initializing save_model()
2025-05-04 00:32:38,023:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp1w0azglh\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:32:38,023:INFO:Adding model into prep_pipe
2025-05-04 00:32:38,023:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:32:38,035:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp1w0azglh\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:32:38,039:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:32:38,039:INFO:save_model() successfully completed......................................
2025-05-04 00:32:38,197:INFO:SubProcess save_model() end ==================================
2025-05-04 00:32:38,206:INFO:setup() successfully completed in 1.62s...............
2025-05-04 00:32:38,253:INFO:Initializing load_model()
2025-05-04 00:32:38,253:INFO:load_model(model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4, platform=None, authentication=None, verbose=False)
2025-05-04 00:32:38,287:INFO:Initializing finalize_model()
2025-05-04 00:32:38,287:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A13250>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-04 00:32:38,295:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:32:38,306:INFO:Initializing create_model()
2025-05-04 00:32:38,306:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362A13250>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:32:38,306:INFO:Checking exceptions
2025-05-04 00:32:38,307:INFO:Importing libraries
2025-05-04 00:32:38,307:INFO:Copying training dataset
2025-05-04 00:32:38,307:INFO:Defining folds
2025-05-04 00:32:38,307:INFO:Declaring metric variables
2025-05-04 00:32:38,307:INFO:Importing untrained model
2025-05-04 00:32:38,307:INFO:Declaring custom model
2025-05-04 00:32:38,313:INFO:Linear Regression Imported successfully
2025-05-04 00:32:38,313:INFO:Cross validation set to False
2025-05-04 00:32:38,314:INFO:Fitting Model
2025-05-04 00:32:38,401:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:32:38,401:INFO:create_model() successfully completed......................................
2025-05-04 00:32:38,658:INFO:Creating Dashboard logs
2025-05-04 00:32:38,658:INFO:Model: Linear Regression
2025-05-04 00:32:38,674:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:32:39,002:INFO:_master_model_container: 10
2025-05-04 00:32:39,002:INFO:_display_container: 7
2025-05-04 00:32:39,002:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:32:39,002:INFO:finalize_model() successfully completed......................................
2025-05-04 00:32:39,222:INFO:Initializing save_model()
2025-05-04 00:32:39,222:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), model_name=./automl_outputs\automl_4\models\final_lr_20250504_003239_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:32:39,222:INFO:Adding model into prep_pipe
2025-05-04 00:32:39,222:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:32:39,222:INFO:./automl_outputs\automl_4\models\final_lr_20250504_003239_4.pkl saved in current working directory
2025-05-04 00:32:39,238:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:32:39,238:INFO:save_model() successfully completed......................................
2025-05-04 00:33:02,776:INFO:PyCaret RegressionExperiment
2025-05-04 00:33:02,776:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:33:02,776:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:33:02,776:INFO:version 3.3.2
2025-05-04 00:33:02,776:INFO:Initializing setup()
2025-05-04 00:33:02,776:INFO:self.USI: 34d0
2025-05-04 00:33:02,776:INFO:self._variable_keys: {'USI', 'n_jobs_param', 'pipeline', 'fold_shuffle_param', 'y_test', '_ml_usecase', 'X_test', 'transform_target_param', 'fold_groups_param', 'memory', 'log_plots_param', 'gpu_n_jobs_param', 'seed', 'fold_generator', 'y', '_available_plots', 'X', 'target_param', 'html_param', 'gpu_param', 'idx', 'logging_param', 'data', 'y_train', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:33:02,776:INFO:Checking environment
2025-05-04 00:33:02,776:INFO:python_version: 3.10.11
2025-05-04 00:33:02,776:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:33:02,776:INFO:machine: AMD64
2025-05-04 00:33:02,776:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:33:02,780:INFO:Memory: svmem(total=8403075072, available=1689518080, percent=79.9, used=6713556992, free=1689518080)
2025-05-04 00:33:02,780:INFO:Physical Core: 6
2025-05-04 00:33:02,780:INFO:Logical Core: 12
2025-05-04 00:33:02,781:INFO:Checking libraries
2025-05-04 00:33:02,781:INFO:System:
2025-05-04 00:33:02,781:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:33:02,781:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:33:02,781:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:33:02,781:INFO:PyCaret required dependencies:
2025-05-04 00:33:02,781:INFO:                 pip: 23.0.1
2025-05-04 00:33:02,781:INFO:          setuptools: 65.5.0
2025-05-04 00:33:02,781:INFO:             pycaret: 3.3.2
2025-05-04 00:33:02,781:INFO:             IPython: 8.36.0
2025-05-04 00:33:02,781:INFO:          ipywidgets: 8.1.6
2025-05-04 00:33:02,781:INFO:                tqdm: 4.67.1
2025-05-04 00:33:02,781:INFO:               numpy: 1.26.4
2025-05-04 00:33:02,781:INFO:              pandas: 1.5.3
2025-05-04 00:33:02,781:INFO:              jinja2: 3.1.6
2025-05-04 00:33:02,781:INFO:               scipy: 1.11.4
2025-05-04 00:33:02,781:INFO:              joblib: 1.3.2
2025-05-04 00:33:02,781:INFO:             sklearn: 1.4.2
2025-05-04 00:33:02,782:INFO:                pyod: 2.0.4
2025-05-04 00:33:02,782:INFO:            imblearn: 0.13.0
2025-05-04 00:33:02,782:INFO:   category_encoders: 2.7.0
2025-05-04 00:33:02,782:INFO:            lightgbm: 4.6.0
2025-05-04 00:33:02,782:INFO:               numba: 0.61.0
2025-05-04 00:33:02,782:INFO:            requests: 2.32.3
2025-05-04 00:33:02,782:INFO:          matplotlib: 3.7.5
2025-05-04 00:33:02,782:INFO:          scikitplot: 0.3.7
2025-05-04 00:33:02,782:INFO:         yellowbrick: 1.5
2025-05-04 00:33:02,782:INFO:              plotly: 5.24.1
2025-05-04 00:33:02,782:INFO:    plotly-resampler: Not installed
2025-05-04 00:33:02,782:INFO:             kaleido: 0.2.1
2025-05-04 00:33:02,782:INFO:           schemdraw: 0.15
2025-05-04 00:33:02,782:INFO:         statsmodels: 0.14.4
2025-05-04 00:33:02,782:INFO:              sktime: 0.26.0
2025-05-04 00:33:02,782:INFO:               tbats: 1.1.3
2025-05-04 00:33:02,782:INFO:            pmdarima: 2.0.4
2025-05-04 00:33:02,782:INFO:              psutil: 7.0.0
2025-05-04 00:33:02,782:INFO:          markupsafe: 3.0.2
2025-05-04 00:33:02,782:INFO:             pickle5: Not installed
2025-05-04 00:33:02,783:INFO:         cloudpickle: 2.2.1
2025-05-04 00:33:02,783:INFO:         deprecation: 2.1.0
2025-05-04 00:33:02,783:INFO:              xxhash: 3.5.0
2025-05-04 00:33:02,783:INFO:           wurlitzer: Not installed
2025-05-04 00:33:02,783:INFO:PyCaret optional dependencies:
2025-05-04 00:33:02,783:INFO:                shap: 0.47.2
2025-05-04 00:33:02,783:INFO:           interpret: Not installed
2025-05-04 00:33:02,783:INFO:                umap: Not installed
2025-05-04 00:33:02,783:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:33:02,783:INFO:  explainerdashboard: Not installed
2025-05-04 00:33:02,783:INFO:             autoviz: Not installed
2025-05-04 00:33:02,783:INFO:           fairlearn: Not installed
2025-05-04 00:33:02,783:INFO:          deepchecks: Not installed
2025-05-04 00:33:02,783:INFO:             xgboost: Not installed
2025-05-04 00:33:02,783:INFO:            catboost: Not installed
2025-05-04 00:33:02,783:INFO:              kmodes: Not installed
2025-05-04 00:33:02,783:INFO:             mlxtend: Not installed
2025-05-04 00:33:02,783:INFO:       statsforecast: Not installed
2025-05-04 00:33:02,783:INFO:        tune_sklearn: Not installed
2025-05-04 00:33:02,784:INFO:                 ray: Not installed
2025-05-04 00:33:02,784:INFO:            hyperopt: Not installed
2025-05-04 00:33:02,784:INFO:              optuna: 4.3.0
2025-05-04 00:33:02,784:INFO:               skopt: Not installed
2025-05-04 00:33:02,784:INFO:              mlflow: 1.30.0
2025-05-04 00:33:02,784:INFO:              gradio: Not installed
2025-05-04 00:33:02,784:INFO:             fastapi: 0.115.12
2025-05-04 00:33:02,784:INFO:             uvicorn: 0.34.2
2025-05-04 00:33:02,784:INFO:              m2cgen: Not installed
2025-05-04 00:33:02,784:INFO:           evidently: 0.7.3
2025-05-04 00:33:02,784:INFO:               fugue: Not installed
2025-05-04 00:33:02,784:INFO:           streamlit: Not installed
2025-05-04 00:33:02,784:INFO:             prophet: Not installed
2025-05-04 00:33:02,784:INFO:None
2025-05-04 00:33:02,784:INFO:Set up data.
2025-05-04 00:33:02,790:INFO:Set up folding strategy.
2025-05-04 00:33:02,790:INFO:Set up train/test split.
2025-05-04 00:33:02,794:INFO:Set up index.
2025-05-04 00:33:02,794:INFO:Assigning column types.
2025-05-04 00:33:02,797:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:33:02,903:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:02,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,000:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,001:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,001:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:33:03,109:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,208:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,208:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,209:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:33:03,310:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,310:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,393:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:33:03,486:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,582:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:33:03,703:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,703:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,809:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,809:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,810:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:33:03,909:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:03,909:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,007:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,007:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,008:INFO:Preparing preprocessing pipeline...
2025-05-04 00:33:04,008:INFO:Set up simple imputation.
2025-05-04 00:33:04,010:INFO:Set up encoding of categorical features.
2025-05-04 00:33:04,010:INFO:Set up column name cleaning.
2025-05-04 00:33:04,081:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:33:04,081:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:33:04,081:INFO:Creating final display dataframe.
2025-05-04 00:33:04,190:INFO:Setup _display_container:                     Description               Value
0                    Session id                   4
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                34d0
2025-05-04 00:33:04,284:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,284:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,378:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,378:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:33:04,378:INFO:Logging experiment in loggers
2025-05-04 00:33:04,467:INFO:SubProcess save_model() called ==================================
2025-05-04 00:33:04,483:INFO:Initializing save_model()
2025-05-04 00:33:04,483:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpoxsamv1_\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:33:04,483:INFO:Adding model into prep_pipe
2025-05-04 00:33:04,483:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:33:04,487:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpoxsamv1_\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:33:04,487:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:33:04,487:INFO:save_model() successfully completed......................................
2025-05-04 00:33:04,657:INFO:SubProcess save_model() end ==================================
2025-05-04 00:33:04,705:INFO:setup() successfully completed in 1.6s...............
2025-05-04 00:33:04,736:INFO:Initializing load_model()
2025-05-04 00:33:04,736:INFO:load_model(model_name=./automl_outputs\automl_4\models\tuned_lr_20250504_002621_4, platform=None, authentication=None, verbose=False)
2025-05-04 00:33:04,768:INFO:Initializing finalize_model()
2025-05-04 00:33:04,768:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363221420>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-04 00:33:04,768:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:33:04,783:INFO:Initializing create_model()
2025-05-04 00:33:04,783:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026363221420>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:33:04,783:INFO:Checking exceptions
2025-05-04 00:33:04,783:INFO:Importing libraries
2025-05-04 00:33:04,783:INFO:Copying training dataset
2025-05-04 00:33:04,783:INFO:Defining folds
2025-05-04 00:33:04,783:INFO:Declaring metric variables
2025-05-04 00:33:04,783:INFO:Importing untrained model
2025-05-04 00:33:04,783:INFO:Declaring custom model
2025-05-04 00:33:04,799:INFO:Linear Regression Imported successfully
2025-05-04 00:33:04,799:INFO:Cross validation set to False
2025-05-04 00:33:04,799:INFO:Fitting Model
2025-05-04 00:33:04,887:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:33:04,887:INFO:create_model() successfully completed......................................
2025-05-04 00:33:05,034:INFO:Creating Dashboard logs
2025-05-04 00:33:05,034:INFO:Model: Linear Regression
2025-05-04 00:33:05,066:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:33:05,361:INFO:_master_model_container: 10
2025-05-04 00:33:05,361:INFO:_display_container: 7
2025-05-04 00:33:05,376:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:33:05,376:INFO:finalize_model() successfully completed......................................
2025-05-04 00:33:05,592:INFO:Initializing save_model()
2025-05-04 00:33:05,592:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), model_name=./automl_outputs\automl_4\models\final_lr_20250504_003305_4, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:33:05,593:INFO:Adding model into prep_pipe
2025-05-04 00:33:05,593:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:33:05,598:INFO:./automl_outputs\automl_4\models\final_lr_20250504_003305_4.pkl saved in current working directory
2025-05-04 00:33:05,606:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 00:33:05,606:INFO:save_model() successfully completed......................................
2025-05-04 00:51:16,506:INFO:PyCaret RegressionExperiment
2025-05-04 00:51:16,506:INFO:Logging name: automl_bigdata_exp
2025-05-04 00:51:16,506:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 00:51:16,506:INFO:version 3.3.2
2025-05-04 00:51:16,506:INFO:Initializing setup()
2025-05-04 00:51:16,506:INFO:self.USI: e429
2025-05-04 00:51:16,507:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 00:51:16,507:INFO:Checking environment
2025-05-04 00:51:16,507:INFO:python_version: 3.10.11
2025-05-04 00:51:16,507:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 00:51:16,507:INFO:machine: AMD64
2025-05-04 00:51:16,507:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 00:51:16,521:INFO:Memory: svmem(total=8403075072, available=1149882368, percent=86.3, used=7253192704, free=1149882368)
2025-05-04 00:51:16,522:INFO:Physical Core: 6
2025-05-04 00:51:16,522:INFO:Logical Core: 12
2025-05-04 00:51:16,522:INFO:Checking libraries
2025-05-04 00:51:16,522:INFO:System:
2025-05-04 00:51:16,522:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 00:51:16,522:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 00:51:16,522:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 00:51:16,522:INFO:PyCaret required dependencies:
2025-05-04 00:51:16,522:INFO:                 pip: 23.0.1
2025-05-04 00:51:16,522:INFO:          setuptools: 65.5.0
2025-05-04 00:51:16,522:INFO:             pycaret: 3.3.2
2025-05-04 00:51:16,522:INFO:             IPython: 8.36.0
2025-05-04 00:51:16,522:INFO:          ipywidgets: 8.1.6
2025-05-04 00:51:16,522:INFO:                tqdm: 4.67.1
2025-05-04 00:51:16,522:INFO:               numpy: 1.26.4
2025-05-04 00:51:16,522:INFO:              pandas: 1.5.3
2025-05-04 00:51:16,522:INFO:              jinja2: 3.1.6
2025-05-04 00:51:16,522:INFO:               scipy: 1.11.4
2025-05-04 00:51:16,522:INFO:              joblib: 1.3.2
2025-05-04 00:51:16,522:INFO:             sklearn: 1.4.2
2025-05-04 00:51:16,522:INFO:                pyod: 2.0.4
2025-05-04 00:51:16,522:INFO:            imblearn: 0.13.0
2025-05-04 00:51:16,522:INFO:   category_encoders: 2.7.0
2025-05-04 00:51:16,522:INFO:            lightgbm: 4.6.0
2025-05-04 00:51:16,522:INFO:               numba: 0.61.0
2025-05-04 00:51:16,523:INFO:            requests: 2.32.3
2025-05-04 00:51:16,523:INFO:          matplotlib: 3.7.5
2025-05-04 00:51:16,523:INFO:          scikitplot: 0.3.7
2025-05-04 00:51:16,523:INFO:         yellowbrick: 1.5
2025-05-04 00:51:16,523:INFO:              plotly: 5.24.1
2025-05-04 00:51:16,523:INFO:    plotly-resampler: Not installed
2025-05-04 00:51:16,523:INFO:             kaleido: 0.2.1
2025-05-04 00:51:16,523:INFO:           schemdraw: 0.15
2025-05-04 00:51:16,523:INFO:         statsmodels: 0.14.4
2025-05-04 00:51:16,523:INFO:              sktime: 0.26.0
2025-05-04 00:51:16,523:INFO:               tbats: 1.1.3
2025-05-04 00:51:16,523:INFO:            pmdarima: 2.0.4
2025-05-04 00:51:16,523:INFO:              psutil: 7.0.0
2025-05-04 00:51:16,523:INFO:          markupsafe: 3.0.2
2025-05-04 00:51:16,523:INFO:             pickle5: Not installed
2025-05-04 00:51:16,523:INFO:         cloudpickle: 2.2.1
2025-05-04 00:51:16,523:INFO:         deprecation: 2.1.0
2025-05-04 00:51:16,523:INFO:              xxhash: 3.5.0
2025-05-04 00:51:16,523:INFO:           wurlitzer: Not installed
2025-05-04 00:51:16,523:INFO:PyCaret optional dependencies:
2025-05-04 00:51:16,523:INFO:                shap: 0.47.2
2025-05-04 00:51:16,523:INFO:           interpret: Not installed
2025-05-04 00:51:16,523:INFO:                umap: Not installed
2025-05-04 00:51:16,523:INFO:     ydata_profiling: 4.16.1
2025-05-04 00:51:16,523:INFO:  explainerdashboard: Not installed
2025-05-04 00:51:16,523:INFO:             autoviz: Not installed
2025-05-04 00:51:16,523:INFO:           fairlearn: Not installed
2025-05-04 00:51:16,523:INFO:          deepchecks: Not installed
2025-05-04 00:51:16,523:INFO:             xgboost: Not installed
2025-05-04 00:51:16,523:INFO:            catboost: Not installed
2025-05-04 00:51:16,524:INFO:              kmodes: Not installed
2025-05-04 00:51:16,524:INFO:             mlxtend: Not installed
2025-05-04 00:51:16,524:INFO:       statsforecast: Not installed
2025-05-04 00:51:16,524:INFO:        tune_sklearn: Not installed
2025-05-04 00:51:16,524:INFO:                 ray: Not installed
2025-05-04 00:51:16,524:INFO:            hyperopt: Not installed
2025-05-04 00:51:16,524:INFO:              optuna: 4.3.0
2025-05-04 00:51:16,524:INFO:               skopt: Not installed
2025-05-04 00:51:16,524:INFO:              mlflow: 1.30.0
2025-05-04 00:51:16,524:INFO:              gradio: Not installed
2025-05-04 00:51:16,524:INFO:             fastapi: 0.115.12
2025-05-04 00:51:16,524:INFO:             uvicorn: 0.34.2
2025-05-04 00:51:16,524:INFO:              m2cgen: Not installed
2025-05-04 00:51:16,524:INFO:           evidently: 0.7.3
2025-05-04 00:51:16,524:INFO:               fugue: Not installed
2025-05-04 00:51:16,524:INFO:           streamlit: Not installed
2025-05-04 00:51:16,524:INFO:             prophet: Not installed
2025-05-04 00:51:16,524:INFO:None
2025-05-04 00:51:16,524:INFO:Set up data.
2025-05-04 00:51:16,532:INFO:Set up folding strategy.
2025-05-04 00:51:16,532:INFO:Set up train/test split.
2025-05-04 00:51:16,539:INFO:Set up index.
2025-05-04 00:51:16,539:INFO:Assigning column types.
2025-05-04 00:51:16,542:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 00:51:16,542:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,548:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,552:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,609:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,655:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,656:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,656:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,660:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,665:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,726:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,769:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,769:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,769:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,770:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 00:51:16,774:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,778:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,835:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,880:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,881:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:16,885:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,889:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:16,986:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,049:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,050:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,050:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,050:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 00:51:17,061:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,163:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,204:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,204:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,204:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,221:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,280:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,329:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,329:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,329:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,329:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 00:51:17,412:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,460:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,460:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,460:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,530:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,576:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,576:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,577:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 00:51:17,635:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,690:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,690:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,760:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 00:51:17,808:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,808:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,808:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 00:51:17,930:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:17,930:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,037:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,037:INFO:Preparing preprocessing pipeline...
2025-05-04 00:51:18,037:INFO:Set up simple imputation.
2025-05-04 00:51:18,051:INFO:Set up encoding of categorical features.
2025-05-04 00:51:18,051:INFO:Set up column name cleaning.
2025-05-04 00:51:18,156:INFO:Finished creating preprocessing pipeline.
2025-05-04 00:51:18,162:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:51:18,162:INFO:Creating final display dataframe.
2025-05-04 00:51:18,405:INFO:Setup _display_container:                     Description               Value
0                    Session id                   5
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                e429
2025-05-04 00:51:18,503:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,621:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,621:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 00:51:18,621:INFO:Logging experiment in loggers
2025-05-04 00:51:18,733:INFO:SubProcess save_model() called ==================================
2025-05-04 00:51:18,746:INFO:Initializing save_model()
2025-05-04 00:51:18,746:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpydszu16e\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 00:51:18,746:INFO:Adding model into prep_pipe
2025-05-04 00:51:18,746:WARNING:Only Model saved as it was a pipeline.
2025-05-04 00:51:18,758:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpydszu16e\Transformation Pipeline.pkl saved in current working directory
2025-05-04 00:51:18,766:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 00:51:18,766:INFO:save_model() successfully completed......................................
2025-05-04 00:51:19,202:INFO:SubProcess save_model() end ==================================
2025-05-04 00:51:19,229:INFO:setup() successfully completed in 2.12s...............
2025-05-04 00:51:19,349:INFO:Initializing compare_models()
2025-05-04 00:51:19,350:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-04 00:51:19,350:INFO:Checking exceptions
2025-05-04 00:51:19,353:INFO:Preparing display monitor
2025-05-04 00:51:19,355:INFO:Initializing Linear Regression
2025-05-04 00:51:19,356:INFO:Total runtime is 8.73406728108724e-06 minutes
2025-05-04 00:51:19,356:INFO:SubProcess create_model() called ==================================
2025-05-04 00:51:19,357:INFO:Initializing create_model()
2025-05-04 00:51:19,357:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636536BAC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:19,357:INFO:Checking exceptions
2025-05-04 00:51:19,357:INFO:Importing libraries
2025-05-04 00:51:19,357:INFO:Copying training dataset
2025-05-04 00:51:19,363:INFO:Defining folds
2025-05-04 00:51:19,363:INFO:Declaring metric variables
2025-05-04 00:51:19,363:INFO:Importing untrained model
2025-05-04 00:51:19,364:INFO:Linear Regression Imported successfully
2025-05-04 00:51:19,365:INFO:Starting cross validation
2025-05-04 00:51:19,367:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:25,142:INFO:Calculating mean and std
2025-05-04 00:51:25,142:INFO:Creating metrics dataframe
2025-05-04 00:51:25,149:INFO:Uploading results into container
2025-05-04 00:51:25,149:INFO:Uploading model into container now
2025-05-04 00:51:25,149:INFO:_master_model_container: 1
2025-05-04 00:51:25,149:INFO:_display_container: 2
2025-05-04 00:51:25,155:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:51:25,155:INFO:create_model() successfully completed......................................
2025-05-04 00:51:25,419:INFO:SubProcess create_model() end ==================================
2025-05-04 00:51:25,419:INFO:Creating metrics dataframe
2025-05-04 00:51:25,419:INFO:Initializing Ridge Regression
2025-05-04 00:51:25,419:INFO:Total runtime is 0.10106844107309979 minutes
2025-05-04 00:51:25,419:INFO:SubProcess create_model() called ==================================
2025-05-04 00:51:25,426:INFO:Initializing create_model()
2025-05-04 00:51:25,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636536BAC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:25,426:INFO:Checking exceptions
2025-05-04 00:51:25,426:INFO:Importing libraries
2025-05-04 00:51:25,426:INFO:Copying training dataset
2025-05-04 00:51:25,429:INFO:Defining folds
2025-05-04 00:51:25,429:INFO:Declaring metric variables
2025-05-04 00:51:25,429:INFO:Importing untrained model
2025-05-04 00:51:25,429:INFO:Ridge Regression Imported successfully
2025-05-04 00:51:25,429:INFO:Starting cross validation
2025-05-04 00:51:25,430:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:29,269:INFO:Calculating mean and std
2025-05-04 00:51:29,270:INFO:Creating metrics dataframe
2025-05-04 00:51:29,275:INFO:Uploading results into container
2025-05-04 00:51:29,277:INFO:Uploading model into container now
2025-05-04 00:51:29,277:INFO:_master_model_container: 2
2025-05-04 00:51:29,277:INFO:_display_container: 2
2025-05-04 00:51:29,278:INFO:Ridge(random_state=5)
2025-05-04 00:51:29,278:INFO:create_model() successfully completed......................................
2025-05-04 00:51:29,530:INFO:SubProcess create_model() end ==================================
2025-05-04 00:51:29,530:INFO:Creating metrics dataframe
2025-05-04 00:51:29,530:INFO:Initializing Light Gradient Boosting Machine
2025-05-04 00:51:29,530:INFO:Total runtime is 0.1695838530858358 minutes
2025-05-04 00:51:29,530:INFO:SubProcess create_model() called ==================================
2025-05-04 00:51:29,530:INFO:Initializing create_model()
2025-05-04 00:51:29,530:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636536BAC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:29,530:INFO:Checking exceptions
2025-05-04 00:51:29,530:INFO:Importing libraries
2025-05-04 00:51:29,530:INFO:Copying training dataset
2025-05-04 00:51:29,537:INFO:Defining folds
2025-05-04 00:51:29,537:INFO:Declaring metric variables
2025-05-04 00:51:29,537:INFO:Importing untrained model
2025-05-04 00:51:29,537:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 00:51:29,540:INFO:Starting cross validation
2025-05-04 00:51:29,540:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:33,113:INFO:Calculating mean and std
2025-05-04 00:51:33,113:INFO:Creating metrics dataframe
2025-05-04 00:51:33,119:INFO:Uploading results into container
2025-05-04 00:51:33,119:INFO:Uploading model into container now
2025-05-04 00:51:33,120:INFO:_master_model_container: 3
2025-05-04 00:51:33,121:INFO:_display_container: 2
2025-05-04 00:51:33,121:INFO:LGBMRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:33,121:INFO:create_model() successfully completed......................................
2025-05-04 00:51:33,308:INFO:SubProcess create_model() end ==================================
2025-05-04 00:51:33,308:INFO:Creating metrics dataframe
2025-05-04 00:51:33,315:INFO:Initializing Random Forest Regressor
2025-05-04 00:51:33,315:INFO:Total runtime is 0.2326610247294108 minutes
2025-05-04 00:51:33,315:INFO:SubProcess create_model() called ==================================
2025-05-04 00:51:33,315:INFO:Initializing create_model()
2025-05-04 00:51:33,315:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636536BAC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:33,315:INFO:Checking exceptions
2025-05-04 00:51:33,315:INFO:Importing libraries
2025-05-04 00:51:33,315:INFO:Copying training dataset
2025-05-04 00:51:33,315:INFO:Defining folds
2025-05-04 00:51:33,315:INFO:Declaring metric variables
2025-05-04 00:51:33,315:INFO:Importing untrained model
2025-05-04 00:51:33,322:INFO:Random Forest Regressor Imported successfully
2025-05-04 00:51:33,322:INFO:Starting cross validation
2025-05-04 00:51:33,322:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:33,884:INFO:Calculating mean and std
2025-05-04 00:51:33,884:INFO:Creating metrics dataframe
2025-05-04 00:51:33,884:INFO:Uploading results into container
2025-05-04 00:51:33,884:INFO:Uploading model into container now
2025-05-04 00:51:33,884:INFO:_master_model_container: 4
2025-05-04 00:51:33,884:INFO:_display_container: 2
2025-05-04 00:51:33,884:INFO:RandomForestRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:33,884:INFO:create_model() successfully completed......................................
2025-05-04 00:51:34,100:INFO:SubProcess create_model() end ==================================
2025-05-04 00:51:34,101:INFO:Creating metrics dataframe
2025-05-04 00:51:34,101:INFO:Initializing Extra Trees Regressor
2025-05-04 00:51:34,101:INFO:Total runtime is 0.24576085011164348 minutes
2025-05-04 00:51:34,101:INFO:SubProcess create_model() called ==================================
2025-05-04 00:51:34,101:INFO:Initializing create_model()
2025-05-04 00:51:34,101:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002636536BAC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:34,101:INFO:Checking exceptions
2025-05-04 00:51:34,101:INFO:Importing libraries
2025-05-04 00:51:34,101:INFO:Copying training dataset
2025-05-04 00:51:34,107:INFO:Defining folds
2025-05-04 00:51:34,107:INFO:Declaring metric variables
2025-05-04 00:51:34,107:INFO:Importing untrained model
2025-05-04 00:51:34,107:INFO:Extra Trees Regressor Imported successfully
2025-05-04 00:51:34,107:INFO:Starting cross validation
2025-05-04 00:51:34,107:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:34,555:INFO:Calculating mean and std
2025-05-04 00:51:34,555:INFO:Creating metrics dataframe
2025-05-04 00:51:34,558:INFO:Uploading results into container
2025-05-04 00:51:34,558:INFO:Uploading model into container now
2025-05-04 00:51:34,559:INFO:_master_model_container: 5
2025-05-04 00:51:34,559:INFO:_display_container: 2
2025-05-04 00:51:34,559:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:34,559:INFO:create_model() successfully completed......................................
2025-05-04 00:51:34,722:INFO:SubProcess create_model() end ==================================
2025-05-04 00:51:34,722:INFO:Creating metrics dataframe
2025-05-04 00:51:34,738:INFO:Initializing create_model()
2025-05-04 00:51:34,738:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=Ridge(random_state=5), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:34,738:INFO:Checking exceptions
2025-05-04 00:51:34,738:INFO:Importing libraries
2025-05-04 00:51:34,738:INFO:Copying training dataset
2025-05-04 00:51:34,738:INFO:Defining folds
2025-05-04 00:51:34,738:INFO:Declaring metric variables
2025-05-04 00:51:34,738:INFO:Importing untrained model
2025-05-04 00:51:34,738:INFO:Declaring custom model
2025-05-04 00:51:34,738:INFO:Ridge Regression Imported successfully
2025-05-04 00:51:34,745:INFO:Cross validation set to False
2025-05-04 00:51:34,745:INFO:Fitting Model
2025-05-04 00:51:34,794:INFO:Ridge(random_state=5)
2025-05-04 00:51:34,794:INFO:create_model() successfully completed......................................
2025-05-04 00:51:34,954:INFO:Creating Dashboard logs
2025-05-04 00:51:34,954:INFO:Model: Ridge Regression
2025-05-04 00:51:34,975:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 5, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 00:51:35,106:INFO:Initializing predict_model()
2025-05-04 00:51:35,106:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=Ridge(random_state=5), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362918160>)
2025-05-04 00:51:35,106:INFO:Checking exceptions
2025-05-04 00:51:35,106:INFO:Preloading libraries
2025-05-04 00:51:35,225:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:35,765:INFO:Creating Dashboard logs
2025-05-04 00:51:35,766:INFO:Model: Linear Regression
2025-05-04 00:51:35,788:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:51:36,127:INFO:Creating Dashboard logs
2025-05-04 00:51:36,127:INFO:Model: Random Forest Regressor
2025-05-04 00:51:36,141:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 5, 'verbose': 0, 'warm_start': False}
2025-05-04 00:51:36,474:INFO:Creating Dashboard logs
2025-05-04 00:51:36,474:INFO:Model: Light Gradient Boosting Machine
2025-05-04 00:51:36,491:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 5, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 00:51:36,822:INFO:Creating Dashboard logs
2025-05-04 00:51:36,822:INFO:Model: Extra Trees Regressor
2025-05-04 00:51:36,837:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 5, 'verbose': 0, 'warm_start': False}
2025-05-04 00:51:37,157:INFO:_master_model_container: 5
2025-05-04 00:51:37,157:INFO:_display_container: 2
2025-05-04 00:51:37,157:INFO:Ridge(random_state=5)
2025-05-04 00:51:37,157:INFO:compare_models() successfully completed......................................
2025-05-04 00:51:37,240:INFO:Initializing create_model()
2025-05-04 00:51:37,240:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:37,240:INFO:Checking exceptions
2025-05-04 00:51:37,242:INFO:Importing libraries
2025-05-04 00:51:37,242:INFO:Copying training dataset
2025-05-04 00:51:37,245:INFO:Defining folds
2025-05-04 00:51:37,246:INFO:Declaring metric variables
2025-05-04 00:51:37,246:INFO:Importing untrained model
2025-05-04 00:51:37,246:INFO:Linear Regression Imported successfully
2025-05-04 00:51:37,246:INFO:Starting cross validation
2025-05-04 00:51:37,248:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:37,416:INFO:Calculating mean and std
2025-05-04 00:51:37,416:INFO:Creating metrics dataframe
2025-05-04 00:51:37,416:INFO:Finalizing model
2025-05-04 00:51:37,460:INFO:Creating Dashboard logs
2025-05-04 00:51:37,460:INFO:Model: Linear Regression
2025-05-04 00:51:37,476:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 00:51:37,585:INFO:Initializing predict_model()
2025-05-04 00:51:37,585:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263629192D0>)
2025-05-04 00:51:37,585:INFO:Checking exceptions
2025-05-04 00:51:37,585:INFO:Preloading libraries
2025-05-04 00:51:37,683:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:38,129:INFO:Uploading results into container
2025-05-04 00:51:38,129:INFO:Uploading model into container now
2025-05-04 00:51:38,129:INFO:_master_model_container: 6
2025-05-04 00:51:38,129:INFO:_display_container: 3
2025-05-04 00:51:38,131:INFO:LinearRegression(n_jobs=-1)
2025-05-04 00:51:38,131:INFO:create_model() successfully completed......................................
2025-05-04 00:51:38,356:INFO:Initializing plot_model()
2025-05-04 00:51:38,356:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, system=True)
2025-05-04 00:51:38,356:INFO:Checking exceptions
2025-05-04 00:51:38,356:INFO:Preloading libraries
2025-05-04 00:51:38,356:INFO:Copying training dataset
2025-05-04 00:51:38,356:INFO:Plot type: feature
2025-05-04 00:51:38,502:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:51:38,807:INFO:Saving 'Feature Importance.png'
2025-05-04 00:51:38,926:INFO:Visual Rendered Successfully
2025-05-04 00:51:39,127:INFO:plot_model() successfully completed......................................
2025-05-04 00:51:39,231:INFO:Initializing create_model()
2025-05-04 00:51:39,231:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:39,231:INFO:Checking exceptions
2025-05-04 00:51:39,231:INFO:Importing libraries
2025-05-04 00:51:39,231:INFO:Copying training dataset
2025-05-04 00:51:39,231:INFO:Defining folds
2025-05-04 00:51:39,231:INFO:Declaring metric variables
2025-05-04 00:51:39,231:INFO:Importing untrained model
2025-05-04 00:51:39,231:INFO:Ridge Regression Imported successfully
2025-05-04 00:51:39,231:INFO:Starting cross validation
2025-05-04 00:51:39,231:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:39,379:INFO:Calculating mean and std
2025-05-04 00:51:39,379:INFO:Creating metrics dataframe
2025-05-04 00:51:39,379:INFO:Finalizing model
2025-05-04 00:51:39,458:INFO:Creating Dashboard logs
2025-05-04 00:51:39,459:INFO:Model: Ridge Regression
2025-05-04 00:51:39,484:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 5, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 00:51:39,614:INFO:Initializing predict_model()
2025-05-04 00:51:39,614:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=Ridge(random_state=5), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026362FFF640>)
2025-05-04 00:51:39,614:INFO:Checking exceptions
2025-05-04 00:51:39,614:INFO:Preloading libraries
2025-05-04 00:51:39,719:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:40,155:INFO:Uploading results into container
2025-05-04 00:51:40,155:INFO:Uploading model into container now
2025-05-04 00:51:40,162:INFO:_master_model_container: 7
2025-05-04 00:51:40,162:INFO:_display_container: 4
2025-05-04 00:51:40,162:INFO:Ridge(random_state=5)
2025-05-04 00:51:40,162:INFO:create_model() successfully completed......................................
2025-05-04 00:51:40,406:INFO:Initializing plot_model()
2025-05-04 00:51:40,406:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=5), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, system=True)
2025-05-04 00:51:40,406:INFO:Checking exceptions
2025-05-04 00:51:40,408:INFO:Preloading libraries
2025-05-04 00:51:40,408:INFO:Copying training dataset
2025-05-04 00:51:40,408:INFO:Plot type: feature
2025-05-04 00:51:40,516:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:51:40,614:INFO:Saving 'Feature Importance.png'
2025-05-04 00:51:40,717:INFO:Visual Rendered Successfully
2025-05-04 00:51:41,000:INFO:plot_model() successfully completed......................................
2025-05-04 00:51:41,111:INFO:Initializing create_model()
2025-05-04 00:51:41,111:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:41,111:INFO:Checking exceptions
2025-05-04 00:51:41,112:INFO:Importing libraries
2025-05-04 00:51:41,112:INFO:Copying training dataset
2025-05-04 00:51:41,118:INFO:Defining folds
2025-05-04 00:51:41,118:INFO:Declaring metric variables
2025-05-04 00:51:41,119:INFO:Importing untrained model
2025-05-04 00:51:41,119:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 00:51:41,119:INFO:Starting cross validation
2025-05-04 00:51:41,121:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:41,761:INFO:Calculating mean and std
2025-05-04 00:51:41,761:INFO:Creating metrics dataframe
2025-05-04 00:51:41,763:INFO:Finalizing model
2025-05-04 00:51:41,891:INFO:Creating Dashboard logs
2025-05-04 00:51:41,891:INFO:Model: Light Gradient Boosting Machine
2025-05-04 00:51:41,916:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 5, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 00:51:42,030:INFO:Initializing predict_model()
2025-05-04 00:51:42,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=LGBMRegressor(n_jobs=-1, random_state=5), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263629196C0>)
2025-05-04 00:51:42,030:INFO:Checking exceptions
2025-05-04 00:51:42,030:INFO:Preloading libraries
2025-05-04 00:51:42,141:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:42,689:INFO:Uploading results into container
2025-05-04 00:51:42,689:INFO:Uploading model into container now
2025-05-04 00:51:42,689:INFO:_master_model_container: 8
2025-05-04 00:51:42,689:INFO:_display_container: 5
2025-05-04 00:51:42,689:INFO:LGBMRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:42,689:INFO:create_model() successfully completed......................................
2025-05-04 00:51:42,905:INFO:Initializing plot_model()
2025-05-04 00:51:42,905:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=5), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, system=True)
2025-05-04 00:51:42,905:INFO:Checking exceptions
2025-05-04 00:51:42,912:INFO:Preloading libraries
2025-05-04 00:51:42,912:INFO:Copying training dataset
2025-05-04 00:51:42,912:INFO:Plot type: feature
2025-05-04 00:51:42,912:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:51:42,981:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:51:43,085:INFO:Saving 'Feature Importance.png'
2025-05-04 00:51:43,190:INFO:Visual Rendered Successfully
2025-05-04 00:51:43,349:INFO:plot_model() successfully completed......................................
2025-05-04 00:51:43,426:INFO:Initializing create_model()
2025-05-04 00:51:43,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:43,426:INFO:Checking exceptions
2025-05-04 00:51:43,426:INFO:Importing libraries
2025-05-04 00:51:43,426:INFO:Copying training dataset
2025-05-04 00:51:43,433:INFO:Defining folds
2025-05-04 00:51:43,433:INFO:Declaring metric variables
2025-05-04 00:51:43,433:INFO:Importing untrained model
2025-05-04 00:51:43,433:INFO:Random Forest Regressor Imported successfully
2025-05-04 00:51:43,433:INFO:Starting cross validation
2025-05-04 00:51:43,433:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:44,058:INFO:Calculating mean and std
2025-05-04 00:51:44,058:INFO:Creating metrics dataframe
2025-05-04 00:51:44,058:INFO:Finalizing model
2025-05-04 00:51:44,270:INFO:Creating Dashboard logs
2025-05-04 00:51:44,271:INFO:Model: Random Forest Regressor
2025-05-04 00:51:44,290:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 5, 'verbose': 0, 'warm_start': False}
2025-05-04 00:51:44,405:INFO:Initializing predict_model()
2025-05-04 00:51:44,405:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=5), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263653E6C20>)
2025-05-04 00:51:44,405:INFO:Checking exceptions
2025-05-04 00:51:44,405:INFO:Preloading libraries
2025-05-04 00:51:44,551:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:45,043:INFO:Uploading results into container
2025-05-04 00:51:45,044:INFO:Uploading model into container now
2025-05-04 00:51:45,044:INFO:_master_model_container: 9
2025-05-04 00:51:45,044:INFO:_display_container: 6
2025-05-04 00:51:45,044:INFO:RandomForestRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:45,044:INFO:create_model() successfully completed......................................
2025-05-04 00:51:45,273:INFO:Initializing plot_model()
2025-05-04 00:51:45,273:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=5), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, system=True)
2025-05-04 00:51:45,273:INFO:Checking exceptions
2025-05-04 00:51:45,308:INFO:Preloading libraries
2025-05-04 00:51:45,336:INFO:Copying training dataset
2025-05-04 00:51:45,336:INFO:Plot type: feature
2025-05-04 00:51:45,337:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:51:45,405:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:51:45,509:INFO:Saving 'Feature Importance.png'
2025-05-04 00:51:45,599:INFO:Visual Rendered Successfully
2025-05-04 00:51:45,804:INFO:plot_model() successfully completed......................................
2025-05-04 00:51:45,892:INFO:Initializing create_model()
2025-05-04 00:51:45,892:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 00:51:45,892:INFO:Checking exceptions
2025-05-04 00:51:45,893:INFO:Importing libraries
2025-05-04 00:51:45,893:INFO:Copying training dataset
2025-05-04 00:51:45,897:INFO:Defining folds
2025-05-04 00:51:45,897:INFO:Declaring metric variables
2025-05-04 00:51:45,897:INFO:Importing untrained model
2025-05-04 00:51:45,898:INFO:Extra Trees Regressor Imported successfully
2025-05-04 00:51:45,898:INFO:Starting cross validation
2025-05-04 00:51:45,899:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 00:51:46,344:INFO:Calculating mean and std
2025-05-04 00:51:46,345:INFO:Creating metrics dataframe
2025-05-04 00:51:46,347:INFO:Finalizing model
2025-05-04 00:51:46,588:INFO:Creating Dashboard logs
2025-05-04 00:51:46,588:INFO:Model: Extra Trees Regressor
2025-05-04 00:51:46,614:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 5, 'verbose': 0, 'warm_start': False}
2025-05-04 00:51:46,752:INFO:Initializing predict_model()
2025-05-04 00:51:46,752:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=5), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002636291A680>)
2025-05-04 00:51:46,752:INFO:Checking exceptions
2025-05-04 00:51:46,752:INFO:Preloading libraries
2025-05-04 00:51:46,950:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 00:51:47,467:INFO:Uploading results into container
2025-05-04 00:51:47,467:INFO:Uploading model into container now
2025-05-04 00:51:47,467:INFO:_master_model_container: 10
2025-05-04 00:51:47,467:INFO:_display_container: 7
2025-05-04 00:51:47,467:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5)
2025-05-04 00:51:47,467:INFO:create_model() successfully completed......................................
2025-05-04 00:51:47,706:INFO:Initializing plot_model()
2025-05-04 00:51:47,706:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=5), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBB6A0>, system=True)
2025-05-04 00:51:47,706:INFO:Checking exceptions
2025-05-04 00:51:47,738:INFO:Preloading libraries
2025-05-04 00:51:47,773:INFO:Copying training dataset
2025-05-04 00:51:47,773:INFO:Plot type: feature
2025-05-04 00:51:47,773:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 00:51:47,846:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 00:51:47,948:INFO:Saving 'Feature Importance.png'
2025-05-04 00:51:48,044:INFO:Visual Rendered Successfully
2025-05-04 00:51:48,203:INFO:plot_model() successfully completed......................................
2025-05-04 01:04:25,645:INFO:PyCaret RegressionExperiment
2025-05-04 01:04:25,645:INFO:Logging name: automl_bigdata_exp
2025-05-04 01:04:25,645:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 01:04:25,645:INFO:version 3.3.2
2025-05-04 01:04:25,645:INFO:Initializing setup()
2025-05-04 01:04:25,645:INFO:self.USI: f96d
2025-05-04 01:04:25,645:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 01:04:25,645:INFO:Checking environment
2025-05-04 01:04:25,647:INFO:python_version: 3.10.11
2025-05-04 01:04:25,647:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 01:04:25,647:INFO:machine: AMD64
2025-05-04 01:04:25,647:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 01:04:25,652:INFO:Memory: svmem(total=8403075072, available=862183424, percent=89.7, used=7540891648, free=862183424)
2025-05-04 01:04:25,652:INFO:Physical Core: 6
2025-05-04 01:04:25,652:INFO:Logical Core: 12
2025-05-04 01:04:25,652:INFO:Checking libraries
2025-05-04 01:04:25,652:INFO:System:
2025-05-04 01:04:25,652:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 01:04:25,652:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 01:04:25,652:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 01:04:25,652:INFO:PyCaret required dependencies:
2025-05-04 01:04:25,653:INFO:                 pip: 23.0.1
2025-05-04 01:04:25,653:INFO:          setuptools: 65.5.0
2025-05-04 01:04:25,653:INFO:             pycaret: 3.3.2
2025-05-04 01:04:25,653:INFO:             IPython: 8.36.0
2025-05-04 01:04:25,653:INFO:          ipywidgets: 8.1.6
2025-05-04 01:04:25,653:INFO:                tqdm: 4.67.1
2025-05-04 01:04:25,653:INFO:               numpy: 1.26.4
2025-05-04 01:04:25,653:INFO:              pandas: 1.5.3
2025-05-04 01:04:25,653:INFO:              jinja2: 3.1.6
2025-05-04 01:04:25,654:INFO:               scipy: 1.11.4
2025-05-04 01:04:25,654:INFO:              joblib: 1.3.2
2025-05-04 01:04:25,654:INFO:             sklearn: 1.4.2
2025-05-04 01:04:25,654:INFO:                pyod: 2.0.4
2025-05-04 01:04:25,654:INFO:            imblearn: 0.13.0
2025-05-04 01:04:25,654:INFO:   category_encoders: 2.7.0
2025-05-04 01:04:25,654:INFO:            lightgbm: 4.6.0
2025-05-04 01:04:25,654:INFO:               numba: 0.61.0
2025-05-04 01:04:25,654:INFO:            requests: 2.32.3
2025-05-04 01:04:25,654:INFO:          matplotlib: 3.7.5
2025-05-04 01:04:25,654:INFO:          scikitplot: 0.3.7
2025-05-04 01:04:25,654:INFO:         yellowbrick: 1.5
2025-05-04 01:04:25,654:INFO:              plotly: 5.24.1
2025-05-04 01:04:25,654:INFO:    plotly-resampler: Not installed
2025-05-04 01:04:25,654:INFO:             kaleido: 0.2.1
2025-05-04 01:04:25,654:INFO:           schemdraw: 0.15
2025-05-04 01:04:25,654:INFO:         statsmodels: 0.14.4
2025-05-04 01:04:25,654:INFO:              sktime: 0.26.0
2025-05-04 01:04:25,654:INFO:               tbats: 1.1.3
2025-05-04 01:04:25,654:INFO:            pmdarima: 2.0.4
2025-05-04 01:04:25,654:INFO:              psutil: 7.0.0
2025-05-04 01:04:25,654:INFO:          markupsafe: 3.0.2
2025-05-04 01:04:25,654:INFO:             pickle5: Not installed
2025-05-04 01:04:25,654:INFO:         cloudpickle: 2.2.1
2025-05-04 01:04:25,654:INFO:         deprecation: 2.1.0
2025-05-04 01:04:25,654:INFO:              xxhash: 3.5.0
2025-05-04 01:04:25,654:INFO:           wurlitzer: Not installed
2025-05-04 01:04:25,655:INFO:PyCaret optional dependencies:
2025-05-04 01:04:25,655:INFO:                shap: 0.47.2
2025-05-04 01:04:25,655:INFO:           interpret: Not installed
2025-05-04 01:04:25,655:INFO:                umap: Not installed
2025-05-04 01:04:25,655:INFO:     ydata_profiling: 4.16.1
2025-05-04 01:04:25,655:INFO:  explainerdashboard: Not installed
2025-05-04 01:04:25,655:INFO:             autoviz: Not installed
2025-05-04 01:04:25,655:INFO:           fairlearn: Not installed
2025-05-04 01:04:25,655:INFO:          deepchecks: Not installed
2025-05-04 01:04:25,655:INFO:             xgboost: Not installed
2025-05-04 01:04:25,655:INFO:            catboost: Not installed
2025-05-04 01:04:25,655:INFO:              kmodes: Not installed
2025-05-04 01:04:25,655:INFO:             mlxtend: Not installed
2025-05-04 01:04:25,655:INFO:       statsforecast: Not installed
2025-05-04 01:04:25,655:INFO:        tune_sklearn: Not installed
2025-05-04 01:04:25,655:INFO:                 ray: Not installed
2025-05-04 01:04:25,655:INFO:            hyperopt: Not installed
2025-05-04 01:04:25,655:INFO:              optuna: 4.3.0
2025-05-04 01:04:25,655:INFO:               skopt: Not installed
2025-05-04 01:04:25,655:INFO:              mlflow: 1.30.0
2025-05-04 01:04:25,655:INFO:              gradio: Not installed
2025-05-04 01:04:25,655:INFO:             fastapi: 0.115.12
2025-05-04 01:04:25,655:INFO:             uvicorn: 0.34.2
2025-05-04 01:04:25,655:INFO:              m2cgen: Not installed
2025-05-04 01:04:25,655:INFO:           evidently: 0.7.3
2025-05-04 01:04:25,655:INFO:               fugue: Not installed
2025-05-04 01:04:25,655:INFO:           streamlit: Not installed
2025-05-04 01:04:25,655:INFO:             prophet: Not installed
2025-05-04 01:04:25,655:INFO:None
2025-05-04 01:04:25,656:INFO:Set up data.
2025-05-04 01:04:25,666:INFO:Set up folding strategy.
2025-05-04 01:04:25,667:INFO:Set up train/test split.
2025-05-04 01:04:25,681:INFO:Set up index.
2025-05-04 01:04:25,682:INFO:Assigning column types.
2025-05-04 01:04:25,687:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 01:04:25,689:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,695:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,700:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,757:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,801:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,803:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:25,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:25,804:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,809:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,813:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,868:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,910:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:25,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:25,911:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 01:04:25,915:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,919:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:25,980:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,040:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,048:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,052:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,112:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,160:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,160:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,160:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,161:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 01:04:26,170:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,229:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,275:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,276:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,277:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,285:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,344:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,389:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,389:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,390:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 01:04:26,458:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,503:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,505:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,574:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,648:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,650:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,651:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 01:04:26,749:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,806:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,884:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:04:26,933:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,934:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:26,935:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 01:04:27,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,192:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,193:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,198:INFO:Preparing preprocessing pipeline...
2025-05-04 01:04:27,199:INFO:Set up simple imputation.
2025-05-04 01:04:27,202:INFO:Set up encoding of categorical features.
2025-05-04 01:04:27,205:INFO:Set up column name cleaning.
2025-05-04 01:04:27,314:INFO:Finished creating preprocessing pipeline.
2025-05-04 01:04:27,323:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:04:27,323:INFO:Creating final display dataframe.
2025-05-04 01:04:27,523:INFO:Setup _display_container:                     Description               Value
0                    Session id                   6
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                f96d
2025-05-04 01:04:27,636:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,636:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,745:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:04:27,749:INFO:Logging experiment in loggers
2025-05-04 01:04:27,851:INFO:SubProcess save_model() called ==================================
2025-05-04 01:04:27,867:INFO:Initializing save_model()
2025-05-04 01:04:27,867:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpjfrbmce6\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:04:27,867:INFO:Adding model into prep_pipe
2025-05-04 01:04:27,867:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:04:27,873:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpjfrbmce6\Transformation Pipeline.pkl saved in current working directory
2025-05-04 01:04:27,881:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:04:27,881:INFO:save_model() successfully completed......................................
2025-05-04 01:04:28,387:INFO:SubProcess save_model() end ==================================
2025-05-04 01:04:28,403:INFO:setup() successfully completed in 2.12s...............
2025-05-04 01:04:28,478:INFO:Initializing compare_models()
2025-05-04 01:04:28,478:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-04 01:04:28,478:INFO:Checking exceptions
2025-05-04 01:04:28,479:INFO:Preparing display monitor
2025-05-04 01:04:28,481:INFO:Initializing Linear Regression
2025-05-04 01:04:28,481:INFO:Total runtime is 0.0 minutes
2025-05-04 01:04:28,482:INFO:SubProcess create_model() called ==================================
2025-05-04 01:04:28,482:INFO:Initializing create_model()
2025-05-04 01:04:28,482:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:04:28,482:INFO:Checking exceptions
2025-05-04 01:04:28,482:INFO:Importing libraries
2025-05-04 01:04:28,482:INFO:Copying training dataset
2025-05-04 01:04:28,486:INFO:Defining folds
2025-05-04 01:04:28,486:INFO:Declaring metric variables
2025-05-04 01:04:28,486:INFO:Importing untrained model
2025-05-04 01:04:28,486:INFO:Linear Regression Imported successfully
2025-05-04 01:04:28,486:INFO:Starting cross validation
2025-05-04 01:04:28,487:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:04:34,822:INFO:Calculating mean and std
2025-05-04 01:04:34,823:INFO:Creating metrics dataframe
2025-05-04 01:04:34,828:INFO:Uploading results into container
2025-05-04 01:04:34,830:INFO:Uploading model into container now
2025-05-04 01:04:34,831:INFO:_master_model_container: 1
2025-05-04 01:04:34,831:INFO:_display_container: 2
2025-05-04 01:04:34,831:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:04:34,831:INFO:create_model() successfully completed......................................
2025-05-04 01:04:35,124:INFO:SubProcess create_model() end ==================================
2025-05-04 01:04:35,124:INFO:Creating metrics dataframe
2025-05-04 01:04:35,139:INFO:Initializing Ridge Regression
2025-05-04 01:04:35,139:INFO:Total runtime is 0.11096129417419434 minutes
2025-05-04 01:04:35,139:INFO:SubProcess create_model() called ==================================
2025-05-04 01:04:35,139:INFO:Initializing create_model()
2025-05-04 01:04:35,139:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:04:35,139:INFO:Checking exceptions
2025-05-04 01:04:35,139:INFO:Importing libraries
2025-05-04 01:04:35,139:INFO:Copying training dataset
2025-05-04 01:04:35,143:INFO:Defining folds
2025-05-04 01:04:35,143:INFO:Declaring metric variables
2025-05-04 01:04:35,143:INFO:Importing untrained model
2025-05-04 01:04:35,143:INFO:Ridge Regression Imported successfully
2025-05-04 01:04:35,143:INFO:Starting cross validation
2025-05-04 01:04:35,144:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:32,159:INFO:Calculating mean and std
2025-05-04 01:05:32,160:INFO:Creating metrics dataframe
2025-05-04 01:05:32,163:INFO:Uploading results into container
2025-05-04 01:05:32,164:INFO:Uploading model into container now
2025-05-04 01:05:32,164:INFO:_master_model_container: 2
2025-05-04 01:05:32,164:INFO:_display_container: 2
2025-05-04 01:05:32,164:INFO:Ridge(random_state=6)
2025-05-04 01:05:32,164:INFO:create_model() successfully completed......................................
2025-05-04 01:05:32,333:INFO:SubProcess create_model() end ==================================
2025-05-04 01:05:32,333:INFO:Creating metrics dataframe
2025-05-04 01:05:32,338:INFO:Initializing Light Gradient Boosting Machine
2025-05-04 01:05:32,338:INFO:Total runtime is 1.0642820556958517 minutes
2025-05-04 01:05:32,340:INFO:SubProcess create_model() called ==================================
2025-05-04 01:05:32,340:INFO:Initializing create_model()
2025-05-04 01:05:32,340:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:32,340:INFO:Checking exceptions
2025-05-04 01:05:32,340:INFO:Importing libraries
2025-05-04 01:05:32,340:INFO:Copying training dataset
2025-05-04 01:05:32,344:INFO:Defining folds
2025-05-04 01:05:32,344:INFO:Declaring metric variables
2025-05-04 01:05:32,344:INFO:Importing untrained model
2025-05-04 01:05:32,345:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:05:32,345:INFO:Starting cross validation
2025-05-04 01:05:32,346:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:34,372:WARNING:Exception in thread ExecutorManagerThread:
2025-05-04 01:05:34,375:WARNING:Traceback (most recent call last):
2025-05-04 01:05:34,375:WARNING:  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\threading.py", line 1016, in _bootstrap_inner
2025-05-04 01:05:34,405:WARNING:    self.run()
2025-05-04 01:05:34,405:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 599, in run
2025-05-04 01:05:34,407:WARNING:    self.terminate_broken(bpe)
2025-05-04 01:05:34,407:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 803, in terminate_broken
2025-05-04 01:05:34,408:WARNING:    self.kill_workers(reason="broken executor")
2025-05-04 01:05:34,408:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 836, in kill_workers
2025-05-04 01:05:34,410:WARNING:    kill_process_tree(p)
2025-05-04 01:05:34,410:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 19, in kill_process_tree
2025-05-04 01:05:34,533:WARNING:    _kill_process_tree_with_psutil(process)
2025-05-04 01:05:34,533:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 35, in _kill_process_tree_with_psutil
2025-05-04 01:05:34,533:WARNING:    descendants = psutil.Process(process.pid).children(recursive=True)
2025-05-04 01:05:34,533:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\psutil\__init__.py", line 966, in children
2025-05-04 01:05:34,559:WARNING:    ppid_map = _ppid_map()
2025-05-04 01:05:34,560:WARNING:OSError: [WinError 1455] The paging file is too small for this operation to complete
2025-05-04 01:05:34,567:WARNING:create_model() for lightgbm raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:05:34,686:WARNING:joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 426, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\queues.py", line 122, in get
    return _ForkingPickler.loads(res)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\__init__.py", line 87, in <module>
    from .base import clone
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py", line 19, in <module>
    from .utils import _IS_32BIT
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\__init__.py", line 22, in <module>
    from ._estimator_html_repr import estimator_html_repr
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_estimator_html_repr.py", line 10, in <module>
    from .fixes import parse_version
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\fixes.py", line 17, in <module>
    import scipy.stats
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\__init__.py", line 608, in <module>
    from ._stats_py import *
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\_stats_py.py", line 55, in <module>
    from ._resampling import (MonteCarloMethod, PermutationMethod, BootstrapMethod,
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 879, in exec_module
  File "<frozen importlib._bootstrap_external>", line 1012, in get_code
  File "<frozen importlib._bootstrap_external>", line 672, in _compile_bytecode
MemoryError
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1952, in __call__
    return output if self.return_generator else list(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1595, in _get_outputs
    yield from self._retrieve()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1699, in _retrieve
    self._raise_error_fast()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1734, in _raise_error_fast
    error_job.get_result(self.timeout)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 736, in get_result
    return self._return_or_raise()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 754, in _return_or_raise
    raise self._result
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.

2025-05-04 01:05:34,686:INFO:Initializing create_model()
2025-05-04 01:05:34,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:34,686:INFO:Checking exceptions
2025-05-04 01:05:34,686:INFO:Importing libraries
2025-05-04 01:05:34,687:INFO:Copying training dataset
2025-05-04 01:05:34,690:INFO:Defining folds
2025-05-04 01:05:34,690:INFO:Declaring metric variables
2025-05-04 01:05:34,690:INFO:Importing untrained model
2025-05-04 01:05:34,691:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:05:34,691:INFO:Starting cross validation
2025-05-04 01:05:34,692:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:34,805:WARNING:Exception in thread ExecutorManagerThread:
2025-05-04 01:05:34,806:WARNING:Traceback (most recent call last):
2025-05-04 01:05:34,806:WARNING:  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\threading.py", line 1016, in _bootstrap_inner
2025-05-04 01:05:34,808:WARNING:    self.run()
2025-05-04 01:05:34,808:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 599, in run
2025-05-04 01:05:34,810:WARNING:    self.terminate_broken(bpe)
2025-05-04 01:05:34,810:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 803, in terminate_broken
2025-05-04 01:05:34,810:WARNING:    self.kill_workers(reason="broken executor")
2025-05-04 01:05:34,810:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 836, in kill_workers
2025-05-04 01:05:34,811:WARNING:    kill_process_tree(p)
2025-05-04 01:05:34,811:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 19, in kill_process_tree
2025-05-04 01:05:34,811:WARNING:    _kill_process_tree_with_psutil(process)
2025-05-04 01:05:34,812:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 35, in _kill_process_tree_with_psutil
2025-05-04 01:05:34,812:WARNING:    descendants = psutil.Process(process.pid).children(recursive=True)
2025-05-04 01:05:34,812:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\psutil\__init__.py", line 966, in children
2025-05-04 01:05:34,813:WARNING:    ppid_map = _ppid_map()
2025-05-04 01:05:34,813:WARNING:OSError: [WinError 1455] The paging file is too small for this operation to complete
2025-05-04 01:05:34,817:ERROR:create_model() for lightgbm raised an exception or returned all 0.0:
2025-05-04 01:05:34,818:ERROR:joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 426, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\queues.py", line 122, in get
    return _ForkingPickler.loads(res)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\__init__.py", line 87, in <module>
    from .base import clone
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py", line 19, in <module>
    from .utils import _IS_32BIT
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\__init__.py", line 22, in <module>
    from ._estimator_html_repr import estimator_html_repr
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_estimator_html_repr.py", line 10, in <module>
    from .fixes import parse_version
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\fixes.py", line 17, in <module>
    import scipy.stats
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\__init__.py", line 608, in <module>
    from ._stats_py import *
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\_stats_py.py", line 55, in <module>
    from ._resampling import (MonteCarloMethod, PermutationMethod, BootstrapMethod,
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 879, in exec_module
  File "<frozen importlib._bootstrap_external>", line 1012, in get_code
  File "<frozen importlib._bootstrap_external>", line 672, in _compile_bytecode
MemoryError
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1952, in __call__
    return output if self.return_generator else list(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1595, in _get_outputs
    yield from self._retrieve()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1699, in _retrieve
    self._raise_error_fast()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1734, in _raise_error_fast
    error_job.get_result(self.timeout)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 736, in get_result
    return self._return_or_raise()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 754, in _return_or_raise
    raise self._result
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1952, in __call__
    return output if self.return_generator else list(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1595, in _get_outputs
    yield from self._retrieve()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1699, in _retrieve
    self._raise_error_fast()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1734, in _raise_error_fast
    error_job.get_result(self.timeout)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 736, in get_result
    return self._return_or_raise()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 754, in _return_or_raise
    raise self._result
joblib.externals.loky.process_executor.TerminatedWorkerError: A worker process managed by the executor was unexpectedly terminated. This could be caused by a segmentation fault while calling the function or by an excessive memory usage causing the Operating System to kill the worker.


2025-05-04 01:05:34,819:INFO:Initializing Random Forest Regressor
2025-05-04 01:05:34,819:INFO:Total runtime is 1.1056180795033772 minutes
2025-05-04 01:05:34,819:INFO:SubProcess create_model() called ==================================
2025-05-04 01:05:34,820:INFO:Initializing create_model()
2025-05-04 01:05:34,820:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:34,820:INFO:Checking exceptions
2025-05-04 01:05:34,820:INFO:Importing libraries
2025-05-04 01:05:34,820:INFO:Copying training dataset
2025-05-04 01:05:34,826:INFO:Defining folds
2025-05-04 01:05:34,827:INFO:Declaring metric variables
2025-05-04 01:05:34,827:INFO:Importing untrained model
2025-05-04 01:05:34,827:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:05:34,827:INFO:Starting cross validation
2025-05-04 01:05:34,829:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:34,851:WARNING:create_model() for rf raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:05:34,927:WARNING:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:05:34,928:INFO:Initializing create_model()
2025-05-04 01:05:34,928:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:34,928:INFO:Checking exceptions
2025-05-04 01:05:34,928:INFO:Importing libraries
2025-05-04 01:05:34,928:INFO:Copying training dataset
2025-05-04 01:05:34,933:INFO:Defining folds
2025-05-04 01:05:34,933:INFO:Declaring metric variables
2025-05-04 01:05:34,933:INFO:Importing untrained model
2025-05-04 01:05:34,933:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:05:34,934:INFO:Starting cross validation
2025-05-04 01:05:34,936:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:34,949:ERROR:create_model() for rf raised an exception or returned all 0.0:
2025-05-04 01:05:34,951:ERROR:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:05:34,951:INFO:Initializing Extra Trees Regressor
2025-05-04 01:05:34,951:INFO:Total runtime is 1.1078333099683124 minutes
2025-05-04 01:05:34,951:INFO:SubProcess create_model() called ==================================
2025-05-04 01:05:34,952:INFO:Initializing create_model()
2025-05-04 01:05:34,952:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:34,952:INFO:Checking exceptions
2025-05-04 01:05:34,952:INFO:Importing libraries
2025-05-04 01:05:34,952:INFO:Copying training dataset
2025-05-04 01:05:34,958:INFO:Defining folds
2025-05-04 01:05:34,958:INFO:Declaring metric variables
2025-05-04 01:05:34,958:INFO:Importing untrained model
2025-05-04 01:05:34,959:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:05:34,959:INFO:Starting cross validation
2025-05-04 01:05:34,961:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:34,973:WARNING:create_model() for et raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:05:34,975:WARNING:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:05:34,975:INFO:Initializing create_model()
2025-05-04 01:05:34,975:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000263654BF400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:34,976:INFO:Checking exceptions
2025-05-04 01:05:34,976:INFO:Importing libraries
2025-05-04 01:05:34,976:INFO:Copying training dataset
2025-05-04 01:05:34,984:INFO:Defining folds
2025-05-04 01:05:34,984:INFO:Declaring metric variables
2025-05-04 01:05:34,984:INFO:Importing untrained model
2025-05-04 01:05:34,985:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:05:34,985:INFO:Starting cross validation
2025-05-04 01:05:34,987:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:35,001:ERROR:create_model() for et raised an exception or returned all 0.0:
2025-05-04 01:05:35,003:ERROR:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:05:35,007:INFO:Initializing create_model()
2025-05-04 01:05:35,007:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=Ridge(random_state=6), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:35,007:INFO:Checking exceptions
2025-05-04 01:05:35,009:INFO:Importing libraries
2025-05-04 01:05:35,009:INFO:Copying training dataset
2025-05-04 01:05:35,015:INFO:Defining folds
2025-05-04 01:05:35,015:INFO:Declaring metric variables
2025-05-04 01:05:35,016:INFO:Importing untrained model
2025-05-04 01:05:35,016:INFO:Declaring custom model
2025-05-04 01:05:35,016:INFO:Ridge Regression Imported successfully
2025-05-04 01:05:35,018:INFO:Cross validation set to False
2025-05-04 01:05:35,018:INFO:Fitting Model
2025-05-04 01:05:35,087:INFO:Ridge(random_state=6)
2025-05-04 01:05:35,087:INFO:create_model() successfully completed......................................
2025-05-04 01:05:35,305:INFO:Creating Dashboard logs
2025-05-04 01:05:35,305:INFO:Model: Ridge Regression
2025-05-04 01:05:35,333:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 6, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 01:05:35,465:INFO:Initializing predict_model()
2025-05-04 01:05:35,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=Ridge(random_state=6), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263656EE290>)
2025-05-04 01:05:35,465:INFO:Checking exceptions
2025-05-04 01:05:35,465:INFO:Preloading libraries
2025-05-04 01:05:35,645:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:05:36,106:INFO:Creating Dashboard logs
2025-05-04 01:05:36,106:INFO:Model: Linear Regression
2025-05-04 01:05:36,127:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:05:36,429:INFO:_master_model_container: 2
2025-05-04 01:05:36,429:INFO:_display_container: 2
2025-05-04 01:05:36,429:INFO:Ridge(random_state=6)
2025-05-04 01:05:36,429:INFO:compare_models() successfully completed......................................
2025-05-04 01:05:36,496:INFO:Initializing create_model()
2025-05-04 01:05:36,496:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:36,496:INFO:Checking exceptions
2025-05-04 01:05:36,497:INFO:Importing libraries
2025-05-04 01:05:36,497:INFO:Copying training dataset
2025-05-04 01:05:36,500:INFO:Defining folds
2025-05-04 01:05:36,500:INFO:Declaring metric variables
2025-05-04 01:05:36,500:INFO:Importing untrained model
2025-05-04 01:05:36,501:INFO:Linear Regression Imported successfully
2025-05-04 01:05:36,501:INFO:Starting cross validation
2025-05-04 01:05:36,502:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:36,775:INFO:Initializing create_model()
2025-05-04 01:05:36,775:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:36,775:INFO:Checking exceptions
2025-05-04 01:05:36,777:INFO:Importing libraries
2025-05-04 01:05:36,777:INFO:Copying training dataset
2025-05-04 01:05:36,784:INFO:Defining folds
2025-05-04 01:05:36,784:INFO:Declaring metric variables
2025-05-04 01:05:36,785:INFO:Importing untrained model
2025-05-04 01:05:36,785:INFO:Ridge Regression Imported successfully
2025-05-04 01:05:36,785:INFO:Starting cross validation
2025-05-04 01:05:36,787:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:36,917:INFO:Initializing create_model()
2025-05-04 01:05:36,917:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:36,917:INFO:Checking exceptions
2025-05-04 01:05:36,918:INFO:Importing libraries
2025-05-04 01:05:36,918:INFO:Copying training dataset
2025-05-04 01:05:36,922:INFO:Defining folds
2025-05-04 01:05:36,922:INFO:Declaring metric variables
2025-05-04 01:05:36,923:INFO:Importing untrained model
2025-05-04 01:05:36,923:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:05:36,924:INFO:Starting cross validation
2025-05-04 01:05:36,925:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:37,036:INFO:Initializing create_model()
2025-05-04 01:05:37,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:37,036:INFO:Checking exceptions
2025-05-04 01:05:37,037:INFO:Importing libraries
2025-05-04 01:05:37,037:INFO:Copying training dataset
2025-05-04 01:05:37,042:INFO:Defining folds
2025-05-04 01:05:37,042:INFO:Declaring metric variables
2025-05-04 01:05:37,042:INFO:Importing untrained model
2025-05-04 01:05:37,043:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:05:37,043:INFO:Starting cross validation
2025-05-04 01:05:37,044:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:05:37,141:INFO:Initializing create_model()
2025-05-04 01:05:37,141:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362DBA380>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:05:37,141:INFO:Checking exceptions
2025-05-04 01:05:37,144:INFO:Importing libraries
2025-05-04 01:05:37,144:INFO:Copying training dataset
2025-05-04 01:05:37,151:INFO:Defining folds
2025-05-04 01:05:37,151:INFO:Declaring metric variables
2025-05-04 01:05:37,152:INFO:Importing untrained model
2025-05-04 01:05:37,152:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:05:37,153:INFO:Starting cross validation
2025-05-04 01:05:37,155:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:41,774:INFO:PyCaret RegressionExperiment
2025-05-04 01:08:41,774:INFO:Logging name: automl_bigdata_exp
2025-05-04 01:08:41,774:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 01:08:41,774:INFO:version 3.3.2
2025-05-04 01:08:41,774:INFO:Initializing setup()
2025-05-04 01:08:41,774:INFO:self.USI: d947
2025-05-04 01:08:41,776:INFO:self._variable_keys: {'log_plots_param', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'seed', 'fold_generator', 'y', '_available_plots', 'pipeline', 'X', 'fold_shuffle_param', 'target_param', 'y_test', 'html_param', '_ml_usecase', 'gpu_param', 'idx', 'X_test', 'logging_param', 'y_train', 'transform_target_param', 'fold_groups_param', 'memory', 'data', 'exp_id', 'exp_name_log', 'X_train'}
2025-05-04 01:08:41,776:INFO:Checking environment
2025-05-04 01:08:41,776:INFO:python_version: 3.10.11
2025-05-04 01:08:41,776:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 01:08:41,776:INFO:machine: AMD64
2025-05-04 01:08:41,776:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 01:08:41,783:INFO:Memory: svmem(total=8403075072, available=961056768, percent=88.6, used=7442018304, free=961056768)
2025-05-04 01:08:41,784:INFO:Physical Core: 6
2025-05-04 01:08:41,784:INFO:Logical Core: 12
2025-05-04 01:08:41,784:INFO:Checking libraries
2025-05-04 01:08:41,784:INFO:System:
2025-05-04 01:08:41,784:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 01:08:41,784:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 01:08:41,784:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 01:08:41,784:INFO:PyCaret required dependencies:
2025-05-04 01:08:41,785:INFO:                 pip: 23.0.1
2025-05-04 01:08:41,785:INFO:          setuptools: 65.5.0
2025-05-04 01:08:41,785:INFO:             pycaret: 3.3.2
2025-05-04 01:08:41,785:INFO:             IPython: 8.36.0
2025-05-04 01:08:41,785:INFO:          ipywidgets: 8.1.6
2025-05-04 01:08:41,785:INFO:                tqdm: 4.67.1
2025-05-04 01:08:41,785:INFO:               numpy: 1.26.4
2025-05-04 01:08:41,785:INFO:              pandas: 1.5.3
2025-05-04 01:08:41,785:INFO:              jinja2: 3.1.6
2025-05-04 01:08:41,785:INFO:               scipy: 1.11.4
2025-05-04 01:08:41,785:INFO:              joblib: 1.3.2
2025-05-04 01:08:41,785:INFO:             sklearn: 1.4.2
2025-05-04 01:08:41,785:INFO:                pyod: 2.0.4
2025-05-04 01:08:41,785:INFO:            imblearn: 0.13.0
2025-05-04 01:08:41,785:INFO:   category_encoders: 2.7.0
2025-05-04 01:08:41,785:INFO:            lightgbm: 4.6.0
2025-05-04 01:08:41,785:INFO:               numba: 0.61.0
2025-05-04 01:08:41,785:INFO:            requests: 2.32.3
2025-05-04 01:08:41,785:INFO:          matplotlib: 3.7.5
2025-05-04 01:08:41,786:INFO:          scikitplot: 0.3.7
2025-05-04 01:08:41,786:INFO:         yellowbrick: 1.5
2025-05-04 01:08:41,786:INFO:              plotly: 5.24.1
2025-05-04 01:08:41,786:INFO:    plotly-resampler: Not installed
2025-05-04 01:08:41,786:INFO:             kaleido: 0.2.1
2025-05-04 01:08:41,786:INFO:           schemdraw: 0.15
2025-05-04 01:08:41,786:INFO:         statsmodels: 0.14.4
2025-05-04 01:08:41,786:INFO:              sktime: 0.26.0
2025-05-04 01:08:41,786:INFO:               tbats: 1.1.3
2025-05-04 01:08:41,786:INFO:            pmdarima: 2.0.4
2025-05-04 01:08:41,786:INFO:              psutil: 7.0.0
2025-05-04 01:08:41,786:INFO:          markupsafe: 3.0.2
2025-05-04 01:08:41,786:INFO:             pickle5: Not installed
2025-05-04 01:08:41,786:INFO:         cloudpickle: 2.2.1
2025-05-04 01:08:41,786:INFO:         deprecation: 2.1.0
2025-05-04 01:08:41,786:INFO:              xxhash: 3.5.0
2025-05-04 01:08:41,786:INFO:           wurlitzer: Not installed
2025-05-04 01:08:41,786:INFO:PyCaret optional dependencies:
2025-05-04 01:08:41,786:INFO:                shap: 0.47.2
2025-05-04 01:08:41,786:INFO:           interpret: Not installed
2025-05-04 01:08:41,786:INFO:                umap: Not installed
2025-05-04 01:08:41,786:INFO:     ydata_profiling: 4.16.1
2025-05-04 01:08:41,786:INFO:  explainerdashboard: Not installed
2025-05-04 01:08:41,786:INFO:             autoviz: Not installed
2025-05-04 01:08:41,786:INFO:           fairlearn: Not installed
2025-05-04 01:08:41,786:INFO:          deepchecks: Not installed
2025-05-04 01:08:41,787:INFO:             xgboost: Not installed
2025-05-04 01:08:41,787:INFO:            catboost: Not installed
2025-05-04 01:08:41,787:INFO:              kmodes: Not installed
2025-05-04 01:08:41,787:INFO:             mlxtend: Not installed
2025-05-04 01:08:41,787:INFO:       statsforecast: Not installed
2025-05-04 01:08:41,787:INFO:        tune_sklearn: Not installed
2025-05-04 01:08:41,787:INFO:                 ray: Not installed
2025-05-04 01:08:41,787:INFO:            hyperopt: Not installed
2025-05-04 01:08:41,787:INFO:              optuna: 4.3.0
2025-05-04 01:08:41,787:INFO:               skopt: Not installed
2025-05-04 01:08:41,787:INFO:              mlflow: 1.30.0
2025-05-04 01:08:41,787:INFO:              gradio: Not installed
2025-05-04 01:08:41,787:INFO:             fastapi: 0.115.12
2025-05-04 01:08:41,787:INFO:             uvicorn: 0.34.2
2025-05-04 01:08:41,787:INFO:              m2cgen: Not installed
2025-05-04 01:08:41,787:INFO:           evidently: 0.7.3
2025-05-04 01:08:41,787:INFO:               fugue: Not installed
2025-05-04 01:08:41,787:INFO:           streamlit: Not installed
2025-05-04 01:08:41,787:INFO:             prophet: Not installed
2025-05-04 01:08:41,787:INFO:None
2025-05-04 01:08:41,788:INFO:Set up data.
2025-05-04 01:08:41,796:INFO:Set up folding strategy.
2025-05-04 01:08:41,797:INFO:Set up train/test split.
2025-05-04 01:08:41,814:INFO:Set up index.
2025-05-04 01:08:41,814:INFO:Assigning column types.
2025-05-04 01:08:41,820:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 01:08:41,822:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,828:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,832:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,901:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,950:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:41,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:41,956:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,960:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:08:41,966:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,027:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,070:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,071:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,071:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 01:08:42,076:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,079:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,147:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,190:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,191:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,191:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,196:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,200:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,255:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,299:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,301:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 01:08:42,309:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,368:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,413:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,414:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,414:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,422:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,478:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,521:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,521:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,522:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,522:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 01:08:42,589:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,634:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,636:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,636:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,698:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,739:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,741:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 01:08:42,806:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,849:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,850:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,912:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:08:42,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:42,955:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 01:08:43,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,180:INFO:Preparing preprocessing pipeline...
2025-05-04 01:08:43,180:INFO:Set up simple imputation.
2025-05-04 01:08:43,184:INFO:Set up encoding of categorical features.
2025-05-04 01:08:43,185:INFO:Set up column name cleaning.
2025-05-04 01:08:43,281:INFO:Finished creating preprocessing pipeline.
2025-05-04 01:08:43,289:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:08:43,289:INFO:Creating final display dataframe.
2025-05-04 01:08:43,514:INFO:Setup _display_container:                     Description               Value
0                    Session id                   6
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                d947
2025-05-04 01:08:43,639:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,639:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,773:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,773:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:08:43,775:INFO:Logging experiment in loggers
2025-05-04 01:08:43,878:INFO:SubProcess save_model() called ==================================
2025-05-04 01:08:43,895:INFO:Initializing save_model()
2025-05-04 01:08:43,895:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpwu_dbbxd\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:08:43,895:INFO:Adding model into prep_pipe
2025-05-04 01:08:43,895:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:08:43,902:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpwu_dbbxd\Transformation Pipeline.pkl saved in current working directory
2025-05-04 01:08:43,911:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:08:43,911:INFO:save_model() successfully completed......................................
2025-05-04 01:08:44,437:INFO:SubProcess save_model() end ==================================
2025-05-04 01:08:44,460:INFO:setup() successfully completed in 2.02s...............
2025-05-04 01:08:44,548:INFO:Initializing compare_models()
2025-05-04 01:08:44,548:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-04 01:08:44,548:INFO:Checking exceptions
2025-05-04 01:08:44,550:INFO:Preparing display monitor
2025-05-04 01:08:44,554:INFO:Initializing Linear Regression
2025-05-04 01:08:44,555:INFO:Total runtime is 2.5161107381184895e-05 minutes
2025-05-04 01:08:44,555:INFO:SubProcess create_model() called ==================================
2025-05-04 01:08:44,555:INFO:Initializing create_model()
2025-05-04 01:08:44,555:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:44,555:INFO:Checking exceptions
2025-05-04 01:08:44,555:INFO:Importing libraries
2025-05-04 01:08:44,555:INFO:Copying training dataset
2025-05-04 01:08:44,562:INFO:Defining folds
2025-05-04 01:08:44,562:INFO:Declaring metric variables
2025-05-04 01:08:44,563:INFO:Importing untrained model
2025-05-04 01:08:44,563:INFO:Linear Regression Imported successfully
2025-05-04 01:08:44,563:INFO:Starting cross validation
2025-05-04 01:08:44,566:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:50,271:INFO:Calculating mean and std
2025-05-04 01:08:50,271:INFO:Creating metrics dataframe
2025-05-04 01:08:50,277:INFO:Uploading results into container
2025-05-04 01:08:50,277:INFO:Uploading model into container now
2025-05-04 01:08:50,277:INFO:_master_model_container: 1
2025-05-04 01:08:50,277:INFO:_display_container: 2
2025-05-04 01:08:50,277:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:08:50,277:INFO:create_model() successfully completed......................................
2025-05-04 01:08:50,525:INFO:SubProcess create_model() end ==================================
2025-05-04 01:08:50,525:INFO:Creating metrics dataframe
2025-05-04 01:08:50,528:INFO:Initializing Ridge Regression
2025-05-04 01:08:50,528:INFO:Total runtime is 0.09956846237182616 minutes
2025-05-04 01:08:50,528:INFO:SubProcess create_model() called ==================================
2025-05-04 01:08:50,528:INFO:Initializing create_model()
2025-05-04 01:08:50,528:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:50,528:INFO:Checking exceptions
2025-05-04 01:08:50,528:INFO:Importing libraries
2025-05-04 01:08:50,528:INFO:Copying training dataset
2025-05-04 01:08:50,528:INFO:Defining folds
2025-05-04 01:08:50,528:INFO:Declaring metric variables
2025-05-04 01:08:50,528:INFO:Importing untrained model
2025-05-04 01:08:50,536:INFO:Ridge Regression Imported successfully
2025-05-04 01:08:50,536:INFO:Starting cross validation
2025-05-04 01:08:50,536:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:55,433:INFO:Calculating mean and std
2025-05-04 01:08:55,436:INFO:Creating metrics dataframe
2025-05-04 01:08:55,436:INFO:Uploading results into container
2025-05-04 01:08:55,436:INFO:Uploading model into container now
2025-05-04 01:08:55,446:INFO:_master_model_container: 2
2025-05-04 01:08:55,446:INFO:_display_container: 2
2025-05-04 01:08:55,446:INFO:Ridge(random_state=6)
2025-05-04 01:08:55,446:INFO:create_model() successfully completed......................................
2025-05-04 01:08:55,740:INFO:SubProcess create_model() end ==================================
2025-05-04 01:08:55,741:INFO:Creating metrics dataframe
2025-05-04 01:08:55,746:INFO:Initializing Light Gradient Boosting Machine
2025-05-04 01:08:55,746:INFO:Total runtime is 0.18653495311737062 minutes
2025-05-04 01:08:55,746:INFO:SubProcess create_model() called ==================================
2025-05-04 01:08:55,746:INFO:Initializing create_model()
2025-05-04 01:08:55,746:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:55,746:INFO:Checking exceptions
2025-05-04 01:08:55,746:INFO:Importing libraries
2025-05-04 01:08:55,746:INFO:Copying training dataset
2025-05-04 01:08:55,749:INFO:Defining folds
2025-05-04 01:08:55,751:INFO:Declaring metric variables
2025-05-04 01:08:55,751:INFO:Importing untrained model
2025-05-04 01:08:55,751:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:08:55,751:INFO:Starting cross validation
2025-05-04 01:08:55,751:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:56,736:WARNING:Exception in thread ExecutorManagerThread:
2025-05-04 01:08:56,737:WARNING:Traceback (most recent call last):
2025-05-04 01:08:56,738:WARNING:  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\threading.py", line 1016, in _bootstrap_inner
2025-05-04 01:08:56,740:WARNING:    self.run()
2025-05-04 01:08:56,740:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 599, in run
2025-05-04 01:08:56,742:WARNING:    self.terminate_broken(bpe)
2025-05-04 01:08:56,742:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 803, in terminate_broken
2025-05-04 01:08:56,743:WARNING:    self.kill_workers(reason="broken executor")
2025-05-04 01:08:56,743:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 836, in kill_workers
2025-05-04 01:08:56,744:WARNING:    kill_process_tree(p)
2025-05-04 01:08:56,744:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 19, in kill_process_tree
2025-05-04 01:08:56,745:WARNING:    _kill_process_tree_with_psutil(process)
2025-05-04 01:08:56,745:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 35, in _kill_process_tree_with_psutil
2025-05-04 01:08:56,745:WARNING:    descendants = psutil.Process(process.pid).children(recursive=True)
2025-05-04 01:08:56,745:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\psutil\__init__.py", line 966, in children
2025-05-04 01:08:56,746:WARNING:    ppid_map = _ppid_map()
2025-05-04 01:08:56,747:WARNING:OSError: [WinError 1455] The paging file is too small for this operation to complete
2025-05-04 01:08:56,754:WARNING:create_model() for lightgbm raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:08:56,757:WARNING:joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 426, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\queues.py", line 122, in get
    return _ForkingPickler.loads(res)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\__init__.py", line 87, in <module>
    from .base import clone
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py", line 19, in <module>
    from .utils import _IS_32BIT
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\__init__.py", line 22, in <module>
    from ._estimator_html_repr import estimator_html_repr
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_estimator_html_repr.py", line 10, in <module>
    from .fixes import parse_version
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\fixes.py", line 17, in <module>
    import scipy.stats
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\__init__.py", line 608, in <module>
    from ._stats_py import *
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\_stats_py.py", line 39, in <module>
    from scipy.spatial.distance import cdist
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\__init__.py", line 123, in <module>
    from . import distance, transform
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\transform\__init__.py", line 19, in <module>
  File "_rotation.pyx", line 7, in init scipy.spatial.transform._rotation
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\transform\_rotation_groups.py", line 2, in <module>
    from scipy.constants import golden as phi
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\constants\__init__.py", line 324, in <module>
    from ._codata import *
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 879, in exec_module
  File "<frozen importlib._bootstrap_external>", line 975, in get_code
  File "<frozen importlib._bootstrap_external>", line 1074, in get_data
MemoryError
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1952, in __call__
    return output if self.return_generator else list(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1595, in _get_outputs
    yield from self._retrieve()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1699, in _retrieve
    self._raise_error_fast()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1734, in _raise_error_fast
    error_job.get_result(self.timeout)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 736, in get_result
    return self._return_or_raise()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 754, in _return_or_raise
    raise self._result
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.

2025-05-04 01:08:56,758:INFO:Initializing create_model()
2025-05-04 01:08:56,758:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:56,758:INFO:Checking exceptions
2025-05-04 01:08:56,758:INFO:Importing libraries
2025-05-04 01:08:56,758:INFO:Copying training dataset
2025-05-04 01:08:56,766:INFO:Defining folds
2025-05-04 01:08:56,766:INFO:Declaring metric variables
2025-05-04 01:08:56,766:INFO:Importing untrained model
2025-05-04 01:08:56,767:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:08:56,768:INFO:Starting cross validation
2025-05-04 01:08:56,770:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:56,791:ERROR:create_model() for lightgbm raised an exception or returned all 0.0:
2025-05-04 01:08:56,793:ERROR:joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 426, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\queues.py", line 122, in get
    return _ForkingPickler.loads(res)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\__init__.py", line 87, in <module>
    from .base import clone
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py", line 19, in <module>
    from .utils import _IS_32BIT
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\__init__.py", line 22, in <module>
    from ._estimator_html_repr import estimator_html_repr
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_estimator_html_repr.py", line 10, in <module>
    from .fixes import parse_version
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\fixes.py", line 17, in <module>
    import scipy.stats
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\__init__.py", line 608, in <module>
    from ._stats_py import *
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\stats\_stats_py.py", line 39, in <module>
    from scipy.spatial.distance import cdist
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\__init__.py", line 123, in <module>
    from . import distance, transform
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\transform\__init__.py", line 19, in <module>
  File "_rotation.pyx", line 7, in init scipy.spatial.transform._rotation
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\spatial\transform\_rotation_groups.py", line 2, in <module>
    from scipy.constants import golden as phi
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\scipy\constants\__init__.py", line 324, in <module>
    from ._codata import *
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 879, in exec_module
  File "<frozen importlib._bootstrap_external>", line 975, in get_code
  File "<frozen importlib._bootstrap_external>", line 1074, in get_data
MemoryError
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1952, in __call__
    return output if self.return_generator else list(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1595, in _get_outputs
    yield from self._retrieve()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1699, in _retrieve
    self._raise_error_fast()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1734, in _raise_error_fast
    error_job.get_result(self.timeout)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 736, in get_result
    return self._return_or_raise()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 754, in _return_or_raise
    raise self._result
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:08:56,795:INFO:Initializing Random Forest Regressor
2025-05-04 01:08:56,795:INFO:Total runtime is 0.20402570962905886 minutes
2025-05-04 01:08:56,795:INFO:SubProcess create_model() called ==================================
2025-05-04 01:08:56,795:INFO:Initializing create_model()
2025-05-04 01:08:56,796:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:56,796:INFO:Checking exceptions
2025-05-04 01:08:56,796:INFO:Importing libraries
2025-05-04 01:08:56,796:INFO:Copying training dataset
2025-05-04 01:08:56,801:INFO:Defining folds
2025-05-04 01:08:56,801:INFO:Declaring metric variables
2025-05-04 01:08:56,802:INFO:Importing untrained model
2025-05-04 01:08:56,802:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:08:56,803:INFO:Starting cross validation
2025-05-04 01:08:56,804:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:56,895:WARNING:create_model() for rf raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:08:56,896:WARNING:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:08:56,896:INFO:Initializing create_model()
2025-05-04 01:08:56,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:56,896:INFO:Checking exceptions
2025-05-04 01:08:56,896:INFO:Importing libraries
2025-05-04 01:08:56,896:INFO:Copying training dataset
2025-05-04 01:08:56,906:INFO:Defining folds
2025-05-04 01:08:56,906:INFO:Declaring metric variables
2025-05-04 01:08:56,907:INFO:Importing untrained model
2025-05-04 01:08:56,907:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:08:56,908:INFO:Starting cross validation
2025-05-04 01:08:56,909:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:56,926:ERROR:create_model() for rf raised an exception or returned all 0.0:
2025-05-04 01:08:56,928:ERROR:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:08:56,929:INFO:Initializing Extra Trees Regressor
2025-05-04 01:08:56,929:INFO:Total runtime is 0.20624798138936362 minutes
2025-05-04 01:08:56,929:INFO:SubProcess create_model() called ==================================
2025-05-04 01:08:56,930:INFO:Initializing create_model()
2025-05-04 01:08:56,930:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:56,930:INFO:Checking exceptions
2025-05-04 01:08:56,930:INFO:Importing libraries
2025-05-04 01:08:56,930:INFO:Copying training dataset
2025-05-04 01:08:56,937:INFO:Defining folds
2025-05-04 01:08:56,937:INFO:Declaring metric variables
2025-05-04 01:08:56,937:INFO:Importing untrained model
2025-05-04 01:08:56,938:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:08:56,938:INFO:Starting cross validation
2025-05-04 01:08:56,940:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:56,976:WARNING:create_model() for et raised an exception or returned all 0.0, trying without fit_kwargs:
2025-05-04 01:08:56,977:WARNING:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:08:56,978:INFO:Initializing create_model()
2025-05-04 01:08:56,978:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026362BD54B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:56,978:INFO:Checking exceptions
2025-05-04 01:08:56,978:INFO:Importing libraries
2025-05-04 01:08:56,978:INFO:Copying training dataset
2025-05-04 01:08:56,987:INFO:Defining folds
2025-05-04 01:08:56,987:INFO:Declaring metric variables
2025-05-04 01:08:56,987:INFO:Importing untrained model
2025-05-04 01:08:56,988:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:08:56,988:INFO:Starting cross validation
2025-05-04 01:08:56,990:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:08:57,032:ERROR:create_model() for et raised an exception or returned all 0.0:
2025-05-04 01:08:57,034:ERROR:Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1950, in __call__
    next(output)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1588, in _get_outputs
    self._start(iterator, pre_dispatch)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1571, in _start
    if self.dispatch_one_batch(iterator):
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1462, in dispatch_one_batch
    self._dispatch(tasks)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\parallel.py", line 1384, in _dispatch
    job = self._backend.apply_async(batch, callback=batch_tracker)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\_parallel_backends.py", line 600, in apply_async
    future = self._workers.submit(func)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\reusable_executor.py", line 225, in submit
    return super().submit(fn, *args, **kwargs)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1248, in submit
    self._ensure_executor_running()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1220, in _ensure_executor_running
    self._adjust_process_count()
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 1209, in _adjust_process_count
    p.start()
  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\process.py", line 45, in _Popen
    return Popen(process_obj)
  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\popen_loky_win32.py", line 86, in __init__
    hp, ht, pid, _ = _winapi.CreateProcess(
OSError: [WinError 1455] The paging file is too small for this operation to complete

2025-05-04 01:08:57,041:INFO:Initializing create_model()
2025-05-04 01:08:57,041:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=Ridge(random_state=6), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:57,041:INFO:Checking exceptions
2025-05-04 01:08:57,043:INFO:Importing libraries
2025-05-04 01:08:57,043:INFO:Copying training dataset
2025-05-04 01:08:57,050:INFO:Defining folds
2025-05-04 01:08:57,050:INFO:Declaring metric variables
2025-05-04 01:08:57,050:INFO:Importing untrained model
2025-05-04 01:08:57,051:INFO:Declaring custom model
2025-05-04 01:08:57,051:INFO:Ridge Regression Imported successfully
2025-05-04 01:08:57,054:INFO:Cross validation set to False
2025-05-04 01:08:57,054:INFO:Fitting Model
2025-05-04 01:08:57,213:INFO:Ridge(random_state=6)
2025-05-04 01:08:57,214:INFO:create_model() successfully completed......................................
2025-05-04 01:08:57,548:INFO:Creating Dashboard logs
2025-05-04 01:08:57,548:INFO:Model: Ridge Regression
2025-05-04 01:08:57,585:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 6, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 01:08:57,730:INFO:Initializing predict_model()
2025-05-04 01:08:57,730:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=Ridge(random_state=6), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263656E03A0>)
2025-05-04 01:08:57,730:INFO:Checking exceptions
2025-05-04 01:08:57,730:INFO:Preloading libraries
2025-05-04 01:08:57,921:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:08:58,496:INFO:Creating Dashboard logs
2025-05-04 01:08:58,496:INFO:Model: Linear Regression
2025-05-04 01:08:58,516:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:08:58,930:INFO:_master_model_container: 2
2025-05-04 01:08:58,930:INFO:_display_container: 2
2025-05-04 01:08:58,930:INFO:Ridge(random_state=6)
2025-05-04 01:08:58,930:INFO:compare_models() successfully completed......................................
2025-05-04 01:08:58,997:INFO:Initializing create_model()
2025-05-04 01:08:58,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:08:58,997:INFO:Checking exceptions
2025-05-04 01:08:59,006:INFO:Importing libraries
2025-05-04 01:08:59,006:INFO:Copying training dataset
2025-05-04 01:08:59,006:INFO:Defining folds
2025-05-04 01:08:59,006:INFO:Declaring metric variables
2025-05-04 01:08:59,006:INFO:Importing untrained model
2025-05-04 01:08:59,006:INFO:Linear Regression Imported successfully
2025-05-04 01:08:59,006:INFO:Starting cross validation
2025-05-04 01:08:59,006:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:09:04,869:INFO:Calculating mean and std
2025-05-04 01:09:04,873:INFO:Creating metrics dataframe
2025-05-04 01:09:04,878:INFO:Finalizing model
2025-05-04 01:09:05,004:INFO:Creating Dashboard logs
2025-05-04 01:09:05,004:INFO:Model: Linear Regression
2025-05-04 01:09:05,038:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:09:05,186:INFO:Initializing predict_model()
2025-05-04 01:09:05,186:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000263656E0310>)
2025-05-04 01:09:05,186:INFO:Checking exceptions
2025-05-04 01:09:05,186:INFO:Preloading libraries
2025-05-04 01:09:05,343:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:09:05,924:INFO:Uploading results into container
2025-05-04 01:09:05,924:INFO:Uploading model into container now
2025-05-04 01:09:05,926:INFO:_master_model_container: 3
2025-05-04 01:09:05,926:INFO:_display_container: 3
2025-05-04 01:09:05,926:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:09:05,926:INFO:create_model() successfully completed......................................
2025-05-04 01:09:06,243:INFO:Initializing plot_model()
2025-05-04 01:09:06,244:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, system=True)
2025-05-04 01:09:06,244:INFO:Checking exceptions
2025-05-04 01:09:06,246:INFO:Preloading libraries
2025-05-04 01:09:06,246:INFO:Copying training dataset
2025-05-04 01:09:06,246:INFO:Plot type: feature
2025-05-04 01:09:06,374:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:09:06,689:INFO:Saving 'Feature Importance.png'
2025-05-04 01:09:06,908:INFO:Visual Rendered Successfully
2025-05-04 01:09:07,536:INFO:plot_model() successfully completed......................................
2025-05-04 01:09:07,694:INFO:Initializing create_model()
2025-05-04 01:09:07,694:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:09:07,694:INFO:Checking exceptions
2025-05-04 01:09:07,698:INFO:Importing libraries
2025-05-04 01:09:07,698:INFO:Copying training dataset
2025-05-04 01:09:07,704:INFO:Defining folds
2025-05-04 01:09:07,704:INFO:Declaring metric variables
2025-05-04 01:09:07,704:INFO:Importing untrained model
2025-05-04 01:09:07,706:INFO:Ridge Regression Imported successfully
2025-05-04 01:09:07,706:INFO:Starting cross validation
2025-05-04 01:09:07,708:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:09:27,921:INFO:Calculating mean and std
2025-05-04 01:09:27,922:INFO:Creating metrics dataframe
2025-05-04 01:09:27,924:INFO:Finalizing model
2025-05-04 01:09:27,991:INFO:Creating Dashboard logs
2025-05-04 01:09:27,991:INFO:Model: Ridge Regression
2025-05-04 01:09:28,019:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 6, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 01:09:28,140:INFO:Initializing predict_model()
2025-05-04 01:09:28,140:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=Ridge(random_state=6), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026365D9E950>)
2025-05-04 01:09:28,140:INFO:Checking exceptions
2025-05-04 01:09:28,140:INFO:Preloading libraries
2025-05-04 01:09:28,271:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:09:28,720:INFO:Uploading results into container
2025-05-04 01:09:28,721:INFO:Uploading model into container now
2025-05-04 01:09:28,721:INFO:_master_model_container: 4
2025-05-04 01:09:28,721:INFO:_display_container: 4
2025-05-04 01:09:28,722:INFO:Ridge(random_state=6)
2025-05-04 01:09:28,722:INFO:create_model() successfully completed......................................
2025-05-04 01:09:28,919:INFO:Initializing plot_model()
2025-05-04 01:09:28,919:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=6), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, system=True)
2025-05-04 01:09:28,920:INFO:Checking exceptions
2025-05-04 01:09:28,922:INFO:Preloading libraries
2025-05-04 01:09:28,922:INFO:Copying training dataset
2025-05-04 01:09:28,922:INFO:Plot type: feature
2025-05-04 01:09:29,040:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:09:29,417:INFO:Saving 'Feature Importance.png'
2025-05-04 01:09:30,011:INFO:Visual Rendered Successfully
2025-05-04 01:09:30,313:INFO:plot_model() successfully completed......................................
2025-05-04 01:09:30,483:INFO:Initializing create_model()
2025-05-04 01:09:30,483:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:09:30,483:INFO:Checking exceptions
2025-05-04 01:09:30,486:INFO:Importing libraries
2025-05-04 01:09:30,486:INFO:Copying training dataset
2025-05-04 01:09:30,495:INFO:Defining folds
2025-05-04 01:09:30,495:INFO:Declaring metric variables
2025-05-04 01:09:30,495:INFO:Importing untrained model
2025-05-04 01:09:30,497:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:09:30,497:INFO:Starting cross validation
2025-05-04 01:09:30,500:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:09:32,790:WARNING:Exception in thread ExecutorManagerThread:
2025-05-04 01:09:32,792:WARNING:Traceback (most recent call last):
2025-05-04 01:09:32,792:WARNING:  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\threading.py", line 1016, in _bootstrap_inner
2025-05-04 01:09:32,794:WARNING:    self.run()
2025-05-04 01:09:32,794:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 599, in run
2025-05-04 01:09:32,796:WARNING:    self.terminate_broken(bpe)
2025-05-04 01:09:32,796:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 803, in terminate_broken
2025-05-04 01:09:32,797:WARNING:    self.kill_workers(reason="broken executor")
2025-05-04 01:09:32,797:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 836, in kill_workers
2025-05-04 01:09:32,798:WARNING:    kill_process_tree(p)
2025-05-04 01:09:32,798:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 19, in kill_process_tree
2025-05-04 01:09:32,799:WARNING:    _kill_process_tree_with_psutil(process)
2025-05-04 01:09:32,799:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 35, in _kill_process_tree_with_psutil
2025-05-04 01:09:32,799:WARNING:    descendants = psutil.Process(process.pid).children(recursive=True)
2025-05-04 01:09:32,799:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\psutil\__init__.py", line 966, in children
2025-05-04 01:09:32,801:WARNING:    ppid_map = _ppid_map()
2025-05-04 01:09:32,801:WARNING:OSError: [WinError 1455] The paging file is too small for this operation to complete
2025-05-04 01:09:32,895:INFO:Initializing create_model()
2025-05-04 01:09:32,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:09:32,896:INFO:Checking exceptions
2025-05-04 01:09:32,897:INFO:Importing libraries
2025-05-04 01:09:32,897:INFO:Copying training dataset
2025-05-04 01:09:32,906:INFO:Defining folds
2025-05-04 01:09:32,906:INFO:Declaring metric variables
2025-05-04 01:09:32,906:INFO:Importing untrained model
2025-05-04 01:09:32,907:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:09:32,908:INFO:Starting cross validation
2025-05-04 01:09:32,910:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:09:34,766:INFO:Initializing create_model()
2025-05-04 01:09:34,766:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026362F3C220>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:09:34,766:INFO:Checking exceptions
2025-05-04 01:09:34,767:INFO:Importing libraries
2025-05-04 01:09:34,767:INFO:Copying training dataset
2025-05-04 01:09:34,772:INFO:Defining folds
2025-05-04 01:09:34,772:INFO:Declaring metric variables
2025-05-04 01:09:34,773:INFO:Importing untrained model
2025-05-04 01:09:34,773:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:09:34,774:INFO:Starting cross validation
2025-05-04 01:09:34,775:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:09:35,554:WARNING:Exception in thread ExecutorManagerThread:
2025-05-04 01:09:35,555:WARNING:Traceback (most recent call last):
2025-05-04 01:09:35,555:WARNING:  File "C:\Users\Nghia\AppData\Local\Programs\Python\Python310\lib\threading.py", line 1016, in _bootstrap_inner
2025-05-04 01:09:35,556:WARNING:    self.run()
2025-05-04 01:09:35,556:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 599, in run
2025-05-04 01:09:35,557:WARNING:    self.terminate_broken(bpe)
2025-05-04 01:09:35,558:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 803, in terminate_broken
2025-05-04 01:09:35,559:WARNING:    self.kill_workers(reason="broken executor")
2025-05-04 01:09:35,559:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\process_executor.py", line 836, in kill_workers
2025-05-04 01:09:35,560:WARNING:    kill_process_tree(p)
2025-05-04 01:09:35,560:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 19, in kill_process_tree
2025-05-04 01:09:35,560:WARNING:    _kill_process_tree_with_psutil(process)
2025-05-04 01:09:35,560:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\joblib\externals\loky\backend\utils.py", line 35, in _kill_process_tree_with_psutil
2025-05-04 01:09:35,561:WARNING:    descendants = psutil.Process(process.pid).children(recursive=True)
2025-05-04 01:09:35,561:WARNING:  File "D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\psutil\__init__.py", line 966, in children
2025-05-04 01:09:35,562:WARNING:    ppid_map = _ppid_map()
2025-05-04 01:09:35,562:WARNING:OSError: [WinError 1455] The paging file is too small for this operation to complete
2025-05-04 01:13:18,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-04 01:13:18,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-04 01:13:18,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-04 01:13:18,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-04 01:13:53,854:INFO:PyCaret RegressionExperiment
2025-05-04 01:13:53,854:INFO:Logging name: automl_bigdata_exp
2025-05-04 01:13:53,854:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 01:13:53,854:INFO:version 3.3.2
2025-05-04 01:13:53,854:INFO:Initializing setup()
2025-05-04 01:13:53,854:INFO:self.USI: 7bcc
2025-05-04 01:13:53,854:INFO:self._variable_keys: {'gpu_n_jobs_param', 'X', 'USI', 'data', 'X_train', 'idx', 'fold_shuffle_param', 'target_param', 'fold_generator', 'y_test', 'exp_name_log', 'n_jobs_param', 'fold_groups_param', 'transform_target_param', '_ml_usecase', 'X_test', 'log_plots_param', 'logging_param', 'gpu_param', 'pipeline', 'seed', '_available_plots', 'exp_id', 'html_param', 'y_train', 'y', 'memory'}
2025-05-04 01:13:53,854:INFO:Checking environment
2025-05-04 01:13:53,854:INFO:python_version: 3.10.11
2025-05-04 01:13:53,854:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 01:13:53,854:INFO:machine: AMD64
2025-05-04 01:13:53,868:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 01:13:53,875:INFO:Memory: svmem(total=8403075072, available=420753408, percent=95.0, used=7982321664, free=420753408)
2025-05-04 01:13:53,875:INFO:Physical Core: 6
2025-05-04 01:13:53,875:INFO:Logical Core: 12
2025-05-04 01:13:53,875:INFO:Checking libraries
2025-05-04 01:13:53,875:INFO:System:
2025-05-04 01:13:53,875:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 01:13:53,875:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 01:13:53,875:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 01:13:53,875:INFO:PyCaret required dependencies:
2025-05-04 01:13:53,958:INFO:                 pip: 23.0.1
2025-05-04 01:13:53,958:INFO:          setuptools: 65.5.0
2025-05-04 01:13:53,958:INFO:             pycaret: 3.3.2
2025-05-04 01:13:53,958:INFO:             IPython: 8.36.0
2025-05-04 01:13:53,958:INFO:          ipywidgets: 8.1.6
2025-05-04 01:13:53,958:INFO:                tqdm: 4.67.1
2025-05-04 01:13:53,958:INFO:               numpy: 1.26.4
2025-05-04 01:13:53,958:INFO:              pandas: 1.5.3
2025-05-04 01:13:53,958:INFO:              jinja2: 3.1.6
2025-05-04 01:13:53,958:INFO:               scipy: 1.11.4
2025-05-04 01:13:53,958:INFO:              joblib: 1.3.2
2025-05-04 01:13:53,958:INFO:             sklearn: 1.4.2
2025-05-04 01:13:53,958:INFO:                pyod: 2.0.4
2025-05-04 01:13:53,958:INFO:            imblearn: 0.13.0
2025-05-04 01:13:53,958:INFO:   category_encoders: 2.7.0
2025-05-04 01:13:53,958:INFO:            lightgbm: 4.6.0
2025-05-04 01:13:53,958:INFO:               numba: 0.61.0
2025-05-04 01:13:53,958:INFO:            requests: 2.32.3
2025-05-04 01:13:53,958:INFO:          matplotlib: 3.7.5
2025-05-04 01:13:53,958:INFO:          scikitplot: 0.3.7
2025-05-04 01:13:53,958:INFO:         yellowbrick: 1.5
2025-05-04 01:13:53,958:INFO:              plotly: 5.24.1
2025-05-04 01:13:53,958:INFO:    plotly-resampler: Not installed
2025-05-04 01:13:53,958:INFO:             kaleido: 0.2.1
2025-05-04 01:13:53,958:INFO:           schemdraw: 0.15
2025-05-04 01:13:53,958:INFO:         statsmodels: 0.14.4
2025-05-04 01:13:53,958:INFO:              sktime: 0.26.0
2025-05-04 01:13:53,958:INFO:               tbats: 1.1.3
2025-05-04 01:13:53,958:INFO:            pmdarima: 2.0.4
2025-05-04 01:13:53,958:INFO:              psutil: 7.0.0
2025-05-04 01:13:53,958:INFO:          markupsafe: 3.0.2
2025-05-04 01:13:53,958:INFO:             pickle5: Not installed
2025-05-04 01:13:53,958:INFO:         cloudpickle: 2.2.1
2025-05-04 01:13:53,958:INFO:         deprecation: 2.1.0
2025-05-04 01:13:53,958:INFO:              xxhash: 3.5.0
2025-05-04 01:13:53,958:INFO:           wurlitzer: Not installed
2025-05-04 01:13:53,958:INFO:PyCaret optional dependencies:
2025-05-04 01:13:53,965:INFO:                shap: 0.47.2
2025-05-04 01:13:53,965:INFO:           interpret: Not installed
2025-05-04 01:13:53,965:INFO:                umap: Not installed
2025-05-04 01:13:53,965:INFO:     ydata_profiling: 4.16.1
2025-05-04 01:13:53,965:INFO:  explainerdashboard: Not installed
2025-05-04 01:13:53,965:INFO:             autoviz: Not installed
2025-05-04 01:13:53,965:INFO:           fairlearn: Not installed
2025-05-04 01:13:53,965:INFO:          deepchecks: Not installed
2025-05-04 01:13:53,965:INFO:             xgboost: Not installed
2025-05-04 01:13:53,965:INFO:            catboost: Not installed
2025-05-04 01:13:53,965:INFO:              kmodes: Not installed
2025-05-04 01:13:53,965:INFO:             mlxtend: Not installed
2025-05-04 01:13:53,965:INFO:       statsforecast: Not installed
2025-05-04 01:13:53,965:INFO:        tune_sklearn: Not installed
2025-05-04 01:13:53,965:INFO:                 ray: Not installed
2025-05-04 01:13:53,965:INFO:            hyperopt: Not installed
2025-05-04 01:13:53,965:INFO:              optuna: 4.3.0
2025-05-04 01:13:53,965:INFO:               skopt: Not installed
2025-05-04 01:13:53,965:INFO:              mlflow: 1.30.0
2025-05-04 01:13:53,965:INFO:              gradio: Not installed
2025-05-04 01:13:53,965:INFO:             fastapi: 0.115.12
2025-05-04 01:13:53,965:INFO:             uvicorn: 0.34.2
2025-05-04 01:13:53,965:INFO:              m2cgen: Not installed
2025-05-04 01:13:53,965:INFO:           evidently: 0.7.3
2025-05-04 01:13:53,965:INFO:               fugue: Not installed
2025-05-04 01:13:53,965:INFO:           streamlit: Not installed
2025-05-04 01:13:53,965:INFO:             prophet: Not installed
2025-05-04 01:13:53,965:INFO:None
2025-05-04 01:13:53,965:INFO:Set up data.
2025-05-04 01:13:53,972:INFO:Set up folding strategy.
2025-05-04 01:13:53,972:INFO:Set up train/test split.
2025-05-04 01:13:53,979:INFO:Set up index.
2025-05-04 01:13:53,979:INFO:Assigning column types.
2025-05-04 01:13:53,986:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 01:13:53,986:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:13:53,986:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:13:53,993:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,048:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,090:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,090:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,090:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,097:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,097:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,158:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,194:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,194:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,194:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 01:13:54,201:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,208:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,257:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,300:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,305:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,309:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,361:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,397:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,402:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,402:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 01:13:54,409:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,458:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,502:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,502:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,502:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,506:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,562:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,609:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,609:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,610:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 01:13:54,672:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,708:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,777:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,817:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,818:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,818:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,819:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 01:13:54,875:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:54,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,921:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:54,999:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-05-04 01:13:55,054:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,054:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,054:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 01:13:55,179:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,298:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,299:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,301:INFO:Preparing preprocessing pipeline...
2025-05-04 01:13:55,301:INFO:Set up simple imputation.
2025-05-04 01:13:55,304:INFO:Set up encoding of categorical features.
2025-05-04 01:13:55,305:INFO:Set up column name cleaning.
2025-05-04 01:13:55,405:INFO:Finished creating preprocessing pipeline.
2025-05-04 01:13:55,416:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:13:55,416:INFO:Creating final display dataframe.
2025-05-04 01:13:55,640:INFO:Setup _display_container:                     Description               Value
0                    Session id                   7
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                7bcc
2025-05-04 01:13:55,743:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,743:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,840:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:13:55,840:INFO:Logging experiment in loggers
2025-05-04 01:13:55,951:INFO:SubProcess save_model() called ==================================
2025-05-04 01:13:55,965:INFO:Initializing save_model()
2025-05-04 01:13:55,965:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmpw1npmt3i\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:13:55,965:INFO:Adding model into prep_pipe
2025-05-04 01:13:55,965:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:13:55,965:INFO:C:\Users\Nghia\AppData\Local\Temp\tmpw1npmt3i\Transformation Pipeline.pkl saved in current working directory
2025-05-04 01:13:55,985:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:13:55,985:INFO:save_model() successfully completed......................................
2025-05-04 01:13:56,154:INFO:SubProcess save_model() end ==================================
2025-05-04 01:13:56,169:INFO:setup() successfully completed in 1.99s...............
2025-05-04 01:13:56,242:INFO:Initializing compare_models()
2025-05-04 01:13:56,242:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=RMSE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'RMSE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-05-04 01:13:56,242:INFO:Checking exceptions
2025-05-04 01:13:56,242:INFO:Preparing display monitor
2025-05-04 01:13:56,242:INFO:Initializing Linear Regression
2025-05-04 01:13:56,242:INFO:Total runtime is 0.0 minutes
2025-05-04 01:13:56,242:INFO:SubProcess create_model() called ==================================
2025-05-04 01:13:56,242:INFO:Initializing create_model()
2025-05-04 01:13:56,242:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=lr, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDAABB80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:13:56,242:INFO:Checking exceptions
2025-05-04 01:13:56,242:INFO:Importing libraries
2025-05-04 01:13:56,242:INFO:Copying training dataset
2025-05-04 01:13:56,249:INFO:Defining folds
2025-05-04 01:13:56,249:INFO:Declaring metric variables
2025-05-04 01:13:56,249:INFO:Importing untrained model
2025-05-04 01:13:56,249:INFO:Linear Regression Imported successfully
2025-05-04 01:13:56,249:INFO:Starting cross validation
2025-05-04 01:13:56,249:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:02,155:INFO:Calculating mean and std
2025-05-04 01:14:02,156:INFO:Creating metrics dataframe
2025-05-04 01:14:02,165:INFO:Uploading results into container
2025-05-04 01:14:02,166:INFO:Uploading model into container now
2025-05-04 01:14:02,167:INFO:_master_model_container: 1
2025-05-04 01:14:02,167:INFO:_display_container: 2
2025-05-04 01:14:02,167:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:14:02,167:INFO:create_model() successfully completed......................................
2025-05-04 01:14:02,523:INFO:SubProcess create_model() end ==================================
2025-05-04 01:14:02,523:INFO:Creating metrics dataframe
2025-05-04 01:14:02,527:INFO:Initializing Ridge Regression
2025-05-04 01:14:02,528:INFO:Total runtime is 0.10475870768229166 minutes
2025-05-04 01:14:02,528:INFO:SubProcess create_model() called ==================================
2025-05-04 01:14:02,528:INFO:Initializing create_model()
2025-05-04 01:14:02,528:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=ridge, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDAABB80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:02,528:INFO:Checking exceptions
2025-05-04 01:14:02,528:INFO:Importing libraries
2025-05-04 01:14:02,528:INFO:Copying training dataset
2025-05-04 01:14:02,532:INFO:Defining folds
2025-05-04 01:14:02,532:INFO:Declaring metric variables
2025-05-04 01:14:02,532:INFO:Importing untrained model
2025-05-04 01:14:02,532:INFO:Ridge Regression Imported successfully
2025-05-04 01:14:02,533:INFO:Starting cross validation
2025-05-04 01:14:02,534:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:08,841:INFO:Calculating mean and std
2025-05-04 01:14:08,842:INFO:Creating metrics dataframe
2025-05-04 01:14:08,862:INFO:Uploading results into container
2025-05-04 01:14:08,864:INFO:Uploading model into container now
2025-05-04 01:14:08,877:INFO:_master_model_container: 2
2025-05-04 01:14:08,877:INFO:_display_container: 2
2025-05-04 01:14:08,878:INFO:Ridge(random_state=7)
2025-05-04 01:14:08,878:INFO:create_model() successfully completed......................................
2025-05-04 01:14:09,328:INFO:SubProcess create_model() end ==================================
2025-05-04 01:14:09,328:INFO:Creating metrics dataframe
2025-05-04 01:14:09,336:INFO:Initializing Light Gradient Boosting Machine
2025-05-04 01:14:09,336:INFO:Total runtime is 0.21823490460713704 minutes
2025-05-04 01:14:09,336:INFO:SubProcess create_model() called ==================================
2025-05-04 01:14:09,337:INFO:Initializing create_model()
2025-05-04 01:14:09,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=lightgbm, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDAABB80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:09,337:INFO:Checking exceptions
2025-05-04 01:14:09,337:INFO:Importing libraries
2025-05-04 01:14:09,337:INFO:Copying training dataset
2025-05-04 01:14:09,343:INFO:Defining folds
2025-05-04 01:14:09,343:INFO:Declaring metric variables
2025-05-04 01:14:09,344:INFO:Importing untrained model
2025-05-04 01:14:09,345:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:14:09,346:INFO:Starting cross validation
2025-05-04 01:14:09,348:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:16,600:INFO:Calculating mean and std
2025-05-04 01:14:16,601:INFO:Creating metrics dataframe
2025-05-04 01:14:16,607:INFO:Uploading results into container
2025-05-04 01:14:16,608:INFO:Uploading model into container now
2025-05-04 01:14:16,609:INFO:_master_model_container: 3
2025-05-04 01:14:16,609:INFO:_display_container: 2
2025-05-04 01:14:16,610:INFO:LGBMRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:16,610:INFO:create_model() successfully completed......................................
2025-05-04 01:14:16,946:INFO:SubProcess create_model() end ==================================
2025-05-04 01:14:16,947:INFO:Creating metrics dataframe
2025-05-04 01:14:16,954:INFO:Initializing Random Forest Regressor
2025-05-04 01:14:16,954:INFO:Total runtime is 0.34519905646642046 minutes
2025-05-04 01:14:16,955:INFO:SubProcess create_model() called ==================================
2025-05-04 01:14:16,955:INFO:Initializing create_model()
2025-05-04 01:14:16,955:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=rf, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDAABB80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:16,955:INFO:Checking exceptions
2025-05-04 01:14:16,955:INFO:Importing libraries
2025-05-04 01:14:16,955:INFO:Copying training dataset
2025-05-04 01:14:16,962:INFO:Defining folds
2025-05-04 01:14:16,962:INFO:Declaring metric variables
2025-05-04 01:14:16,962:INFO:Importing untrained model
2025-05-04 01:14:16,963:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:14:16,963:INFO:Starting cross validation
2025-05-04 01:14:16,966:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:17,805:INFO:Calculating mean and std
2025-05-04 01:14:17,805:INFO:Creating metrics dataframe
2025-05-04 01:14:17,807:INFO:Uploading results into container
2025-05-04 01:14:17,807:INFO:Uploading model into container now
2025-05-04 01:14:17,807:INFO:_master_model_container: 4
2025-05-04 01:14:17,807:INFO:_display_container: 2
2025-05-04 01:14:17,807:INFO:RandomForestRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:17,807:INFO:create_model() successfully completed......................................
2025-05-04 01:14:18,026:INFO:SubProcess create_model() end ==================================
2025-05-04 01:14:18,026:INFO:Creating metrics dataframe
2025-05-04 01:14:18,026:INFO:Initializing Extra Trees Regressor
2025-05-04 01:14:18,026:INFO:Total runtime is 0.3630690892537435 minutes
2025-05-04 01:14:18,026:INFO:SubProcess create_model() called ==================================
2025-05-04 01:14:18,026:INFO:Initializing create_model()
2025-05-04 01:14:18,026:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=et, fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDAABB80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:18,026:INFO:Checking exceptions
2025-05-04 01:14:18,026:INFO:Importing libraries
2025-05-04 01:14:18,026:INFO:Copying training dataset
2025-05-04 01:14:18,026:INFO:Defining folds
2025-05-04 01:14:18,026:INFO:Declaring metric variables
2025-05-04 01:14:18,026:INFO:Importing untrained model
2025-05-04 01:14:18,026:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:14:18,026:INFO:Starting cross validation
2025-05-04 01:14:18,026:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:18,570:INFO:Calculating mean and std
2025-05-04 01:14:18,570:INFO:Creating metrics dataframe
2025-05-04 01:14:18,574:INFO:Uploading results into container
2025-05-04 01:14:18,574:INFO:Uploading model into container now
2025-05-04 01:14:18,575:INFO:_master_model_container: 5
2025-05-04 01:14:18,575:INFO:_display_container: 2
2025-05-04 01:14:18,575:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:18,575:INFO:create_model() successfully completed......................................
2025-05-04 01:14:18,740:INFO:SubProcess create_model() end ==================================
2025-05-04 01:14:18,740:INFO:Creating metrics dataframe
2025-05-04 01:14:18,755:INFO:Initializing create_model()
2025-05-04 01:14:18,755:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=Ridge(random_state=7), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:18,755:INFO:Checking exceptions
2025-05-04 01:14:18,755:INFO:Importing libraries
2025-05-04 01:14:18,755:INFO:Copying training dataset
2025-05-04 01:14:18,755:INFO:Defining folds
2025-05-04 01:14:18,755:INFO:Declaring metric variables
2025-05-04 01:14:18,755:INFO:Importing untrained model
2025-05-04 01:14:18,755:INFO:Declaring custom model
2025-05-04 01:14:18,755:INFO:Ridge Regression Imported successfully
2025-05-04 01:14:18,755:INFO:Cross validation set to False
2025-05-04 01:14:18,755:INFO:Fitting Model
2025-05-04 01:14:18,814:INFO:Ridge(random_state=7)
2025-05-04 01:14:18,814:INFO:create_model() successfully completed......................................
2025-05-04 01:14:18,983:INFO:Creating Dashboard logs
2025-05-04 01:14:18,983:INFO:Model: Ridge Regression
2025-05-04 01:14:19,008:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 7, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 01:14:19,137:INFO:Initializing predict_model()
2025-05-04 01:14:19,137:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=Ridge(random_state=7), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABDD76950>)
2025-05-04 01:14:19,137:INFO:Checking exceptions
2025-05-04 01:14:19,137:INFO:Preloading libraries
2025-05-04 01:14:19,235:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:19,457:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-04 01:14:19,725:INFO:Creating Dashboard logs
2025-05-04 01:14:19,725:INFO:Model: Linear Regression
2025-05-04 01:14:19,741:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:14:20,027:INFO:Creating Dashboard logs
2025-05-04 01:14:20,028:INFO:Model: Light Gradient Boosting Machine
2025-05-04 01:14:20,049:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 7, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 01:14:20,329:INFO:Creating Dashboard logs
2025-05-04 01:14:20,330:INFO:Model: Random Forest Regressor
2025-05-04 01:14:20,350:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 7, 'verbose': 0, 'warm_start': False}
2025-05-04 01:14:20,617:INFO:Creating Dashboard logs
2025-05-04 01:14:20,617:INFO:Model: Extra Trees Regressor
2025-05-04 01:14:20,648:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 7, 'verbose': 0, 'warm_start': False}
2025-05-04 01:14:20,994:INFO:_master_model_container: 5
2025-05-04 01:14:20,995:INFO:_display_container: 2
2025-05-04 01:14:20,995:INFO:Ridge(random_state=7)
2025-05-04 01:14:20,995:INFO:compare_models() successfully completed......................................
2025-05-04 01:14:21,152:INFO:Initializing create_model()
2025-05-04 01:14:21,152:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:21,152:INFO:Checking exceptions
2025-05-04 01:14:21,153:INFO:Importing libraries
2025-05-04 01:14:21,153:INFO:Copying training dataset
2025-05-04 01:14:21,156:INFO:Defining folds
2025-05-04 01:14:21,156:INFO:Declaring metric variables
2025-05-04 01:14:21,156:INFO:Importing untrained model
2025-05-04 01:14:21,156:INFO:Linear Regression Imported successfully
2025-05-04 01:14:21,157:INFO:Starting cross validation
2025-05-04 01:14:21,158:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:21,298:INFO:Calculating mean and std
2025-05-04 01:14:21,299:INFO:Creating metrics dataframe
2025-05-04 01:14:21,301:INFO:Finalizing model
2025-05-04 01:14:21,344:INFO:Creating Dashboard logs
2025-05-04 01:14:21,345:INFO:Model: Linear Regression
2025-05-04 01:14:21,353:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:14:21,458:INFO:Initializing predict_model()
2025-05-04 01:14:21,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABDF50160>)
2025-05-04 01:14:21,459:INFO:Checking exceptions
2025-05-04 01:14:21,459:INFO:Preloading libraries
2025-05-04 01:14:21,554:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:21,882:INFO:Uploading results into container
2025-05-04 01:14:21,882:INFO:Uploading model into container now
2025-05-04 01:14:21,882:INFO:_master_model_container: 6
2025-05-04 01:14:21,882:INFO:_display_container: 3
2025-05-04 01:14:21,882:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:14:21,882:INFO:create_model() successfully completed......................................
2025-05-04 01:14:22,063:INFO:Initializing plot_model()
2025-05-04 01:14:22,063:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, system=True)
2025-05-04 01:14:22,063:INFO:Checking exceptions
2025-05-04 01:14:22,064:INFO:Preloading libraries
2025-05-04 01:14:22,064:INFO:Copying training dataset
2025-05-04 01:14:22,064:INFO:Plot type: feature
2025-05-04 01:14:22,200:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:14:22,498:INFO:Saving 'Feature Importance.png'
2025-05-04 01:14:22,632:INFO:Visual Rendered Successfully
2025-05-04 01:14:22,778:INFO:plot_model() successfully completed......................................
2025-05-04 01:14:22,846:INFO:Initializing create_model()
2025-05-04 01:14:22,846:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:22,846:INFO:Checking exceptions
2025-05-04 01:14:22,847:INFO:Importing libraries
2025-05-04 01:14:22,847:INFO:Copying training dataset
2025-05-04 01:14:22,850:INFO:Defining folds
2025-05-04 01:14:22,850:INFO:Declaring metric variables
2025-05-04 01:14:22,850:INFO:Importing untrained model
2025-05-04 01:14:22,850:INFO:Ridge Regression Imported successfully
2025-05-04 01:14:22,850:INFO:Starting cross validation
2025-05-04 01:14:22,853:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:22,988:INFO:Calculating mean and std
2025-05-04 01:14:22,988:INFO:Creating metrics dataframe
2025-05-04 01:14:22,988:INFO:Finalizing model
2025-05-04 01:14:23,034:INFO:Creating Dashboard logs
2025-05-04 01:14:23,034:INFO:Model: Ridge Regression
2025-05-04 01:14:23,062:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 7, 'solver': 'auto', 'tol': 0.0001}
2025-05-04 01:14:23,167:INFO:Initializing predict_model()
2025-05-04 01:14:23,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=Ridge(random_state=7), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABDF50160>)
2025-05-04 01:14:23,167:INFO:Checking exceptions
2025-05-04 01:14:23,167:INFO:Preloading libraries
2025-05-04 01:14:23,272:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:23,616:INFO:Uploading results into container
2025-05-04 01:14:23,616:INFO:Uploading model into container now
2025-05-04 01:14:23,616:INFO:_master_model_container: 7
2025-05-04 01:14:23,616:INFO:_display_container: 4
2025-05-04 01:14:23,616:INFO:Ridge(random_state=7)
2025-05-04 01:14:23,616:INFO:create_model() successfully completed......................................
2025-05-04 01:14:23,793:INFO:Initializing plot_model()
2025-05-04 01:14:23,793:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=Ridge(random_state=7), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, system=True)
2025-05-04 01:14:23,793:INFO:Checking exceptions
2025-05-04 01:14:23,793:INFO:Preloading libraries
2025-05-04 01:14:23,793:INFO:Copying training dataset
2025-05-04 01:14:23,793:INFO:Plot type: feature
2025-05-04 01:14:23,882:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:14:23,984:INFO:Saving 'Feature Importance.png'
2025-05-04 01:14:24,069:INFO:Visual Rendered Successfully
2025-05-04 01:14:24,210:INFO:plot_model() successfully completed......................................
2025-05-04 01:14:24,272:INFO:Initializing create_model()
2025-05-04 01:14:24,272:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:24,272:INFO:Checking exceptions
2025-05-04 01:14:24,286:INFO:Importing libraries
2025-05-04 01:14:24,286:INFO:Copying training dataset
2025-05-04 01:14:24,290:INFO:Defining folds
2025-05-04 01:14:24,290:INFO:Declaring metric variables
2025-05-04 01:14:24,290:INFO:Importing untrained model
2025-05-04 01:14:24,290:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-04 01:14:24,291:INFO:Starting cross validation
2025-05-04 01:14:24,292:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:24,786:INFO:Calculating mean and std
2025-05-04 01:14:24,786:INFO:Creating metrics dataframe
2025-05-04 01:14:24,789:INFO:Finalizing model
2025-05-04 01:14:24,852:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-04 01:14:24,852:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000151 seconds.
2025-05-04 01:14:24,852:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-05-04 01:14:24,867:INFO:[LightGBM] [Info] Total Bins 419
2025-05-04 01:14:24,868:INFO:[LightGBM] [Info] Number of data points in the train set: 2100, number of used features: 7
2025-05-04 01:14:24,868:INFO:[LightGBM] [Info] Start training from score 89186.172176
2025-05-04 01:14:24,912:INFO:Creating Dashboard logs
2025-05-04 01:14:24,912:INFO:Model: Light Gradient Boosting Machine
2025-05-04 01:14:24,928:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 7, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-04 01:14:25,037:INFO:Initializing predict_model()
2025-05-04 01:14:25,037:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=LGBMRegressor(n_jobs=-1, random_state=7), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABE8DD1B0>)
2025-05-04 01:14:25,037:INFO:Checking exceptions
2025-05-04 01:14:25,037:INFO:Preloading libraries
2025-05-04 01:14:25,144:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:25,586:INFO:Uploading results into container
2025-05-04 01:14:25,587:INFO:Uploading model into container now
2025-05-04 01:14:25,587:INFO:_master_model_container: 8
2025-05-04 01:14:25,587:INFO:_display_container: 5
2025-05-04 01:14:25,588:INFO:LGBMRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:25,588:INFO:create_model() successfully completed......................................
2025-05-04 01:14:25,787:INFO:Initializing plot_model()
2025-05-04 01:14:25,787:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMRegressor(n_jobs=-1, random_state=7), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, system=True)
2025-05-04 01:14:25,787:INFO:Checking exceptions
2025-05-04 01:14:25,802:INFO:Preloading libraries
2025-05-04 01:14:25,802:INFO:Copying training dataset
2025-05-04 01:14:25,802:INFO:Plot type: feature
2025-05-04 01:14:25,802:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 01:14:25,865:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:14:25,985:INFO:Saving 'Feature Importance.png'
2025-05-04 01:14:26,087:INFO:Visual Rendered Successfully
2025-05-04 01:14:26,223:INFO:plot_model() successfully completed......................................
2025-05-04 01:14:26,291:INFO:Initializing create_model()
2025-05-04 01:14:26,291:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:26,291:INFO:Checking exceptions
2025-05-04 01:14:26,291:INFO:Importing libraries
2025-05-04 01:14:26,291:INFO:Copying training dataset
2025-05-04 01:14:26,291:INFO:Defining folds
2025-05-04 01:14:26,291:INFO:Declaring metric variables
2025-05-04 01:14:26,291:INFO:Importing untrained model
2025-05-04 01:14:26,291:INFO:Random Forest Regressor Imported successfully
2025-05-04 01:14:26,291:INFO:Starting cross validation
2025-05-04 01:14:26,291:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:26,915:INFO:Calculating mean and std
2025-05-04 01:14:26,915:INFO:Creating metrics dataframe
2025-05-04 01:14:26,915:INFO:Finalizing model
2025-05-04 01:14:27,166:INFO:Creating Dashboard logs
2025-05-04 01:14:27,166:INFO:Model: Random Forest Regressor
2025-05-04 01:14:27,195:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 7, 'verbose': 0, 'warm_start': False}
2025-05-04 01:14:27,322:INFO:Initializing predict_model()
2025-05-04 01:14:27,322:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=RandomForestRegressor(n_jobs=-1, random_state=7), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABE8FF9A0>)
2025-05-04 01:14:27,322:INFO:Checking exceptions
2025-05-04 01:14:27,322:INFO:Preloading libraries
2025-05-04 01:14:27,478:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:27,909:INFO:Uploading results into container
2025-05-04 01:14:27,909:INFO:Uploading model into container now
2025-05-04 01:14:27,909:INFO:_master_model_container: 9
2025-05-04 01:14:27,909:INFO:_display_container: 6
2025-05-04 01:14:27,909:INFO:RandomForestRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:27,909:INFO:create_model() successfully completed......................................
2025-05-04 01:14:28,132:INFO:Initializing plot_model()
2025-05-04 01:14:28,133:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestRegressor(n_jobs=-1, random_state=7), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, system=True)
2025-05-04 01:14:28,133:INFO:Checking exceptions
2025-05-04 01:14:28,165:INFO:Preloading libraries
2025-05-04 01:14:28,193:INFO:Copying training dataset
2025-05-04 01:14:28,193:INFO:Plot type: feature
2025-05-04 01:14:28,193:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 01:14:28,256:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:14:28,360:INFO:Saving 'Feature Importance.png'
2025-05-04 01:14:28,464:INFO:Visual Rendered Successfully
2025-05-04 01:14:28,619:INFO:plot_model() successfully completed......................................
2025-05-04 01:14:28,686:INFO:Initializing create_model()
2025-05-04 01:14:28,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:14:28,686:INFO:Checking exceptions
2025-05-04 01:14:28,686:INFO:Importing libraries
2025-05-04 01:14:28,686:INFO:Copying training dataset
2025-05-04 01:14:28,693:INFO:Defining folds
2025-05-04 01:14:28,693:INFO:Declaring metric variables
2025-05-04 01:14:28,693:INFO:Importing untrained model
2025-05-04 01:14:28,693:INFO:Extra Trees Regressor Imported successfully
2025-05-04 01:14:28,693:INFO:Starting cross validation
2025-05-04 01:14:28,693:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:14:29,200:INFO:Calculating mean and std
2025-05-04 01:14:29,200:INFO:Creating metrics dataframe
2025-05-04 01:14:29,200:INFO:Finalizing model
2025-05-04 01:14:29,367:INFO:Creating Dashboard logs
2025-05-04 01:14:29,367:INFO:Model: Extra Trees Regressor
2025-05-04 01:14:29,387:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 7, 'verbose': 0, 'warm_start': False}
2025-05-04 01:14:29,492:INFO:Initializing predict_model()
2025-05-04 01:14:29,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=7), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABE1B32E0>)
2025-05-04 01:14:29,492:INFO:Checking exceptions
2025-05-04 01:14:29,492:INFO:Preloading libraries
2025-05-04 01:14:29,636:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:14:30,117:INFO:Uploading results into container
2025-05-04 01:14:30,117:INFO:Uploading model into container now
2025-05-04 01:14:30,117:INFO:_master_model_container: 10
2025-05-04 01:14:30,117:INFO:_display_container: 7
2025-05-04 01:14:30,117:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=7)
2025-05-04 01:14:30,117:INFO:create_model() successfully completed......................................
2025-05-04 01:14:30,325:INFO:Initializing plot_model()
2025-05-04 01:14:30,325:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=7), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABDA47DF0>, system=True)
2025-05-04 01:14:30,325:INFO:Checking exceptions
2025-05-04 01:14:30,346:INFO:Preloading libraries
2025-05-04 01:14:30,388:INFO:Copying training dataset
2025-05-04 01:14:30,388:INFO:Plot type: feature
2025-05-04 01:14:30,388:WARNING:No coef_ found. Trying feature_importances_
2025-05-04 01:14:30,464:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:14:30,561:INFO:Saving 'Feature Importance.png'
2025-05-04 01:14:30,668:INFO:Visual Rendered Successfully
2025-05-04 01:14:30,882:INFO:plot_model() successfully completed......................................
2025-05-04 01:16:05,190:INFO:PyCaret RegressionExperiment
2025-05-04 01:16:05,190:INFO:Logging name: automl_bigdata_exp
2025-05-04 01:16:05,190:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 01:16:05,190:INFO:version 3.3.2
2025-05-04 01:16:05,190:INFO:Initializing setup()
2025-05-04 01:16:05,190:INFO:self.USI: c5dc
2025-05-04 01:16:05,190:INFO:self._variable_keys: {'X', 'USI', 'data', 'X_train', 'fold_generator', 'exp_name_log', 'fold_groups_param', 'X_test', 'logging_param', 'exp_id', 'html_param', 'y_train', 'y', 'gpu_n_jobs_param', 'idx', 'fold_shuffle_param', 'target_param', 'y_test', 'n_jobs_param', 'transform_target_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'pipeline', 'seed', '_available_plots', 'memory'}
2025-05-04 01:16:05,190:INFO:Checking environment
2025-05-04 01:16:05,190:INFO:python_version: 3.10.11
2025-05-04 01:16:05,190:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 01:16:05,190:INFO:machine: AMD64
2025-05-04 01:16:05,190:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 01:16:05,198:INFO:Memory: svmem(total=8403075072, available=545218560, percent=93.5, used=7857856512, free=545218560)
2025-05-04 01:16:05,198:INFO:Physical Core: 6
2025-05-04 01:16:05,204:INFO:Logical Core: 12
2025-05-04 01:16:05,204:INFO:Checking libraries
2025-05-04 01:16:05,204:INFO:System:
2025-05-04 01:16:05,204:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 01:16:05,205:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 01:16:05,205:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 01:16:05,205:INFO:PyCaret required dependencies:
2025-05-04 01:16:05,205:INFO:                 pip: 23.0.1
2025-05-04 01:16:05,205:INFO:          setuptools: 65.5.0
2025-05-04 01:16:05,205:INFO:             pycaret: 3.3.2
2025-05-04 01:16:05,205:INFO:             IPython: 8.36.0
2025-05-04 01:16:05,205:INFO:          ipywidgets: 8.1.6
2025-05-04 01:16:05,205:INFO:                tqdm: 4.67.1
2025-05-04 01:16:05,205:INFO:               numpy: 1.26.4
2025-05-04 01:16:05,205:INFO:              pandas: 1.5.3
2025-05-04 01:16:05,205:INFO:              jinja2: 3.1.6
2025-05-04 01:16:05,205:INFO:               scipy: 1.11.4
2025-05-04 01:16:05,205:INFO:              joblib: 1.3.2
2025-05-04 01:16:05,205:INFO:             sklearn: 1.4.2
2025-05-04 01:16:05,205:INFO:                pyod: 2.0.4
2025-05-04 01:16:05,205:INFO:            imblearn: 0.13.0
2025-05-04 01:16:05,205:INFO:   category_encoders: 2.7.0
2025-05-04 01:16:05,205:INFO:            lightgbm: 4.6.0
2025-05-04 01:16:05,205:INFO:               numba: 0.61.0
2025-05-04 01:16:05,205:INFO:            requests: 2.32.3
2025-05-04 01:16:05,205:INFO:          matplotlib: 3.7.5
2025-05-04 01:16:05,205:INFO:          scikitplot: 0.3.7
2025-05-04 01:16:05,205:INFO:         yellowbrick: 1.5
2025-05-04 01:16:05,205:INFO:              plotly: 5.24.1
2025-05-04 01:16:05,205:INFO:    plotly-resampler: Not installed
2025-05-04 01:16:05,205:INFO:             kaleido: 0.2.1
2025-05-04 01:16:05,205:INFO:           schemdraw: 0.15
2025-05-04 01:16:05,205:INFO:         statsmodels: 0.14.4
2025-05-04 01:16:05,205:INFO:              sktime: 0.26.0
2025-05-04 01:16:05,205:INFO:               tbats: 1.1.3
2025-05-04 01:16:05,205:INFO:            pmdarima: 2.0.4
2025-05-04 01:16:05,205:INFO:              psutil: 7.0.0
2025-05-04 01:16:05,205:INFO:          markupsafe: 3.0.2
2025-05-04 01:16:05,205:INFO:             pickle5: Not installed
2025-05-04 01:16:05,205:INFO:         cloudpickle: 2.2.1
2025-05-04 01:16:05,205:INFO:         deprecation: 2.1.0
2025-05-04 01:16:05,205:INFO:              xxhash: 3.5.0
2025-05-04 01:16:05,205:INFO:           wurlitzer: Not installed
2025-05-04 01:16:05,205:INFO:PyCaret optional dependencies:
2025-05-04 01:16:05,205:INFO:                shap: 0.47.2
2025-05-04 01:16:05,205:INFO:           interpret: Not installed
2025-05-04 01:16:05,205:INFO:                umap: Not installed
2025-05-04 01:16:05,205:INFO:     ydata_profiling: 4.16.1
2025-05-04 01:16:05,205:INFO:  explainerdashboard: Not installed
2025-05-04 01:16:05,205:INFO:             autoviz: Not installed
2025-05-04 01:16:05,205:INFO:           fairlearn: Not installed
2025-05-04 01:16:05,205:INFO:          deepchecks: Not installed
2025-05-04 01:16:05,205:INFO:             xgboost: Not installed
2025-05-04 01:16:05,205:INFO:            catboost: Not installed
2025-05-04 01:16:05,205:INFO:              kmodes: Not installed
2025-05-04 01:16:05,205:INFO:             mlxtend: Not installed
2025-05-04 01:16:05,205:INFO:       statsforecast: Not installed
2025-05-04 01:16:05,205:INFO:        tune_sklearn: Not installed
2025-05-04 01:16:05,205:INFO:                 ray: Not installed
2025-05-04 01:16:05,205:INFO:            hyperopt: Not installed
2025-05-04 01:16:05,205:INFO:              optuna: 4.3.0
2025-05-04 01:16:05,205:INFO:               skopt: Not installed
2025-05-04 01:16:05,205:INFO:              mlflow: 1.30.0
2025-05-04 01:16:05,205:INFO:              gradio: Not installed
2025-05-04 01:16:05,205:INFO:             fastapi: 0.115.12
2025-05-04 01:16:05,205:INFO:             uvicorn: 0.34.2
2025-05-04 01:16:05,205:INFO:              m2cgen: Not installed
2025-05-04 01:16:05,205:INFO:           evidently: 0.7.3
2025-05-04 01:16:05,205:INFO:               fugue: Not installed
2025-05-04 01:16:05,205:INFO:           streamlit: Not installed
2025-05-04 01:16:05,205:INFO:             prophet: Not installed
2025-05-04 01:16:05,205:INFO:None
2025-05-04 01:16:05,205:INFO:Set up data.
2025-05-04 01:16:05,211:INFO:Set up folding strategy.
2025-05-04 01:16:05,211:INFO:Set up train/test split.
2025-05-04 01:16:05,211:INFO:Set up index.
2025-05-04 01:16:05,211:INFO:Assigning column types.
2025-05-04 01:16:05,219:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 01:16:05,315:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,315:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,420:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,420:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,420:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 01:16:05,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,626:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,626:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,626:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 01:16:05,733:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,837:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,844:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 01:16:05,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:05,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,052:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 01:16:06,163:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,163:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,274:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,274:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,274:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 01:16:06,386:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,386:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,482:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,482:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,482:INFO:Preparing preprocessing pipeline...
2025-05-04 01:16:06,482:INFO:Set up simple imputation.
2025-05-04 01:16:06,489:INFO:Set up encoding of categorical features.
2025-05-04 01:16:06,489:INFO:Set up column name cleaning.
2025-05-04 01:16:06,573:INFO:Finished creating preprocessing pipeline.
2025-05-04 01:16:06,579:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:16:06,579:INFO:Creating final display dataframe.
2025-05-04 01:16:06,777:INFO:Setup _display_container:                     Description               Value
0                    Session id                   7
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                c5dc
2025-05-04 01:16:06,874:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:06,981:INFO:Logging experiment in loggers
2025-05-04 01:16:07,065:INFO:SubProcess save_model() called ==================================
2025-05-04 01:16:07,079:INFO:Initializing save_model()
2025-05-04 01:16:07,079:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmplxvhwc2k\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:16:07,079:INFO:Adding model into prep_pipe
2025-05-04 01:16:07,079:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:16:07,086:INFO:C:\Users\Nghia\AppData\Local\Temp\tmplxvhwc2k\Transformation Pipeline.pkl saved in current working directory
2025-05-04 01:16:07,101:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:16:07,102:INFO:save_model() successfully completed......................................
2025-05-04 01:16:07,316:INFO:SubProcess save_model() end ==================================
2025-05-04 01:16:07,337:INFO:setup() successfully completed in 1.79s...............
2025-05-04 01:16:07,399:INFO:Initializing create_model()
2025-05-04 01:16:07,406:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:16:07,406:INFO:Checking exceptions
2025-05-04 01:16:07,406:INFO:Importing libraries
2025-05-04 01:16:07,406:INFO:Copying training dataset
2025-05-04 01:16:07,408:INFO:Defining folds
2025-05-04 01:16:07,408:INFO:Declaring metric variables
2025-05-04 01:16:07,408:INFO:Importing untrained model
2025-05-04 01:16:07,408:INFO:Linear Regression Imported successfully
2025-05-04 01:16:07,408:INFO:Starting cross validation
2025-05-04 01:16:07,412:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:16:07,579:INFO:Calculating mean and std
2025-05-04 01:16:07,579:INFO:Creating metrics dataframe
2025-05-04 01:16:07,579:INFO:Finalizing model
2025-05-04 01:16:07,648:INFO:Creating Dashboard logs
2025-05-04 01:16:07,648:INFO:Model: Linear Regression
2025-05-04 01:16:07,674:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:16:07,774:INFO:Initializing predict_model()
2025-05-04 01:16:07,774:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABD1205E0>)
2025-05-04 01:16:07,774:INFO:Checking exceptions
2025-05-04 01:16:07,774:INFO:Preloading libraries
2025-05-04 01:16:07,829:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:16:08,233:INFO:Uploading results into container
2025-05-04 01:16:08,233:INFO:Uploading model into container now
2025-05-04 01:16:08,233:INFO:_master_model_container: 11
2025-05-04 01:16:08,233:INFO:_display_container: 8
2025-05-04 01:16:08,233:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:16:08,233:INFO:create_model() successfully completed......................................
2025-05-04 01:16:08,406:INFO:Initializing tune_model()
2025-05-04 01:16:08,406:INFO:tune_model(estimator=LinearRegression(n_jobs=-1), fold=5, round=4, n_iter=25, custom_grid=None, optimize=RMSE, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>)
2025-05-04 01:16:08,406:INFO:Checking exceptions
2025-05-04 01:16:08,415:INFO:Copying training dataset
2025-05-04 01:16:08,417:INFO:Checking base model
2025-05-04 01:16:08,417:INFO:Base model : Linear Regression
2025-05-04 01:16:08,417:INFO:Declaring metric variables
2025-05-04 01:16:08,417:INFO:Defining Hyperparameters
2025-05-04 01:16:08,417:INFO:25 is bigger than total combinations 2, setting search algorithm to grid
2025-05-04 01:16:08,580:INFO:Tuning with n_jobs=-1
2025-05-04 01:16:08,580:INFO:Initializing GridSearchCV
2025-05-04 01:16:08,774:INFO:best_params: {'actual_estimator__fit_intercept': False}
2025-05-04 01:16:08,774:INFO:Hyperparameter search completed
2025-05-04 01:16:08,774:INFO:SubProcess create_model() called ==================================
2025-05-04 01:16:08,774:INFO:Initializing create_model()
2025-05-04 01:16:08,774:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CABDCEB3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': False})
2025-05-04 01:16:08,774:INFO:Checking exceptions
2025-05-04 01:16:08,774:INFO:Importing libraries
2025-05-04 01:16:08,774:INFO:Copying training dataset
2025-05-04 01:16:08,774:INFO:Defining folds
2025-05-04 01:16:08,774:INFO:Declaring metric variables
2025-05-04 01:16:08,774:INFO:Importing untrained model
2025-05-04 01:16:08,774:INFO:Declaring custom model
2025-05-04 01:16:08,774:INFO:Linear Regression Imported successfully
2025-05-04 01:16:08,780:INFO:Starting cross validation
2025-05-04 01:16:08,781:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:16:08,906:INFO:Calculating mean and std
2025-05-04 01:16:08,906:INFO:Creating metrics dataframe
2025-05-04 01:16:08,906:INFO:Finalizing model
2025-05-04 01:16:08,968:INFO:Uploading results into container
2025-05-04 01:16:08,969:INFO:Uploading model into container now
2025-05-04 01:16:08,970:INFO:_master_model_container: 12
2025-05-04 01:16:08,970:INFO:_display_container: 9
2025-05-04 01:16:08,970:INFO:LinearRegression(fit_intercept=False, n_jobs=-1)
2025-05-04 01:16:08,970:INFO:create_model() successfully completed......................................
2025-05-04 01:16:09,149:INFO:SubProcess create_model() end ==================================
2025-05-04 01:16:09,149:INFO:choose_better activated
2025-05-04 01:16:09,149:INFO:SubProcess create_model() called ==================================
2025-05-04 01:16:09,155:INFO:Initializing create_model()
2025-05-04 01:16:09,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:16:09,156:INFO:Checking exceptions
2025-05-04 01:16:09,156:INFO:Importing libraries
2025-05-04 01:16:09,156:INFO:Copying training dataset
2025-05-04 01:16:09,156:INFO:Defining folds
2025-05-04 01:16:09,156:INFO:Declaring metric variables
2025-05-04 01:16:09,156:INFO:Importing untrained model
2025-05-04 01:16:09,156:INFO:Declaring custom model
2025-05-04 01:16:09,156:INFO:Linear Regression Imported successfully
2025-05-04 01:16:09,156:INFO:Starting cross validation
2025-05-04 01:16:09,156:INFO:Cross validating with KFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-04 01:16:09,304:INFO:Calculating mean and std
2025-05-04 01:16:09,304:INFO:Creating metrics dataframe
2025-05-04 01:16:09,304:INFO:Finalizing model
2025-05-04 01:16:09,357:INFO:Uploading results into container
2025-05-04 01:16:09,357:INFO:Uploading model into container now
2025-05-04 01:16:09,364:INFO:_master_model_container: 13
2025-05-04 01:16:09,364:INFO:_display_container: 10
2025-05-04 01:16:09,364:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:16:09,364:INFO:create_model() successfully completed......................................
2025-05-04 01:16:09,698:INFO:SubProcess create_model() end ==================================
2025-05-04 01:16:09,698:INFO:LinearRegression(n_jobs=-1) result for RMSE is 9375.0189
2025-05-04 01:16:09,698:INFO:LinearRegression(fit_intercept=False, n_jobs=-1) result for RMSE is 9375.0189
2025-05-04 01:16:09,698:INFO:LinearRegression(n_jobs=-1) is best model
2025-05-04 01:16:09,698:INFO:choose_better completed
2025-05-04 01:16:09,698:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-05-04 01:16:09,698:INFO:Creating Dashboard logs
2025-05-04 01:16:09,698:INFO:Model: Linear Regression
2025-05-04 01:16:09,728:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:16:09,823:INFO:Initializing predict_model()
2025-05-04 01:16:09,823:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABE1B15A0>)
2025-05-04 01:16:09,823:INFO:Checking exceptions
2025-05-04 01:16:09,823:INFO:Preloading libraries
2025-05-04 01:16:09,866:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:16:10,234:INFO:_master_model_container: 13
2025-05-04 01:16:10,234:INFO:_display_container: 9
2025-05-04 01:16:10,234:INFO:LinearRegression(n_jobs=-1)
2025-05-04 01:16:10,234:INFO:tune_model() successfully completed......................................
2025-05-04 01:16:10,414:INFO:gpu_param set to False
2025-05-04 01:16:10,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:10,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:10,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:10,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:10,610:INFO:Initializing predict_model()
2025-05-04 01:16:10,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CABE705480>)
2025-05-04 01:16:10,610:INFO:Checking exceptions
2025-05-04 01:16:10,610:INFO:Preloading libraries
2025-05-04 01:16:10,666:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-05-04 01:16:10,822:INFO:Initializing plot_model()
2025-05-04 01:16:10,822:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, system=True)
2025-05-04 01:16:10,822:INFO:Checking exceptions
2025-05-04 01:16:10,823:INFO:Preloading libraries
2025-05-04 01:16:10,823:INFO:Copying training dataset
2025-05-04 01:16:10,823:INFO:Plot type: feature
2025-05-04 01:16:10,871:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-04 01:16:10,991:INFO:Saving 'Feature Importance.png'
2025-05-04 01:16:11,069:INFO:Visual Rendered Successfully
2025-05-04 01:16:11,213:INFO:plot_model() successfully completed......................................
2025-05-04 01:16:11,223:INFO:Initializing plot_model()
2025-05-04 01:16:11,223:INFO:plot_model(plot=residuals, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, system=True)
2025-05-04 01:16:11,223:INFO:Checking exceptions
2025-05-04 01:16:11,237:INFO:Preloading libraries
2025-05-04 01:16:11,237:INFO:Copying training dataset
2025-05-04 01:16:11,237:INFO:Plot type: residuals
2025-05-04 01:16:11,288:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:96: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._ax = plt.gca()

2025-05-04 01:16:11,480:INFO:Fitting Model
2025-05-04 01:16:11,481:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 01:16:11,518:INFO:Scoring test/hold-out set
2025-05-04 01:16:11,552:INFO:Saving 'Residuals.png'
2025-05-04 01:16:12,132:INFO:Visual Rendered Successfully
2025-05-04 01:16:12,272:INFO:plot_model() successfully completed......................................
2025-05-04 01:16:12,272:INFO:Initializing plot_model()
2025-05-04 01:16:12,272:INFO:plot_model(plot=error, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, system=True)
2025-05-04 01:16:12,272:INFO:Checking exceptions
2025-05-04 01:16:12,287:INFO:Preloading libraries
2025-05-04 01:16:12,287:INFO:Copying training dataset
2025-05-04 01:16:12,287:INFO:Plot type: error
2025-05-04 01:16:12,361:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 01:16:12,439:INFO:Fitting Model
2025-05-04 01:16:12,439:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2025-05-04 01:16:12,439:INFO:Scoring test/hold-out set
2025-05-04 01:16:12,470:INFO:Saving 'Prediction Error.png'
2025-05-04 01:16:12,661:INFO:Visual Rendered Successfully
2025-05-04 01:16:12,823:INFO:plot_model() successfully completed......................................
2025-05-04 01:16:12,830:INFO:Initializing plot_model()
2025-05-04 01:16:12,830:INFO:plot_model(plot=cooks, fold=None, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE65DB10>, system=True)
2025-05-04 01:16:12,830:INFO:Checking exceptions
2025-05-04 01:16:12,836:INFO:Preloading libraries
2025-05-04 01:16:12,836:INFO:Copying training dataset
2025-05-04 01:16:12,836:INFO:Plot type: cooks
2025-05-04 01:16:12,913:WARNING:D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-04 01:16:13,009:INFO:Fitting Model
2025-05-04 01:16:13,086:INFO:Saving 'Cooks Distance.png'
2025-05-04 01:16:13,267:INFO:Visual Rendered Successfully
2025-05-04 01:16:13,476:INFO:plot_model() successfully completed......................................
2025-05-04 01:16:13,520:INFO:Initializing save_model()
2025-05-04 01:16:13,520:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=./automl_outputs\automl_7\models\tuned_lr_20250504_011613_7, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:16:13,520:INFO:Adding model into prep_pipe
2025-05-04 01:16:13,526:INFO:./automl_outputs\automl_7\models\tuned_lr_20250504_011613_7.pkl saved in current working directory
2025-05-04 01:16:13,532:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 01:16:13,532:INFO:save_model() successfully completed......................................
2025-05-04 01:16:48,215:INFO:PyCaret RegressionExperiment
2025-05-04 01:16:48,215:INFO:Logging name: automl_bigdata_exp
2025-05-04 01:16:48,215:INFO:ML Usecase: MLUsecase.REGRESSION
2025-05-04 01:16:48,215:INFO:version 3.3.2
2025-05-04 01:16:48,215:INFO:Initializing setup()
2025-05-04 01:16:48,215:INFO:self.USI: 072f
2025-05-04 01:16:48,215:INFO:self._variable_keys: {'X', 'USI', 'data', 'X_train', 'fold_generator', 'exp_name_log', 'fold_groups_param', 'X_test', 'logging_param', 'exp_id', 'html_param', 'y_train', 'y', 'gpu_n_jobs_param', 'idx', 'fold_shuffle_param', 'target_param', 'y_test', 'n_jobs_param', 'transform_target_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'pipeline', 'seed', '_available_plots', 'memory'}
2025-05-04 01:16:48,215:INFO:Checking environment
2025-05-04 01:16:48,215:INFO:python_version: 3.10.11
2025-05-04 01:16:48,215:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-04 01:16:48,215:INFO:machine: AMD64
2025-05-04 01:16:48,215:INFO:platform: Windows-10-10.0.22631-SP0
2025-05-04 01:16:48,220:INFO:Memory: svmem(total=8403075072, available=532094976, percent=93.7, used=7870980096, free=532094976)
2025-05-04 01:16:48,220:INFO:Physical Core: 6
2025-05-04 01:16:48,220:INFO:Logical Core: 12
2025-05-04 01:16:48,220:INFO:Checking libraries
2025-05-04 01:16:48,220:INFO:System:
2025-05-04 01:16:48,220:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-04 01:16:48,220:INFO:executable: D:\GrabBootcamp\code\Grab-Tech-Bootcamp\BE\venv\Scripts\python.exe
2025-05-04 01:16:48,220:INFO:   machine: Windows-10-10.0.22631-SP0
2025-05-04 01:16:48,220:INFO:PyCaret required dependencies:
2025-05-04 01:16:48,220:INFO:                 pip: 23.0.1
2025-05-04 01:16:48,220:INFO:          setuptools: 65.5.0
2025-05-04 01:16:48,220:INFO:             pycaret: 3.3.2
2025-05-04 01:16:48,220:INFO:             IPython: 8.36.0
2025-05-04 01:16:48,220:INFO:          ipywidgets: 8.1.6
2025-05-04 01:16:48,220:INFO:                tqdm: 4.67.1
2025-05-04 01:16:48,220:INFO:               numpy: 1.26.4
2025-05-04 01:16:48,220:INFO:              pandas: 1.5.3
2025-05-04 01:16:48,220:INFO:              jinja2: 3.1.6
2025-05-04 01:16:48,220:INFO:               scipy: 1.11.4
2025-05-04 01:16:48,220:INFO:              joblib: 1.3.2
2025-05-04 01:16:48,220:INFO:             sklearn: 1.4.2
2025-05-04 01:16:48,220:INFO:                pyod: 2.0.4
2025-05-04 01:16:48,220:INFO:            imblearn: 0.13.0
2025-05-04 01:16:48,220:INFO:   category_encoders: 2.7.0
2025-05-04 01:16:48,220:INFO:            lightgbm: 4.6.0
2025-05-04 01:16:48,220:INFO:               numba: 0.61.0
2025-05-04 01:16:48,220:INFO:            requests: 2.32.3
2025-05-04 01:16:48,220:INFO:          matplotlib: 3.7.5
2025-05-04 01:16:48,220:INFO:          scikitplot: 0.3.7
2025-05-04 01:16:48,220:INFO:         yellowbrick: 1.5
2025-05-04 01:16:48,220:INFO:              plotly: 5.24.1
2025-05-04 01:16:48,220:INFO:    plotly-resampler: Not installed
2025-05-04 01:16:48,220:INFO:             kaleido: 0.2.1
2025-05-04 01:16:48,220:INFO:           schemdraw: 0.15
2025-05-04 01:16:48,220:INFO:         statsmodels: 0.14.4
2025-05-04 01:16:48,220:INFO:              sktime: 0.26.0
2025-05-04 01:16:48,220:INFO:               tbats: 1.1.3
2025-05-04 01:16:48,220:INFO:            pmdarima: 2.0.4
2025-05-04 01:16:48,220:INFO:              psutil: 7.0.0
2025-05-04 01:16:48,220:INFO:          markupsafe: 3.0.2
2025-05-04 01:16:48,220:INFO:             pickle5: Not installed
2025-05-04 01:16:48,220:INFO:         cloudpickle: 2.2.1
2025-05-04 01:16:48,220:INFO:         deprecation: 2.1.0
2025-05-04 01:16:48,220:INFO:              xxhash: 3.5.0
2025-05-04 01:16:48,220:INFO:           wurlitzer: Not installed
2025-05-04 01:16:48,220:INFO:PyCaret optional dependencies:
2025-05-04 01:16:48,220:INFO:                shap: 0.47.2
2025-05-04 01:16:48,220:INFO:           interpret: Not installed
2025-05-04 01:16:48,220:INFO:                umap: Not installed
2025-05-04 01:16:48,220:INFO:     ydata_profiling: 4.16.1
2025-05-04 01:16:48,220:INFO:  explainerdashboard: Not installed
2025-05-04 01:16:48,220:INFO:             autoviz: Not installed
2025-05-04 01:16:48,220:INFO:           fairlearn: Not installed
2025-05-04 01:16:48,220:INFO:          deepchecks: Not installed
2025-05-04 01:16:48,220:INFO:             xgboost: Not installed
2025-05-04 01:16:48,220:INFO:            catboost: Not installed
2025-05-04 01:16:48,220:INFO:              kmodes: Not installed
2025-05-04 01:16:48,220:INFO:             mlxtend: Not installed
2025-05-04 01:16:48,220:INFO:       statsforecast: Not installed
2025-05-04 01:16:48,220:INFO:        tune_sklearn: Not installed
2025-05-04 01:16:48,220:INFO:                 ray: Not installed
2025-05-04 01:16:48,220:INFO:            hyperopt: Not installed
2025-05-04 01:16:48,220:INFO:              optuna: 4.3.0
2025-05-04 01:16:48,220:INFO:               skopt: Not installed
2025-05-04 01:16:48,220:INFO:              mlflow: 1.30.0
2025-05-04 01:16:48,220:INFO:              gradio: Not installed
2025-05-04 01:16:48,220:INFO:             fastapi: 0.115.12
2025-05-04 01:16:48,220:INFO:             uvicorn: 0.34.2
2025-05-04 01:16:48,220:INFO:              m2cgen: Not installed
2025-05-04 01:16:48,220:INFO:           evidently: 0.7.3
2025-05-04 01:16:48,220:INFO:               fugue: Not installed
2025-05-04 01:16:48,220:INFO:           streamlit: Not installed
2025-05-04 01:16:48,220:INFO:             prophet: Not installed
2025-05-04 01:16:48,220:INFO:None
2025-05-04 01:16:48,220:INFO:Set up data.
2025-05-04 01:16:48,225:INFO:Set up folding strategy.
2025-05-04 01:16:48,225:INFO:Set up train/test split.
2025-05-04 01:16:48,232:INFO:Set up index.
2025-05-04 01:16:48,232:INFO:Assigning column types.
2025-05-04 01:16:48,232:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-04 01:16:48,337:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,423:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,423:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,423:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-05-04 01:16:48,517:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,610:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-05-04 01:16:48,733:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,849:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,850:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-05-04 01:16:48,955:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:48,955:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,057:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,057:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,057:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-04 01:16:49,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,252:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,252:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,252:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-05-04 01:16:49,349:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,349:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,449:INFO:Preparing preprocessing pipeline...
2025-05-04 01:16:49,449:INFO:Set up simple imputation.
2025-05-04 01:16:49,449:INFO:Set up encoding of categorical features.
2025-05-04 01:16:49,449:INFO:Set up column name cleaning.
2025-05-04 01:16:49,542:INFO:Finished creating preprocessing pipeline.
2025-05-04 01:16:49,557:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:16:49,557:INFO:Creating final display dataframe.
2025-05-04 01:16:49,715:INFO:Setup _display_container:                     Description               Value
0                    Session id                   7
1                        Target       Clothes Sales
2                   Target type          Regression
3           Original data shape           (3000, 9)
4        Transformed data shape           (3000, 8)
5   Transformed train set shape           (2100, 8)
6    Transformed test set shape            (900, 8)
7               Ignore features                   4
8              Numeric features                   2
9          Categorical features                   2
10                   Preprocess                True
11              Imputation type              simple
12           Numeric imputation                mean
13       Categorical imputation                mode
14     Maximum one-hot encoding                  25
15              Encoding method                None
16               Fold Generator               KFold
17                  Fold Number                   5
18                     CPU Jobs                  -1
19                      Use GPU               False
20               Log Experiment        MlflowLogger
21              Experiment Name  automl_bigdata_exp
22                          USI                072f
2025-05-04 01:16:49,811:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,811:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-04 01:16:49,904:INFO:Logging experiment in loggers
2025-05-04 01:16:50,479:INFO:SubProcess save_model() called ==================================
2025-05-04 01:16:50,495:INFO:Initializing save_model()
2025-05-04 01:16:50,495:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), model_name=C:\Users\Nghia\AppData\Local\Temp\tmp2qfw15dn\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:16:50,495:INFO:Adding model into prep_pipe
2025-05-04 01:16:50,495:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:16:50,504:INFO:C:\Users\Nghia\AppData\Local\Temp\tmp2qfw15dn\Transformation Pipeline.pkl saved in current working directory
2025-05-04 01:16:50,504:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2025-05-04 01:16:50,504:INFO:save_model() successfully completed......................................
2025-05-04 01:16:50,662:INFO:SubProcess save_model() end ==================================
2025-05-04 01:16:50,676:INFO:setup() successfully completed in 1.69s...............
2025-05-04 01:16:50,997:INFO:Initializing load_model()
2025-05-04 01:16:50,997:INFO:load_model(model_name=./automl_outputs\automl_7\models\tuned_lr_20250504_011613_7, platform=None, authentication=None, verbose=False)
2025-05-04 01:16:51,143:INFO:Initializing finalize_model()
2025-05-04 01:16:51,143:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE5D9630>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-04 01:16:51,164:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 01:16:51,174:INFO:Initializing create_model()
2025-05-04 01:16:51,174:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CABE5D9630>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-04 01:16:51,174:INFO:Checking exceptions
2025-05-04 01:16:51,176:INFO:Importing libraries
2025-05-04 01:16:51,176:INFO:Copying training dataset
2025-05-04 01:16:51,176:INFO:Defining folds
2025-05-04 01:16:51,176:INFO:Declaring metric variables
2025-05-04 01:16:51,176:INFO:Importing untrained model
2025-05-04 01:16:51,176:INFO:Declaring custom model
2025-05-04 01:16:51,181:INFO:Linear Regression Imported successfully
2025-05-04 01:16:51,182:INFO:Cross validation set to False
2025-05-04 01:16:51,182:INFO:Fitting Model
2025-05-04 01:16:51,267:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 01:16:51,267:INFO:create_model() successfully completed......................................
2025-05-04 01:16:51,516:INFO:Creating Dashboard logs
2025-05-04 01:16:51,516:INFO:Model: Linear Regression
2025-05-04 01:16:51,559:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-05-04 01:16:52,651:INFO:_master_model_container: 10
2025-05-04 01:16:52,651:INFO:_display_container: 7
2025-05-04 01:16:52,659:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 01:16:52,659:INFO:finalize_model() successfully completed......................................
2025-05-04 01:16:52,838:INFO:Initializing save_model()
2025-05-04 01:16:52,838:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))]), model_name=./automl_outputs\automl_7\models\final_lr_20250504_011652_7, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-05-04 01:16:52,838:INFO:Adding model into prep_pipe
2025-05-04 01:16:52,838:WARNING:Only Model saved as it was a pipeline.
2025-05-04 01:16:52,843:INFO:./automl_outputs\automl_7\models\final_lr_20250504_011652_7.pkl saved in current working directory
2025-05-04 01:16:52,859:INFO:Pipeline(memory=FastMemory(location=C:\Users\Nghia\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Employee Number', 'Sales'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Area', 'Date'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Area'],
                                    transformer=OneHotEncoder(cols=['Area'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['Date'],
                                    transformer=TargetEncoder(cols=['Date'],
                                                              handle_missing='return_nan'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', LinearRegression(n_jobs=-1))])
2025-05-04 01:16:52,859:INFO:save_model() successfully completed......................................
