2025-05-03 02:13:40,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:13:40,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:13:40,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:13:40,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:13:41,771:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:14:29,221:INFO:PyCaret ClassificationExperiment
2025-05-03 02:14:29,221:INFO:Logging name: automl_bigdata_exp
2025-05-03 02:14:29,221:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-05-03 02:14:29,222:INFO:version 3.3.2
2025-05-03 02:14:29,222:INFO:Initializing setup()
2025-05-03 02:14:29,222:INFO:self.USI: d034
2025-05-03 02:14:29,222:INFO:self._variable_keys: {'html_param', 'n_jobs_param', 'idx', 'fold_groups_param', 'log_plots_param', 'exp_id', 'X_train', 'y', 'fold_generator', 'is_multiclass', 'gpu_param', 'X', 'USI', 'exp_name_log', 'seed', 'fix_imbalance', 'memory', 'pipeline', '_ml_usecase', 'fold_shuffle_param', 'data', 'y_test', 'X_test', 'logging_param', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'target_param'}
2025-05-03 02:14:29,222:INFO:Checking environment
2025-05-03 02:14:29,222:INFO:python_version: 3.10.11
2025-05-03 02:14:29,222:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 02:14:29,222:INFO:machine: AMD64
2025-05-03 02:14:29,251:INFO:platform: Windows-10-10.0.26100-SP0
2025-05-03 02:14:29,257:INFO:Memory: svmem(total=8425017344, available=961527808, percent=88.6, used=7463489536, free=961527808)
2025-05-03 02:14:29,259:INFO:Physical Core: 4
2025-05-03 02:14:29,259:INFO:Logical Core: 8
2025-05-03 02:14:29,259:INFO:Checking libraries
2025-05-03 02:14:29,259:INFO:System:
2025-05-03 02:14:29,259:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 02:14:29,259:INFO:executable: c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\Scripts\python.exe
2025-05-03 02:14:29,259:INFO:   machine: Windows-10-10.0.26100-SP0
2025-05-03 02:14:29,259:INFO:PyCaret required dependencies:
2025-05-03 02:14:29,381:INFO:                 pip: 23.0.1
2025-05-03 02:14:29,381:INFO:          setuptools: 65.5.0
2025-05-03 02:14:29,381:INFO:             pycaret: 3.3.2
2025-05-03 02:14:29,381:INFO:             IPython: 8.36.0
2025-05-03 02:14:29,381:INFO:          ipywidgets: 8.1.6
2025-05-03 02:14:29,381:INFO:                tqdm: 4.67.1
2025-05-03 02:14:29,381:INFO:               numpy: 1.26.4
2025-05-03 02:14:29,386:INFO:              pandas: 2.2.3
2025-05-03 02:14:29,386:INFO:              jinja2: 3.1.6
2025-05-03 02:14:29,386:INFO:               scipy: 1.11.4
2025-05-03 02:14:29,386:INFO:              joblib: 1.3.2
2025-05-03 02:14:29,386:INFO:             sklearn: 1.4.2
2025-05-03 02:14:29,386:INFO:                pyod: 2.0.4
2025-05-03 02:14:29,386:INFO:            imblearn: 0.13.0
2025-05-03 02:14:29,386:INFO:   category_encoders: 2.7.0
2025-05-03 02:14:29,386:INFO:            lightgbm: 4.6.0
2025-05-03 02:14:29,386:INFO:               numba: 0.61.0
2025-05-03 02:14:29,386:INFO:            requests: 2.32.3
2025-05-03 02:14:29,386:INFO:          matplotlib: 3.7.5
2025-05-03 02:14:29,386:INFO:          scikitplot: 0.3.7
2025-05-03 02:14:29,386:INFO:         yellowbrick: 1.5
2025-05-03 02:14:29,386:INFO:              plotly: 5.24.1
2025-05-03 02:14:29,386:INFO:    plotly-resampler: Not installed
2025-05-03 02:14:29,386:INFO:             kaleido: 0.2.1
2025-05-03 02:14:29,386:INFO:           schemdraw: 0.15
2025-05-03 02:14:29,386:INFO:         statsmodels: 0.14.4
2025-05-03 02:14:29,388:INFO:              sktime: 0.26.0
2025-05-03 02:14:29,388:INFO:               tbats: 1.1.3
2025-05-03 02:14:29,388:INFO:            pmdarima: 2.0.4
2025-05-03 02:14:29,388:INFO:              psutil: 7.0.0
2025-05-03 02:14:29,388:INFO:          markupsafe: 3.0.2
2025-05-03 02:14:29,388:INFO:             pickle5: Not installed
2025-05-03 02:14:29,388:INFO:         cloudpickle: 2.2.1
2025-05-03 02:14:29,388:INFO:         deprecation: 2.1.0
2025-05-03 02:14:29,388:INFO:              xxhash: 3.5.0
2025-05-03 02:14:29,388:INFO:           wurlitzer: Not installed
2025-05-03 02:14:29,388:INFO:PyCaret optional dependencies:
2025-05-03 02:14:29,404:INFO:                shap: 0.47.2
2025-05-03 02:14:29,404:INFO:           interpret: Not installed
2025-05-03 02:14:29,404:INFO:                umap: Not installed
2025-05-03 02:14:29,404:INFO:     ydata_profiling: 4.16.1
2025-05-03 02:14:29,404:INFO:  explainerdashboard: Not installed
2025-05-03 02:14:29,407:INFO:             autoviz: Not installed
2025-05-03 02:14:29,407:INFO:           fairlearn: Not installed
2025-05-03 02:14:29,407:INFO:          deepchecks: Not installed
2025-05-03 02:14:29,407:INFO:             xgboost: Not installed
2025-05-03 02:14:29,407:INFO:            catboost: Not installed
2025-05-03 02:14:29,407:INFO:              kmodes: Not installed
2025-05-03 02:14:29,407:INFO:             mlxtend: Not installed
2025-05-03 02:14:29,407:INFO:       statsforecast: Not installed
2025-05-03 02:14:29,407:INFO:        tune_sklearn: Not installed
2025-05-03 02:14:29,407:INFO:                 ray: Not installed
2025-05-03 02:14:29,407:INFO:            hyperopt: Not installed
2025-05-03 02:14:29,407:INFO:              optuna: 4.3.0
2025-05-03 02:14:29,407:INFO:               skopt: Not installed
2025-05-03 02:14:29,407:INFO:              mlflow: 2.22.0
2025-05-03 02:14:29,407:INFO:              gradio: Not installed
2025-05-03 02:14:29,407:INFO:             fastapi: 0.115.12
2025-05-03 02:14:29,408:INFO:             uvicorn: 0.34.2
2025-05-03 02:14:29,408:INFO:              m2cgen: Not installed
2025-05-03 02:14:29,408:INFO:           evidently: 0.7.3
2025-05-03 02:14:29,408:INFO:               fugue: Not installed
2025-05-03 02:14:29,408:INFO:           streamlit: Not installed
2025-05-03 02:14:29,408:INFO:             prophet: Not installed
2025-05-03 02:14:29,408:INFO:None
2025-05-03 02:14:29,408:INFO:Set up data.
2025-05-03 02:14:29,413:INFO:Set up folding strategy.
2025-05-03 02:14:29,413:INFO:Set up train/test split.
2025-05-03 02:14:29,422:INFO:Set up index.
2025-05-03 02:14:29,422:INFO:Assigning column types.
2025-05-03 02:14:29,430:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 02:14:29,488:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,543:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,601:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,601:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,638:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,638:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,641:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 02:14:29,701:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,739:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,809:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-05-03 02:14:29,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,843:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:29,843:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-05-03 02:14:30,182:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,182:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,298:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,306:INFO:Preparing preprocessing pipeline...
2025-05-03 02:14:30,309:INFO:Set up simple imputation.
2025-05-03 02:14:30,311:INFO:Set up encoding of ordinal features.
2025-05-03 02:14:30,314:INFO:Set up encoding of categorical features.
2025-05-03 02:14:30,315:INFO:Set up column name cleaning.
2025-05-03 02:14:30,396:INFO:Finished creating preprocessing pipeline.
2025-05-03 02:14:30,434:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:14:30,434:INFO:Creating final display dataframe.
2025-05-03 02:14:30,651:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target         Dropped_out
2                   Target type              Binary
3           Original data shape           (249, 17)
4        Transformed data shape            (249, 6)
5   Transformed train set shape            (174, 6)
6    Transformed test set shape             (75, 6)
7               Ignore features                  11
8              Numeric features                   4
9          Categorical features                   1
10     Rows with missing values               38.2%
11                   Preprocess                True
12              Imputation type              simple
13           Numeric imputation                mean
14       Categorical imputation                mode
15     Maximum one-hot encoding                  25
16              Encoding method                None
17               Fold Generator     StratifiedKFold
18                  Fold Number                   5
19                     CPU Jobs                  -1
20                      Use GPU               False
21               Log Experiment        MlflowLogger
22              Experiment Name  automl_bigdata_exp
23                          USI                d034
2025-05-03 02:14:30,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:14:30,841:INFO:Logging experiment in loggers
2025-05-03 02:14:30,972:INFO:SubProcess save_model() called ==================================
2025-05-03 02:14:31,037:INFO:Initializing save_model()
2025-05-03 02:14:31,037:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\nkluo\AppData\Local\Temp\tmpc1u31n4x\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:14:31,037:INFO:Adding model into prep_pipe
2025-05-03 02:14:31,037:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:14:31,041:INFO:C:\Users\nkluo\AppData\Local\Temp\tmpc1u31n4x\Transformation Pipeline.pkl saved in current working directory
2025-05-03 02:14:31,072:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:14:31,072:INFO:save_model() successfully completed......................................
2025-05-03 02:14:31,322:INFO:SubProcess save_model() end ==================================
2025-05-03 02:14:31,361:INFO:setup() successfully completed in 1.64s...............
2025-05-03 02:14:31,488:INFO:Initializing compare_models()
2025-05-03 02:14:31,488:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, include=['lr', 'ridge', 'lightgbm', 'rf', 'et'], fold=5, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=False, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, 'include': ['lr', 'ridge', 'lightgbm', 'rf', 'et'], 'exclude': None, 'fold': 5, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': False, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-05-03 02:14:31,488:INFO:Checking exceptions
2025-05-03 02:14:31,497:INFO:Preparing display monitor
2025-05-03 02:14:31,499:INFO:Initializing Logistic Regression
2025-05-03 02:14:31,499:INFO:Total runtime is 0.0 minutes
2025-05-03 02:14:31,501:INFO:SubProcess create_model() called ==================================
2025-05-03 02:14:31,501:INFO:Initializing create_model()
2025-05-03 02:14:31,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016502A53B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:31,501:INFO:Checking exceptions
2025-05-03 02:14:31,501:INFO:Importing libraries
2025-05-03 02:14:31,501:INFO:Copying training dataset
2025-05-03 02:14:31,502:INFO:Defining folds
2025-05-03 02:14:31,502:INFO:Declaring metric variables
2025-05-03 02:14:31,511:INFO:Importing untrained model
2025-05-03 02:14:31,511:INFO:Logistic Regression Imported successfully
2025-05-03 02:14:31,511:INFO:Starting cross validation
2025-05-03 02:14:31,511:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:40,667:INFO:Calculating mean and std
2025-05-03 02:14:40,669:INFO:Creating metrics dataframe
2025-05-03 02:14:40,676:INFO:Uploading results into container
2025-05-03 02:14:40,681:INFO:Uploading model into container now
2025-05-03 02:14:40,683:INFO:_master_model_container: 1
2025-05-03 02:14:40,683:INFO:_display_container: 2
2025-05-03 02:14:40,683:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:14:40,683:INFO:create_model() successfully completed......................................
2025-05-03 02:14:41,011:INFO:SubProcess create_model() end ==================================
2025-05-03 02:14:41,011:INFO:Creating metrics dataframe
2025-05-03 02:14:41,022:INFO:Initializing Ridge Classifier
2025-05-03 02:14:41,022:INFO:Total runtime is 0.15871079762776694 minutes
2025-05-03 02:14:41,022:INFO:SubProcess create_model() called ==================================
2025-05-03 02:14:41,022:INFO:Initializing create_model()
2025-05-03 02:14:41,022:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016502A53B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:41,022:INFO:Checking exceptions
2025-05-03 02:14:41,022:INFO:Importing libraries
2025-05-03 02:14:41,022:INFO:Copying training dataset
2025-05-03 02:14:41,031:INFO:Defining folds
2025-05-03 02:14:41,031:INFO:Declaring metric variables
2025-05-03 02:14:41,031:INFO:Importing untrained model
2025-05-03 02:14:41,031:INFO:Ridge Classifier Imported successfully
2025-05-03 02:14:41,031:INFO:Starting cross validation
2025-05-03 02:14:41,031:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:46,467:INFO:Calculating mean and std
2025-05-03 02:14:46,469:INFO:Creating metrics dataframe
2025-05-03 02:14:46,475:INFO:Uploading results into container
2025-05-03 02:14:46,475:INFO:Uploading model into container now
2025-05-03 02:14:46,475:INFO:_master_model_container: 2
2025-05-03 02:14:46,475:INFO:_display_container: 2
2025-05-03 02:14:46,475:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1, solver='auto',
                tol=0.0001)
2025-05-03 02:14:46,475:INFO:create_model() successfully completed......................................
2025-05-03 02:14:46,727:INFO:SubProcess create_model() end ==================================
2025-05-03 02:14:46,727:INFO:Creating metrics dataframe
2025-05-03 02:14:46,734:INFO:Initializing Light Gradient Boosting Machine
2025-05-03 02:14:46,734:INFO:Total runtime is 0.25391921599706013 minutes
2025-05-03 02:14:46,736:INFO:SubProcess create_model() called ==================================
2025-05-03 02:14:46,736:INFO:Initializing create_model()
2025-05-03 02:14:46,736:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016502A53B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:46,736:INFO:Checking exceptions
2025-05-03 02:14:46,736:INFO:Importing libraries
2025-05-03 02:14:46,736:INFO:Copying training dataset
2025-05-03 02:14:46,743:INFO:Defining folds
2025-05-03 02:14:46,743:INFO:Declaring metric variables
2025-05-03 02:14:46,743:INFO:Importing untrained model
2025-05-03 02:14:46,746:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 02:14:46,746:INFO:Starting cross validation
2025-05-03 02:14:46,749:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:47,111:INFO:Calculating mean and std
2025-05-03 02:14:47,111:INFO:Creating metrics dataframe
2025-05-03 02:14:47,115:INFO:Uploading results into container
2025-05-03 02:14:47,115:INFO:Uploading model into container now
2025-05-03 02:14:47,117:INFO:_master_model_container: 3
2025-05-03 02:14:47,117:INFO:_display_container: 2
2025-05-03 02:14:47,117:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-05-03 02:14:47,117:INFO:create_model() successfully completed......................................
2025-05-03 02:14:47,323:INFO:SubProcess create_model() end ==================================
2025-05-03 02:14:47,323:INFO:Creating metrics dataframe
2025-05-03 02:14:47,332:INFO:Initializing Random Forest Classifier
2025-05-03 02:14:47,332:INFO:Total runtime is 0.26387490034103395 minutes
2025-05-03 02:14:47,332:INFO:SubProcess create_model() called ==================================
2025-05-03 02:14:47,332:INFO:Initializing create_model()
2025-05-03 02:14:47,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016502A53B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:47,332:INFO:Checking exceptions
2025-05-03 02:14:47,336:INFO:Importing libraries
2025-05-03 02:14:47,336:INFO:Copying training dataset
2025-05-03 02:14:47,341:INFO:Defining folds
2025-05-03 02:14:47,341:INFO:Declaring metric variables
2025-05-03 02:14:47,341:INFO:Importing untrained model
2025-05-03 02:14:47,341:INFO:Random Forest Classifier Imported successfully
2025-05-03 02:14:47,341:INFO:Starting cross validation
2025-05-03 02:14:47,341:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:47,926:INFO:Calculating mean and std
2025-05-03 02:14:47,926:INFO:Creating metrics dataframe
2025-05-03 02:14:47,926:INFO:Uploading results into container
2025-05-03 02:14:47,926:INFO:Uploading model into container now
2025-05-03 02:14:47,930:INFO:_master_model_container: 4
2025-05-03 02:14:47,930:INFO:_display_container: 2
2025-05-03 02:14:47,930:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1, verbose=0,
                       warm_start=False)
2025-05-03 02:14:47,930:INFO:create_model() successfully completed......................................
2025-05-03 02:14:48,116:INFO:SubProcess create_model() end ==================================
2025-05-03 02:14:48,116:INFO:Creating metrics dataframe
2025-05-03 02:14:48,124:INFO:Initializing Extra Trees Classifier
2025-05-03 02:14:48,124:INFO:Total runtime is 0.2770782987276713 minutes
2025-05-03 02:14:48,124:INFO:SubProcess create_model() called ==================================
2025-05-03 02:14:48,124:INFO:Initializing create_model()
2025-05-03 02:14:48,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016502A53B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:48,124:INFO:Checking exceptions
2025-05-03 02:14:48,124:INFO:Importing libraries
2025-05-03 02:14:48,124:INFO:Copying training dataset
2025-05-03 02:14:48,131:INFO:Defining folds
2025-05-03 02:14:48,131:INFO:Declaring metric variables
2025-05-03 02:14:48,132:INFO:Importing untrained model
2025-05-03 02:14:48,132:INFO:Extra Trees Classifier Imported successfully
2025-05-03 02:14:48,132:INFO:Starting cross validation
2025-05-03 02:14:48,132:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:48,599:INFO:Calculating mean and std
2025-05-03 02:14:48,599:INFO:Creating metrics dataframe
2025-05-03 02:14:48,601:INFO:Uploading results into container
2025-05-03 02:14:48,601:INFO:Uploading model into container now
2025-05-03 02:14:48,601:INFO:_master_model_container: 5
2025-05-03 02:14:48,601:INFO:_display_container: 2
2025-05-03 02:14:48,601:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False)
2025-05-03 02:14:48,601:INFO:create_model() successfully completed......................................
2025-05-03 02:14:48,803:INFO:SubProcess create_model() end ==================================
2025-05-03 02:14:48,803:INFO:Creating metrics dataframe
2025-05-03 02:14:48,811:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-05-03 02:14:48,811:INFO:Initializing create_model()
2025-05-03 02:14:48,811:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:48,811:INFO:Checking exceptions
2025-05-03 02:14:48,811:INFO:Importing libraries
2025-05-03 02:14:48,811:INFO:Copying training dataset
2025-05-03 02:14:48,821:INFO:Defining folds
2025-05-03 02:14:48,821:INFO:Declaring metric variables
2025-05-03 02:14:48,821:INFO:Importing untrained model
2025-05-03 02:14:48,821:INFO:Declaring custom model
2025-05-03 02:14:48,821:INFO:Extra Trees Classifier Imported successfully
2025-05-03 02:14:48,821:INFO:Cross validation set to False
2025-05-03 02:14:48,821:INFO:Fitting Model
2025-05-03 02:14:49,016:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False)
2025-05-03 02:14:49,016:INFO:create_model() successfully completed......................................
2025-05-03 02:14:49,204:INFO:Creating Dashboard logs
2025-05-03 02:14:49,206:INFO:Model: Extra Trees Classifier
2025-05-03 02:14:49,241:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 02:14:49,421:INFO:Initializing predict_model()
2025-05-03 02:14:49,421:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000165030E6D40>)
2025-05-03 02:14:49,421:INFO:Checking exceptions
2025-05-03 02:14:49,421:INFO:Preloading libraries
2025-05-03 02:14:49,812:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 02:14:50,131:INFO:Creating Dashboard logs
2025-05-03 02:14:50,131:INFO:Model: Random Forest Classifier
2025-05-03 02:14:50,169:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 02:14:50,575:INFO:Creating Dashboard logs
2025-05-03 02:14:50,575:INFO:Model: Light Gradient Boosting Machine
2025-05-03 02:14:50,608:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 1, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 02:14:51,031:INFO:Creating Dashboard logs
2025-05-03 02:14:51,031:INFO:Model: Logistic Regression
2025-05-03 02:14:51,062:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:14:51,463:INFO:Creating Dashboard logs
2025-05-03 02:14:51,463:INFO:Model: Ridge Classifier
2025-05-03 02:14:51,493:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 1, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 02:14:51,901:INFO:_master_model_container: 5
2025-05-03 02:14:51,901:INFO:_display_container: 2
2025-05-03 02:14:51,901:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False)
2025-05-03 02:14:51,901:INFO:compare_models() successfully completed......................................
2025-05-03 02:14:52,023:INFO:Initializing create_model()
2025-05-03 02:14:52,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:52,023:INFO:Checking exceptions
2025-05-03 02:14:52,023:INFO:Importing libraries
2025-05-03 02:14:52,023:INFO:Copying training dataset
2025-05-03 02:14:52,023:INFO:Defining folds
2025-05-03 02:14:52,023:INFO:Declaring metric variables
2025-05-03 02:14:52,031:INFO:Importing untrained model
2025-05-03 02:14:52,031:INFO:Logistic Regression Imported successfully
2025-05-03 02:14:52,031:INFO:Starting cross validation
2025-05-03 02:14:52,031:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:52,187:INFO:Calculating mean and std
2025-05-03 02:14:52,187:INFO:Creating metrics dataframe
2025-05-03 02:14:52,196:INFO:Finalizing model
2025-05-03 02:14:52,313:INFO:Creating Dashboard logs
2025-05-03 02:14:52,313:INFO:Model: Logistic Regression
2025-05-03 02:14:52,432:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:14:52,696:INFO:Initializing predict_model()
2025-05-03 02:14:52,696:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000165030F7880>)
2025-05-03 02:14:52,696:INFO:Checking exceptions
2025-05-03 02:14:52,696:INFO:Preloading libraries
2025-05-03 02:14:53,273:INFO:Uploading results into container
2025-05-03 02:14:53,273:INFO:Uploading model into container now
2025-05-03 02:14:53,277:INFO:_master_model_container: 6
2025-05-03 02:14:53,277:INFO:_display_container: 3
2025-05-03 02:14:53,277:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:14:53,277:INFO:create_model() successfully completed......................................
2025-05-03 02:14:53,525:INFO:Initializing plot_model()
2025-05-03 02:14:53,525:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, system=True)
2025-05-03 02:14:53,525:INFO:Checking exceptions
2025-05-03 02:14:53,527:INFO:Preloading libraries
2025-05-03 02:14:53,527:INFO:Copying training dataset
2025-05-03 02:14:53,527:INFO:Plot type: feature
2025-05-03 02:14:53,991:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:14:55,450:INFO:Saving 'Feature Importance.png'
2025-05-03 02:14:55,641:INFO:Visual Rendered Successfully
2025-05-03 02:14:55,845:INFO:plot_model() successfully completed......................................
2025-05-03 02:14:55,953:INFO:Initializing create_model()
2025-05-03 02:14:55,953:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=ridge, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:55,953:INFO:Checking exceptions
2025-05-03 02:14:55,956:INFO:Importing libraries
2025-05-03 02:14:55,956:INFO:Copying training dataset
2025-05-03 02:14:55,961:INFO:Defining folds
2025-05-03 02:14:55,962:INFO:Declaring metric variables
2025-05-03 02:14:55,962:INFO:Importing untrained model
2025-05-03 02:14:55,962:INFO:Ridge Classifier Imported successfully
2025-05-03 02:14:55,962:INFO:Starting cross validation
2025-05-03 02:14:55,962:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:56,103:INFO:Calculating mean and std
2025-05-03 02:14:56,103:INFO:Creating metrics dataframe
2025-05-03 02:14:56,103:INFO:Finalizing model
2025-05-03 02:14:56,136:INFO:Creating Dashboard logs
2025-05-03 02:14:56,136:INFO:Model: Ridge Classifier
2025-05-03 02:14:56,170:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 1, 'solver': 'auto', 'tol': 0.0001}
2025-05-03 02:14:56,331:INFO:Initializing predict_model()
2025-05-03 02:14:56,331:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1, solver='auto',
                tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000165030E5B40>)
2025-05-03 02:14:56,331:INFO:Checking exceptions
2025-05-03 02:14:56,331:INFO:Preloading libraries
2025-05-03 02:14:56,924:INFO:Uploading results into container
2025-05-03 02:14:56,924:INFO:Uploading model into container now
2025-05-03 02:14:56,926:INFO:_master_model_container: 7
2025-05-03 02:14:56,926:INFO:_display_container: 4
2025-05-03 02:14:56,926:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1, solver='auto',
                tol=0.0001)
2025-05-03 02:14:56,926:INFO:create_model() successfully completed......................................
2025-05-03 02:14:57,172:INFO:Initializing plot_model()
2025-05-03 02:14:57,172:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, system=True)
2025-05-03 02:14:57,173:INFO:Checking exceptions
2025-05-03 02:14:57,175:INFO:Preloading libraries
2025-05-03 02:14:57,175:INFO:Copying training dataset
2025-05-03 02:14:57,175:INFO:Plot type: feature
2025-05-03 02:14:57,273:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:14:57,415:INFO:Saving 'Feature Importance.png'
2025-05-03 02:14:57,555:INFO:Visual Rendered Successfully
2025-05-03 02:14:57,741:INFO:plot_model() successfully completed......................................
2025-05-03 02:14:57,851:INFO:Initializing create_model()
2025-05-03 02:14:57,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=lightgbm, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:14:57,851:INFO:Checking exceptions
2025-05-03 02:14:57,851:INFO:Importing libraries
2025-05-03 02:14:57,851:INFO:Copying training dataset
2025-05-03 02:14:57,860:INFO:Defining folds
2025-05-03 02:14:57,860:INFO:Declaring metric variables
2025-05-03 02:14:57,860:INFO:Importing untrained model
2025-05-03 02:14:57,861:INFO:Light Gradient Boosting Machine Imported successfully
2025-05-03 02:14:57,861:INFO:Starting cross validation
2025-05-03 02:14:57,861:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:14:58,478:INFO:Calculating mean and std
2025-05-03 02:14:58,478:INFO:Creating metrics dataframe
2025-05-03 02:14:58,483:INFO:Finalizing model
2025-05-03 02:14:58,558:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-05-03 02:14:58,558:INFO:[LightGBM] [Info] Number of positive: 118, number of negative: 56
2025-05-03 02:14:58,558:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000200 seconds.
2025-05-03 02:14:58,558:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-05-03 02:14:58,558:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-05-03 02:14:58,561:INFO:[LightGBM] [Info] Total Bins 8
2025-05-03 02:14:58,561:INFO:[LightGBM] [Info] Number of data points in the train set: 174, number of used features: 4
2025-05-03 02:14:58,561:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.678161 -> initscore=0.745333
2025-05-03 02:14:58,561:INFO:[LightGBM] [Info] Start training from score 0.745333
2025-05-03 02:14:58,561:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,563:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,563:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,563:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,565:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,570:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,570:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,573:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,573:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,573:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,574:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,575:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,575:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,580:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,580:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,581:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,581:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,581:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,584:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,584:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-05-03 02:14:58,613:INFO:Creating Dashboard logs
2025-05-03 02:14:58,615:INFO:Model: Light Gradient Boosting Machine
2025-05-03 02:14:58,661:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 1, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-05-03 02:14:58,818:INFO:Initializing predict_model()
2025-05-03 02:14:58,818:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016502ABB9A0>)
2025-05-03 02:14:58,818:INFO:Checking exceptions
2025-05-03 02:14:58,818:INFO:Preloading libraries
2025-05-03 02:14:59,511:INFO:Uploading results into container
2025-05-03 02:14:59,511:INFO:Uploading model into container now
2025-05-03 02:14:59,511:INFO:_master_model_container: 8
2025-05-03 02:14:59,516:INFO:_display_container: 5
2025-05-03 02:14:59,516:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-05-03 02:14:59,516:INFO:create_model() successfully completed......................................
2025-05-03 02:14:59,761:INFO:Initializing plot_model()
2025-05-03 02:14:59,761:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, system=True)
2025-05-03 02:14:59,761:INFO:Checking exceptions
2025-05-03 02:14:59,763:INFO:Preloading libraries
2025-05-03 02:14:59,771:INFO:Copying training dataset
2025-05-03 02:14:59,771:INFO:Plot type: feature
2025-05-03 02:14:59,771:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 02:14:59,868:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:15:00,021:INFO:Saving 'Feature Importance.png'
2025-05-03 02:15:00,171:INFO:Visual Rendered Successfully
2025-05-03 02:15:00,361:INFO:plot_model() successfully completed......................................
2025-05-03 02:15:00,477:INFO:Initializing create_model()
2025-05-03 02:15:00,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:15:00,477:INFO:Checking exceptions
2025-05-03 02:15:00,477:INFO:Importing libraries
2025-05-03 02:15:00,477:INFO:Copying training dataset
2025-05-03 02:15:00,481:INFO:Defining folds
2025-05-03 02:15:00,484:INFO:Declaring metric variables
2025-05-03 02:15:00,484:INFO:Importing untrained model
2025-05-03 02:15:00,484:INFO:Random Forest Classifier Imported successfully
2025-05-03 02:15:00,484:INFO:Starting cross validation
2025-05-03 02:15:00,484:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:15:01,050:INFO:Calculating mean and std
2025-05-03 02:15:01,051:INFO:Creating metrics dataframe
2025-05-03 02:15:01,051:INFO:Finalizing model
2025-05-03 02:15:01,266:INFO:Creating Dashboard logs
2025-05-03 02:15:01,266:INFO:Model: Random Forest Classifier
2025-05-03 02:15:01,299:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 02:15:01,456:INFO:Initializing predict_model()
2025-05-03 02:15:01,456:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016502ABB9A0>)
2025-05-03 02:15:01,456:INFO:Checking exceptions
2025-05-03 02:15:01,456:INFO:Preloading libraries
2025-05-03 02:15:02,171:INFO:Uploading results into container
2025-05-03 02:15:02,175:INFO:Uploading model into container now
2025-05-03 02:15:02,175:INFO:_master_model_container: 9
2025-05-03 02:15:02,175:INFO:_display_container: 6
2025-05-03 02:15:02,175:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1, verbose=0,
                       warm_start=False)
2025-05-03 02:15:02,175:INFO:create_model() successfully completed......................................
2025-05-03 02:15:02,515:INFO:Initializing plot_model()
2025-05-03 02:15:02,515:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, system=True)
2025-05-03 02:15:02,515:INFO:Checking exceptions
2025-05-03 02:15:02,590:INFO:Preloading libraries
2025-05-03 02:15:02,611:INFO:Copying training dataset
2025-05-03 02:15:02,611:INFO:Plot type: feature
2025-05-03 02:15:02,612:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 02:15:02,703:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:15:02,851:INFO:Saving 'Feature Importance.png'
2025-05-03 02:15:02,997:INFO:Visual Rendered Successfully
2025-05-03 02:15:03,185:INFO:plot_model() successfully completed......................................
2025-05-03 02:15:03,291:INFO:Initializing create_model()
2025-05-03 02:15:03,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=et, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:15:03,291:INFO:Checking exceptions
2025-05-03 02:15:03,291:INFO:Importing libraries
2025-05-03 02:15:03,291:INFO:Copying training dataset
2025-05-03 02:15:03,294:INFO:Defining folds
2025-05-03 02:15:03,294:INFO:Declaring metric variables
2025-05-03 02:15:03,294:INFO:Importing untrained model
2025-05-03 02:15:03,294:INFO:Extra Trees Classifier Imported successfully
2025-05-03 02:15:03,299:INFO:Starting cross validation
2025-05-03 02:15:03,300:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:15:03,852:INFO:Calculating mean and std
2025-05-03 02:15:03,852:INFO:Creating metrics dataframe
2025-05-03 02:15:03,862:INFO:Finalizing model
2025-05-03 02:15:04,121:INFO:Creating Dashboard logs
2025-05-03 02:15:04,121:INFO:Model: Extra Trees Classifier
2025-05-03 02:15:04,153:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1, 'verbose': 0, 'warm_start': False}
2025-05-03 02:15:04,296:INFO:Initializing predict_model()
2025-05-03 02:15:04,296:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000165030F72E0>)
2025-05-03 02:15:04,296:INFO:Checking exceptions
2025-05-03 02:15:04,296:INFO:Preloading libraries
2025-05-03 02:15:05,036:INFO:Uploading results into container
2025-05-03 02:15:05,036:INFO:Uploading model into container now
2025-05-03 02:15:05,040:INFO:_master_model_container: 10
2025-05-03 02:15:05,040:INFO:_display_container: 7
2025-05-03 02:15:05,040:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False)
2025-05-03 02:15:05,040:INFO:create_model() successfully completed......................................
2025-05-03 02:15:05,361:INFO:Initializing plot_model()
2025-05-03 02:15:05,364:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016502D701F0>, system=True)
2025-05-03 02:15:05,364:INFO:Checking exceptions
2025-05-03 02:15:05,451:INFO:Preloading libraries
2025-05-03 02:15:05,471:INFO:Copying training dataset
2025-05-03 02:15:05,471:INFO:Plot type: feature
2025-05-03 02:15:05,471:WARNING:No coef_ found. Trying feature_importances_
2025-05-03 02:15:05,545:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:15:05,685:INFO:Saving 'Feature Importance.png'
2025-05-03 02:15:05,853:INFO:Visual Rendered Successfully
2025-05-03 02:15:06,044:INFO:plot_model() successfully completed......................................
2025-05-03 02:15:52,738:INFO:PyCaret ClassificationExperiment
2025-05-03 02:15:52,738:INFO:Logging name: automl_bigdata_exp
2025-05-03 02:15:52,738:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-05-03 02:15:52,738:INFO:version 3.3.2
2025-05-03 02:15:52,738:INFO:Initializing setup()
2025-05-03 02:15:52,738:INFO:self.USI: 7104
2025-05-03 02:15:52,738:INFO:self._variable_keys: {'idx', 'log_plots_param', 'exp_id', 'X_train', 'is_multiclass', 'X', 'USI', 'exp_name_log', '_ml_usecase', 'fold_shuffle_param', 'y_test', 'logging_param', 'gpu_param', 'y_train', 'target_param', 'html_param', 'n_jobs_param', 'fold_groups_param', 'y', 'fold_generator', 'seed', 'fix_imbalance', 'memory', 'pipeline', 'data', 'X_test', '_available_plots', 'gpu_n_jobs_param'}
2025-05-03 02:15:52,738:INFO:Checking environment
2025-05-03 02:15:52,738:INFO:python_version: 3.10.11
2025-05-03 02:15:52,738:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 02:15:52,738:INFO:machine: AMD64
2025-05-03 02:15:52,738:INFO:platform: Windows-10-10.0.26100-SP0
2025-05-03 02:15:52,747:INFO:Memory: svmem(total=8425017344, available=596500480, percent=92.9, used=7828516864, free=596500480)
2025-05-03 02:15:52,747:INFO:Physical Core: 4
2025-05-03 02:15:52,747:INFO:Logical Core: 8
2025-05-03 02:15:52,748:INFO:Checking libraries
2025-05-03 02:15:52,748:INFO:System:
2025-05-03 02:15:52,748:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 02:15:52,748:INFO:executable: c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\Scripts\python.exe
2025-05-03 02:15:52,748:INFO:   machine: Windows-10-10.0.26100-SP0
2025-05-03 02:15:52,748:INFO:PyCaret required dependencies:
2025-05-03 02:15:52,748:INFO:                 pip: 23.0.1
2025-05-03 02:15:52,751:INFO:          setuptools: 65.5.0
2025-05-03 02:15:52,751:INFO:             pycaret: 3.3.2
2025-05-03 02:15:52,751:INFO:             IPython: 8.36.0
2025-05-03 02:15:52,751:INFO:          ipywidgets: 8.1.6
2025-05-03 02:15:52,751:INFO:                tqdm: 4.67.1
2025-05-03 02:15:52,751:INFO:               numpy: 1.26.4
2025-05-03 02:15:52,751:INFO:              pandas: 2.2.3
2025-05-03 02:15:52,751:INFO:              jinja2: 3.1.6
2025-05-03 02:15:52,752:INFO:               scipy: 1.11.4
2025-05-03 02:15:52,752:INFO:              joblib: 1.3.2
2025-05-03 02:15:52,752:INFO:             sklearn: 1.4.2
2025-05-03 02:15:52,752:INFO:                pyod: 2.0.4
2025-05-03 02:15:52,752:INFO:            imblearn: 0.13.0
2025-05-03 02:15:52,752:INFO:   category_encoders: 2.7.0
2025-05-03 02:15:52,752:INFO:            lightgbm: 4.6.0
2025-05-03 02:15:52,752:INFO:               numba: 0.61.0
2025-05-03 02:15:52,752:INFO:            requests: 2.32.3
2025-05-03 02:15:52,752:INFO:          matplotlib: 3.7.5
2025-05-03 02:15:52,752:INFO:          scikitplot: 0.3.7
2025-05-03 02:15:52,752:INFO:         yellowbrick: 1.5
2025-05-03 02:15:52,752:INFO:              plotly: 5.24.1
2025-05-03 02:15:52,752:INFO:    plotly-resampler: Not installed
2025-05-03 02:15:52,752:INFO:             kaleido: 0.2.1
2025-05-03 02:15:52,752:INFO:           schemdraw: 0.15
2025-05-03 02:15:52,752:INFO:         statsmodels: 0.14.4
2025-05-03 02:15:52,752:INFO:              sktime: 0.26.0
2025-05-03 02:15:52,754:INFO:               tbats: 1.1.3
2025-05-03 02:15:52,754:INFO:            pmdarima: 2.0.4
2025-05-03 02:15:52,755:INFO:              psutil: 7.0.0
2025-05-03 02:15:52,755:INFO:          markupsafe: 3.0.2
2025-05-03 02:15:52,755:INFO:             pickle5: Not installed
2025-05-03 02:15:52,755:INFO:         cloudpickle: 2.2.1
2025-05-03 02:15:52,755:INFO:         deprecation: 2.1.0
2025-05-03 02:15:52,755:INFO:              xxhash: 3.5.0
2025-05-03 02:15:52,755:INFO:           wurlitzer: Not installed
2025-05-03 02:15:52,755:INFO:PyCaret optional dependencies:
2025-05-03 02:15:52,755:INFO:                shap: 0.47.2
2025-05-03 02:15:52,755:INFO:           interpret: Not installed
2025-05-03 02:15:52,755:INFO:                umap: Not installed
2025-05-03 02:15:52,755:INFO:     ydata_profiling: 4.16.1
2025-05-03 02:15:52,755:INFO:  explainerdashboard: Not installed
2025-05-03 02:15:52,755:INFO:             autoviz: Not installed
2025-05-03 02:15:52,755:INFO:           fairlearn: Not installed
2025-05-03 02:15:52,755:INFO:          deepchecks: Not installed
2025-05-03 02:15:52,755:INFO:             xgboost: Not installed
2025-05-03 02:15:52,755:INFO:            catboost: Not installed
2025-05-03 02:15:52,755:INFO:              kmodes: Not installed
2025-05-03 02:15:52,755:INFO:             mlxtend: Not installed
2025-05-03 02:15:52,755:INFO:       statsforecast: Not installed
2025-05-03 02:15:52,755:INFO:        tune_sklearn: Not installed
2025-05-03 02:15:52,755:INFO:                 ray: Not installed
2025-05-03 02:15:52,755:INFO:            hyperopt: Not installed
2025-05-03 02:15:52,755:INFO:              optuna: 4.3.0
2025-05-03 02:15:52,755:INFO:               skopt: Not installed
2025-05-03 02:15:52,755:INFO:              mlflow: 2.22.0
2025-05-03 02:15:52,760:INFO:              gradio: Not installed
2025-05-03 02:15:52,760:INFO:             fastapi: 0.115.12
2025-05-03 02:15:52,760:INFO:             uvicorn: 0.34.2
2025-05-03 02:15:52,760:INFO:              m2cgen: Not installed
2025-05-03 02:15:52,760:INFO:           evidently: 0.7.3
2025-05-03 02:15:52,761:INFO:               fugue: Not installed
2025-05-03 02:15:52,761:INFO:           streamlit: Not installed
2025-05-03 02:15:52,761:INFO:             prophet: Not installed
2025-05-03 02:15:52,761:INFO:None
2025-05-03 02:15:52,761:INFO:Set up data.
2025-05-03 02:15:52,779:INFO:Set up folding strategy.
2025-05-03 02:15:52,779:INFO:Set up train/test split.
2025-05-03 02:15:52,796:INFO:Set up index.
2025-05-03 02:15:52,797:INFO:Assigning column types.
2025-05-03 02:15:52,806:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 02:15:52,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:52,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,021:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,021:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,021:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 02:15:53,140:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,140:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,261:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,261:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-05-03 02:15:53,356:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,356:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,447:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,447:INFO:Preparing preprocessing pipeline...
2025-05-03 02:15:53,447:INFO:Set up simple imputation.
2025-05-03 02:15:53,453:INFO:Set up encoding of ordinal features.
2025-05-03 02:15:53,455:INFO:Set up encoding of categorical features.
2025-05-03 02:15:53,455:INFO:Set up column name cleaning.
2025-05-03 02:15:53,513:INFO:Finished creating preprocessing pipeline.
2025-05-03 02:15:53,547:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:15:53,547:INFO:Creating final display dataframe.
2025-05-03 02:15:53,736:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target         Dropped_out
2                   Target type              Binary
3           Original data shape           (249, 17)
4        Transformed data shape            (249, 6)
5   Transformed train set shape            (174, 6)
6    Transformed test set shape             (75, 6)
7               Ignore features                  11
8              Numeric features                   4
9          Categorical features                   1
10     Rows with missing values               38.2%
11                   Preprocess                True
12              Imputation type              simple
13           Numeric imputation                mean
14       Categorical imputation                mode
15     Maximum one-hot encoding                  25
16              Encoding method                None
17               Fold Generator     StratifiedKFold
18                  Fold Number                   5
19                     CPU Jobs                  -1
20                      Use GPU               False
21               Log Experiment        MlflowLogger
22              Experiment Name  automl_bigdata_exp
23                          USI                7104
2025-05-03 02:15:53,827:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,916:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,917:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:15:53,917:INFO:Logging experiment in loggers
2025-05-03 02:15:54,035:INFO:SubProcess save_model() called ==================================
2025-05-03 02:15:54,091:INFO:Initializing save_model()
2025-05-03 02:15:54,091:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\nkluo\AppData\Local\Temp\tmp6peol97o\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:15:54,091:INFO:Adding model into prep_pipe
2025-05-03 02:15:54,091:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:15:54,101:INFO:C:\Users\nkluo\AppData\Local\Temp\tmp6peol97o\Transformation Pipeline.pkl saved in current working directory
2025-05-03 02:15:54,131:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:15:54,131:INFO:save_model() successfully completed......................................
2025-05-03 02:15:54,343:INFO:SubProcess save_model() end ==================================
2025-05-03 02:15:54,362:INFO:setup() successfully completed in 1.23s...............
2025-05-03 02:15:54,468:INFO:Initializing create_model()
2025-05-03 02:15:54,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=lr, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:15:54,468:INFO:Checking exceptions
2025-05-03 02:15:54,469:INFO:Importing libraries
2025-05-03 02:15:54,469:INFO:Copying training dataset
2025-05-03 02:15:54,475:INFO:Defining folds
2025-05-03 02:15:54,475:INFO:Declaring metric variables
2025-05-03 02:15:54,476:INFO:Importing untrained model
2025-05-03 02:15:54,476:INFO:Logistic Regression Imported successfully
2025-05-03 02:15:54,477:INFO:Starting cross validation
2025-05-03 02:15:54,478:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:15:54,639:INFO:Calculating mean and std
2025-05-03 02:15:54,642:INFO:Creating metrics dataframe
2025-05-03 02:15:54,645:INFO:Finalizing model
2025-05-03 02:15:54,681:INFO:Creating Dashboard logs
2025-05-03 02:15:54,681:INFO:Model: Logistic Regression
2025-05-03 02:15:54,706:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:15:54,885:INFO:Initializing predict_model()
2025-05-03 02:15:54,885:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001650353BAC0>)
2025-05-03 02:15:54,888:INFO:Checking exceptions
2025-05-03 02:15:54,888:INFO:Preloading libraries
2025-05-03 02:15:55,547:INFO:Uploading results into container
2025-05-03 02:15:55,547:INFO:Uploading model into container now
2025-05-03 02:15:55,547:INFO:_master_model_container: 11
2025-05-03 02:15:55,551:INFO:_display_container: 8
2025-05-03 02:15:55,551:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:15:55,551:INFO:create_model() successfully completed......................................
2025-05-03 02:15:55,796:INFO:Initializing tune_model()
2025-05-03 02:15:55,796:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=5, round=4, n_iter=25, custom_grid=None, optimize=AUC, custom_scorer=None, search_library=scikit-learn, search_algorithm=random, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=False, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>)
2025-05-03 02:15:55,796:INFO:Checking exceptions
2025-05-03 02:15:55,801:INFO:Copying training dataset
2025-05-03 02:15:55,811:INFO:Checking base model
2025-05-03 02:15:55,811:INFO:Base model : Logistic Regression
2025-05-03 02:15:55,813:INFO:Declaring metric variables
2025-05-03 02:15:55,813:INFO:Defining Hyperparameters
2025-05-03 02:15:56,051:INFO:Tuning with n_jobs=-1
2025-05-03 02:15:56,051:INFO:Initializing RandomizedSearchCV
2025-05-03 02:15:58,981:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 8.645}
2025-05-03 02:15:58,981:INFO:Hyperparameter search completed
2025-05-03 02:15:58,981:INFO:SubProcess create_model() called ==================================
2025-05-03 02:15:58,981:INFO:Initializing create_model()
2025-05-03 02:15:58,981:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016564ABC400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 8.645})
2025-05-03 02:15:58,981:INFO:Checking exceptions
2025-05-03 02:15:58,981:INFO:Importing libraries
2025-05-03 02:15:58,981:INFO:Copying training dataset
2025-05-03 02:15:58,992:INFO:Defining folds
2025-05-03 02:15:58,992:INFO:Declaring metric variables
2025-05-03 02:15:58,992:INFO:Importing untrained model
2025-05-03 02:15:58,993:INFO:Declaring custom model
2025-05-03 02:15:58,994:INFO:Logistic Regression Imported successfully
2025-05-03 02:15:58,995:INFO:Starting cross validation
2025-05-03 02:15:58,996:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:15:59,141:INFO:Calculating mean and std
2025-05-03 02:15:59,141:INFO:Creating metrics dataframe
2025-05-03 02:15:59,141:INFO:Finalizing model
2025-05-03 02:15:59,181:INFO:Uploading results into container
2025-05-03 02:15:59,181:INFO:Uploading model into container now
2025-05-03 02:15:59,181:INFO:_master_model_container: 12
2025-05-03 02:15:59,181:INFO:_display_container: 9
2025-05-03 02:15:59,181:INFO:LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:15:59,181:INFO:create_model() successfully completed......................................
2025-05-03 02:15:59,391:INFO:SubProcess create_model() end ==================================
2025-05-03 02:15:59,391:INFO:choose_better activated
2025-05-03 02:15:59,394:INFO:SubProcess create_model() called ==================================
2025-05-03 02:15:59,394:INFO:Initializing create_model()
2025-05-03 02:15:59,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:15:59,394:INFO:Checking exceptions
2025-05-03 02:15:59,396:INFO:Importing libraries
2025-05-03 02:15:59,396:INFO:Copying training dataset
2025-05-03 02:15:59,402:INFO:Defining folds
2025-05-03 02:15:59,402:INFO:Declaring metric variables
2025-05-03 02:15:59,402:INFO:Importing untrained model
2025-05-03 02:15:59,402:INFO:Declaring custom model
2025-05-03 02:15:59,402:INFO:Logistic Regression Imported successfully
2025-05-03 02:15:59,402:INFO:Starting cross validation
2025-05-03 02:15:59,402:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-05-03 02:15:59,577:INFO:Calculating mean and std
2025-05-03 02:15:59,577:INFO:Creating metrics dataframe
2025-05-03 02:15:59,581:INFO:Finalizing model
2025-05-03 02:15:59,621:INFO:Uploading results into container
2025-05-03 02:15:59,621:INFO:Uploading model into container now
2025-05-03 02:15:59,621:INFO:_master_model_container: 13
2025-05-03 02:15:59,621:INFO:_display_container: 10
2025-05-03 02:15:59,621:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:15:59,621:INFO:create_model() successfully completed......................................
2025-05-03 02:15:59,831:INFO:SubProcess create_model() end ==================================
2025-05-03 02:15:59,831:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for AUC is 0.5369
2025-05-03 02:15:59,836:INFO:LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for AUC is 0.5536
2025-05-03 02:15:59,836:INFO:LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-05-03 02:15:59,836:INFO:choose_better completed
2025-05-03 02:15:59,836:INFO:Creating Dashboard logs
2025-05-03 02:15:59,836:INFO:Model: Logistic Regression
2025-05-03 02:15:59,871:INFO:Logged params: {'C': 8.645, 'class_weight': {}, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:16:00,041:INFO:Initializing predict_model()
2025-05-03 02:16:00,045:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016502ABACB0>)
2025-05-03 02:16:00,045:INFO:Checking exceptions
2025-05-03 02:16:00,045:INFO:Preloading libraries
2025-05-03 02:16:00,663:INFO:_master_model_container: 13
2025-05-03 02:16:00,663:INFO:_display_container: 9
2025-05-03 02:16:00,668:INFO:LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-05-03 02:16:00,668:INFO:tune_model() successfully completed......................................
2025-05-03 02:16:00,983:INFO:gpu_param set to False
2025-05-03 02:16:01,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:01,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:01,173:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:01,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:01,177:INFO:Initializing predict_model()
2025-05-03 02:16:01,177:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016503451360>)
2025-05-03 02:16:01,177:INFO:Checking exceptions
2025-05-03 02:16:01,177:INFO:Preloading libraries
2025-05-03 02:16:01,507:INFO:Initializing plot_model()
2025-05-03 02:16:01,507:INFO:plot_model(plot=feature, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, system=True)
2025-05-03 02:16:01,507:INFO:Checking exceptions
2025-05-03 02:16:01,507:INFO:Preloading libraries
2025-05-03 02:16:01,507:INFO:Copying training dataset
2025-05-03 02:16:01,507:INFO:Plot type: feature
2025-05-03 02:16:01,561:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\pycaret\internal\pycaret_experiment\tabular_experiment.py:1845: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  plt.figure(figsize=(8, 5 * (n // 10)), dpi=_base_dpi * scale)

2025-05-03 02:16:01,721:INFO:Saving 'Feature Importance.png'
2025-05-03 02:16:01,879:INFO:Visual Rendered Successfully
2025-05-03 02:16:02,091:INFO:plot_model() successfully completed......................................
2025-05-03 02:16:02,111:INFO:Initializing plot_model()
2025-05-03 02:16:02,111:INFO:plot_model(plot=auc, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, system=True)
2025-05-03 02:16:02,111:INFO:Checking exceptions
2025-05-03 02:16:02,121:INFO:Preloading libraries
2025-05-03 02:16:02,121:INFO:Copying training dataset
2025-05-03 02:16:02,121:INFO:Plot type: auc
2025-05-03 02:16:02,264:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 02:16:02,421:INFO:Fitting Model
2025-05-03 02:16:02,451:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2025-05-03 02:16:02,453:INFO:Scoring test/hold-out set
2025-05-03 02:16:02,557:INFO:Saving 'AUC.png'
2025-05-03 02:16:02,972:INFO:Visual Rendered Successfully
2025-05-03 02:16:03,211:INFO:plot_model() successfully completed......................................
2025-05-03 02:16:03,234:INFO:Initializing plot_model()
2025-05-03 02:16:03,234:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, system=True)
2025-05-03 02:16:03,234:INFO:Checking exceptions
2025-05-03 02:16:03,236:INFO:Preloading libraries
2025-05-03 02:16:03,237:INFO:Copying training dataset
2025-05-03 02:16:03,237:INFO:Plot type: confusion_matrix
2025-05-03 02:16:03,343:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 02:16:03,486:INFO:Fitting Model
2025-05-03 02:16:03,486:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2025-05-03 02:16:03,486:INFO:Scoring test/hold-out set
2025-05-03 02:16:03,512:INFO:Saving 'Confusion Matrix.png'
2025-05-03 02:16:03,654:INFO:Visual Rendered Successfully
2025-05-03 02:16:03,891:INFO:plot_model() successfully completed......................................
2025-05-03 02:16:03,911:INFO:Initializing plot_model()
2025-05-03 02:16:03,911:INFO:plot_model(plot=pr, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, system=True)
2025-05-03 02:16:03,911:INFO:Checking exceptions
2025-05-03 02:16:03,915:INFO:Preloading libraries
2025-05-03 02:16:03,915:INFO:Copying training dataset
2025-05-03 02:16:03,915:INFO:Plot type: pr
2025-05-03 02:16:04,015:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 02:16:04,147:INFO:Fitting Model
2025-05-03 02:16:04,147:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2025-05-03 02:16:04,151:INFO:Scoring test/hold-out set
2025-05-03 02:16:04,176:INFO:Saving 'Precision Recall.png'
2025-05-03 02:16:04,386:INFO:Visual Rendered Successfully
2025-05-03 02:16:04,624:INFO:plot_model() successfully completed......................................
2025-05-03 02:16:04,641:INFO:Initializing plot_model()
2025-05-03 02:16:04,642:INFO:plot_model(plot=class_report, fold=None, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=True, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503272500>, system=True)
2025-05-03 02:16:04,642:INFO:Checking exceptions
2025-05-03 02:16:04,643:INFO:Preloading libraries
2025-05-03 02:16:04,643:INFO:Copying training dataset
2025-05-03 02:16:04,643:INFO:Plot type: class_report
2025-05-03 02:16:04,741:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\yellowbrick\base.py:111: UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail.
  self._fig = plt.gcf()

2025-05-03 02:16:04,871:INFO:Fitting Model
2025-05-03 02:16:04,871:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2025-05-03 02:16:04,871:INFO:Scoring test/hold-out set
2025-05-03 02:16:04,901:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-05-03 02:16:04,959:INFO:Saving 'Class Report.png'
2025-05-03 02:16:05,214:INFO:Visual Rendered Successfully
2025-05-03 02:16:05,483:INFO:plot_model() successfully completed......................................
2025-05-03 02:16:05,585:INFO:Initializing save_model()
2025-05-03 02:16:05,585:INFO:save_model(model=LogisticRegression(C=8.645, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=./automl_outputs\automl_1\models\tuned_lr_20250503_021605_1, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 Trans...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:16:05,585:INFO:Adding model into prep_pipe
2025-05-03 02:16:05,591:INFO:./automl_outputs\automl_1\models\tuned_lr_20250503_021605_1.pkl saved in current working directory
2025-05-03 02:16:05,623:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 Trans...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:16:05,623:INFO:save_model() successfully completed......................................
2025-05-03 02:16:27,349:INFO:PyCaret ClassificationExperiment
2025-05-03 02:16:27,351:INFO:Logging name: automl_bigdata_exp
2025-05-03 02:16:27,351:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-05-03 02:16:27,351:INFO:version 3.3.2
2025-05-03 02:16:27,351:INFO:Initializing setup()
2025-05-03 02:16:27,351:INFO:self.USI: 214c
2025-05-03 02:16:27,351:INFO:self._variable_keys: {'idx', 'log_plots_param', 'exp_id', 'X_train', 'is_multiclass', 'X', 'USI', 'exp_name_log', '_ml_usecase', 'fold_shuffle_param', 'y_test', 'logging_param', 'gpu_param', 'y_train', 'target_param', 'html_param', 'n_jobs_param', 'fold_groups_param', 'y', 'fold_generator', 'seed', 'fix_imbalance', 'memory', 'pipeline', 'data', 'X_test', '_available_plots', 'gpu_n_jobs_param'}
2025-05-03 02:16:27,351:INFO:Checking environment
2025-05-03 02:16:27,351:INFO:python_version: 3.10.11
2025-05-03 02:16:27,351:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 02:16:27,351:INFO:machine: AMD64
2025-05-03 02:16:27,351:INFO:platform: Windows-10-10.0.26100-SP0
2025-05-03 02:16:27,357:INFO:Memory: svmem(total=8425017344, available=569335808, percent=93.2, used=7855681536, free=569335808)
2025-05-03 02:16:27,359:INFO:Physical Core: 4
2025-05-03 02:16:27,359:INFO:Logical Core: 8
2025-05-03 02:16:27,359:INFO:Checking libraries
2025-05-03 02:16:27,359:INFO:System:
2025-05-03 02:16:27,359:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 02:16:27,359:INFO:executable: c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\Scripts\python.exe
2025-05-03 02:16:27,359:INFO:   machine: Windows-10-10.0.26100-SP0
2025-05-03 02:16:27,359:INFO:PyCaret required dependencies:
2025-05-03 02:16:27,359:INFO:                 pip: 23.0.1
2025-05-03 02:16:27,361:INFO:          setuptools: 65.5.0
2025-05-03 02:16:27,361:INFO:             pycaret: 3.3.2
2025-05-03 02:16:27,361:INFO:             IPython: 8.36.0
2025-05-03 02:16:27,361:INFO:          ipywidgets: 8.1.6
2025-05-03 02:16:27,361:INFO:                tqdm: 4.67.1
2025-05-03 02:16:27,361:INFO:               numpy: 1.26.4
2025-05-03 02:16:27,361:INFO:              pandas: 2.2.3
2025-05-03 02:16:27,361:INFO:              jinja2: 3.1.6
2025-05-03 02:16:27,361:INFO:               scipy: 1.11.4
2025-05-03 02:16:27,361:INFO:              joblib: 1.3.2
2025-05-03 02:16:27,361:INFO:             sklearn: 1.4.2
2025-05-03 02:16:27,361:INFO:                pyod: 2.0.4
2025-05-03 02:16:27,361:INFO:            imblearn: 0.13.0
2025-05-03 02:16:27,361:INFO:   category_encoders: 2.7.0
2025-05-03 02:16:27,361:INFO:            lightgbm: 4.6.0
2025-05-03 02:16:27,361:INFO:               numba: 0.61.0
2025-05-03 02:16:27,363:INFO:            requests: 2.32.3
2025-05-03 02:16:27,363:INFO:          matplotlib: 3.7.5
2025-05-03 02:16:27,363:INFO:          scikitplot: 0.3.7
2025-05-03 02:16:27,363:INFO:         yellowbrick: 1.5
2025-05-03 02:16:27,363:INFO:              plotly: 5.24.1
2025-05-03 02:16:27,363:INFO:    plotly-resampler: Not installed
2025-05-03 02:16:27,363:INFO:             kaleido: 0.2.1
2025-05-03 02:16:27,363:INFO:           schemdraw: 0.15
2025-05-03 02:16:27,363:INFO:         statsmodels: 0.14.4
2025-05-03 02:16:27,365:INFO:              sktime: 0.26.0
2025-05-03 02:16:27,365:INFO:               tbats: 1.1.3
2025-05-03 02:16:27,365:INFO:            pmdarima: 2.0.4
2025-05-03 02:16:27,365:INFO:              psutil: 7.0.0
2025-05-03 02:16:27,366:INFO:          markupsafe: 3.0.2
2025-05-03 02:16:27,366:INFO:             pickle5: Not installed
2025-05-03 02:16:27,366:INFO:         cloudpickle: 2.2.1
2025-05-03 02:16:27,366:INFO:         deprecation: 2.1.0
2025-05-03 02:16:27,366:INFO:              xxhash: 3.5.0
2025-05-03 02:16:27,366:INFO:           wurlitzer: Not installed
2025-05-03 02:16:27,366:INFO:PyCaret optional dependencies:
2025-05-03 02:16:27,366:INFO:                shap: 0.47.2
2025-05-03 02:16:27,366:INFO:           interpret: Not installed
2025-05-03 02:16:27,366:INFO:                umap: Not installed
2025-05-03 02:16:27,366:INFO:     ydata_profiling: 4.16.1
2025-05-03 02:16:27,366:INFO:  explainerdashboard: Not installed
2025-05-03 02:16:27,366:INFO:             autoviz: Not installed
2025-05-03 02:16:27,366:INFO:           fairlearn: Not installed
2025-05-03 02:16:27,368:INFO:          deepchecks: Not installed
2025-05-03 02:16:27,368:INFO:             xgboost: Not installed
2025-05-03 02:16:27,368:INFO:            catboost: Not installed
2025-05-03 02:16:27,368:INFO:              kmodes: Not installed
2025-05-03 02:16:27,368:INFO:             mlxtend: Not installed
2025-05-03 02:16:27,368:INFO:       statsforecast: Not installed
2025-05-03 02:16:27,368:INFO:        tune_sklearn: Not installed
2025-05-03 02:16:27,368:INFO:                 ray: Not installed
2025-05-03 02:16:27,368:INFO:            hyperopt: Not installed
2025-05-03 02:16:27,368:INFO:              optuna: 4.3.0
2025-05-03 02:16:27,368:INFO:               skopt: Not installed
2025-05-03 02:16:27,368:INFO:              mlflow: 2.22.0
2025-05-03 02:16:27,368:INFO:              gradio: Not installed
2025-05-03 02:16:27,368:INFO:             fastapi: 0.115.12
2025-05-03 02:16:27,370:INFO:             uvicorn: 0.34.2
2025-05-03 02:16:27,370:INFO:              m2cgen: Not installed
2025-05-03 02:16:27,370:INFO:           evidently: 0.7.3
2025-05-03 02:16:27,370:INFO:               fugue: Not installed
2025-05-03 02:16:27,370:INFO:           streamlit: Not installed
2025-05-03 02:16:27,370:INFO:             prophet: Not installed
2025-05-03 02:16:27,370:INFO:None
2025-05-03 02:16:27,371:INFO:Set up data.
2025-05-03 02:16:27,385:INFO:Set up folding strategy.
2025-05-03 02:16:27,385:INFO:Set up train/test split.
2025-05-03 02:16:27,397:INFO:Set up index.
2025-05-03 02:16:27,397:INFO:Assigning column types.
2025-05-03 02:16:27,406:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 02:16:27,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,525:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,624:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,624:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,624:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 02:16:27,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,831:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-05-03 02:16:27,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:27,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,046:INFO:Preparing preprocessing pipeline...
2025-05-03 02:16:28,046:INFO:Set up simple imputation.
2025-05-03 02:16:28,046:INFO:Set up encoding of ordinal features.
2025-05-03 02:16:28,051:INFO:Set up encoding of categorical features.
2025-05-03 02:16:28,051:INFO:Set up column name cleaning.
2025-05-03 02:16:28,111:INFO:Finished creating preprocessing pipeline.
2025-05-03 02:16:28,151:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:16:28,151:INFO:Creating final display dataframe.
2025-05-03 02:16:28,387:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target         Dropped_out
2                   Target type              Binary
3           Original data shape           (249, 17)
4        Transformed data shape            (249, 6)
5   Transformed train set shape            (174, 6)
6    Transformed test set shape             (75, 6)
7               Ignore features                  11
8              Numeric features                   4
9          Categorical features                   1
10     Rows with missing values               38.2%
11                   Preprocess                True
12              Imputation type              simple
13           Numeric imputation                mean
14       Categorical imputation                mode
15     Maximum one-hot encoding                  25
16              Encoding method                None
17               Fold Generator     StratifiedKFold
18                  Fold Number                   5
19                     CPU Jobs                  -1
20                      Use GPU               False
21               Log Experiment        MlflowLogger
22              Experiment Name  automl_bigdata_exp
23                          USI                214c
2025-05-03 02:16:28,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:16:28,619:INFO:Logging experiment in loggers
2025-05-03 02:16:28,764:INFO:SubProcess save_model() called ==================================
2025-05-03 02:16:28,841:INFO:Initializing save_model()
2025-05-03 02:16:28,841:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\nkluo\AppData\Local\Temp\tmprb5rk0ie\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:16:28,841:INFO:Adding model into prep_pipe
2025-05-03 02:16:28,841:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:16:28,844:INFO:C:\Users\nkluo\AppData\Local\Temp\tmprb5rk0ie\Transformation Pipeline.pkl saved in current working directory
2025-05-03 02:16:28,886:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:16:28,886:INFO:save_model() successfully completed......................................
2025-05-03 02:16:29,133:INFO:SubProcess save_model() end ==================================
2025-05-03 02:16:29,156:INFO:setup() successfully completed in 1.3s...............
2025-05-03 02:16:29,261:INFO:Initializing load_model()
2025-05-03 02:16:29,261:INFO:load_model(model_name=./automl_outputs\automl_1\models\tuned_lr_20250503_021605_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:16:29,327:INFO:Initializing finalize_model()
2025-05-03 02:16:29,327:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503913700>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-03 02:16:29,366:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:16:29,417:INFO:Initializing create_model()
2025-05-03 02:16:29,417:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016503913700>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:16:29,417:INFO:Checking exceptions
2025-05-03 02:16:29,419:INFO:Importing libraries
2025-05-03 02:16:29,419:INFO:Copying training dataset
2025-05-03 02:16:29,421:INFO:Defining folds
2025-05-03 02:16:29,421:INFO:Declaring metric variables
2025-05-03 02:16:29,421:INFO:Importing untrained model
2025-05-03 02:16:29,421:INFO:Declaring custom model
2025-05-03 02:16:29,447:INFO:Logistic Regression Imported successfully
2025-05-03 02:16:29,451:INFO:Cross validation set to False
2025-05-03 02:16:29,451:INFO:Fitting Model
2025-05-03 02:16:29,593:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:16:29,593:INFO:create_model() successfully completed......................................
2025-05-03 02:16:29,822:INFO:Creating Dashboard logs
2025-05-03 02:16:29,822:INFO:Model: Logistic Regression
2025-05-03 02:16:29,871:INFO:Logged params: {'C': 8.645, 'class_weight': {}, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:16:30,331:INFO:_master_model_container: 10
2025-05-03 02:16:30,331:INFO:_display_container: 7
2025-05-03 02:16:30,389:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:16:30,389:INFO:finalize_model() successfully completed......................................
2025-05-03 02:16:30,703:INFO:Initializing save_model()
2025-05-03 02:16:30,703:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=./automl_outputs\automl_1\models\final_lr_20250503_021630_1, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 Trans...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:16:30,703:INFO:Adding model into prep_pipe
2025-05-03 02:16:30,703:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:16:30,709:INFO:./automl_outputs\automl_1\models\final_lr_20250503_021630_1.pkl saved in current working directory
2025-05-03 02:16:30,741:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:16:30,741:INFO:save_model() successfully completed......................................
2025-05-03 02:17:33,662:INFO:PyCaret ClassificationExperiment
2025-05-03 02:17:33,662:INFO:Logging name: automl_bigdata_exp
2025-05-03 02:17:33,662:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-05-03 02:17:33,663:INFO:version 3.3.2
2025-05-03 02:17:33,663:INFO:Initializing setup()
2025-05-03 02:17:33,663:INFO:self.USI: 9168
2025-05-03 02:17:33,663:INFO:self._variable_keys: {'idx', 'log_plots_param', 'exp_id', 'X_train', 'is_multiclass', 'X', 'USI', 'exp_name_log', '_ml_usecase', 'fold_shuffle_param', 'y_test', 'logging_param', 'gpu_param', 'y_train', 'target_param', 'html_param', 'n_jobs_param', 'fold_groups_param', 'y', 'fold_generator', 'seed', 'fix_imbalance', 'memory', 'pipeline', 'data', 'X_test', '_available_plots', 'gpu_n_jobs_param'}
2025-05-03 02:17:33,663:INFO:Checking environment
2025-05-03 02:17:33,663:INFO:python_version: 3.10.11
2025-05-03 02:17:33,663:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 02:17:33,664:INFO:machine: AMD64
2025-05-03 02:17:33,664:INFO:platform: Windows-10-10.0.26100-SP0
2025-05-03 02:17:33,670:INFO:Memory: svmem(total=8425017344, available=550928384, percent=93.5, used=7874088960, free=550928384)
2025-05-03 02:17:33,670:INFO:Physical Core: 4
2025-05-03 02:17:33,670:INFO:Logical Core: 8
2025-05-03 02:17:33,671:INFO:Checking libraries
2025-05-03 02:17:33,671:INFO:System:
2025-05-03 02:17:33,671:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 02:17:33,672:INFO:executable: c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\Scripts\python.exe
2025-05-03 02:17:33,672:INFO:   machine: Windows-10-10.0.26100-SP0
2025-05-03 02:17:33,672:INFO:PyCaret required dependencies:
2025-05-03 02:17:33,672:INFO:                 pip: 23.0.1
2025-05-03 02:17:33,672:INFO:          setuptools: 65.5.0
2025-05-03 02:17:33,672:INFO:             pycaret: 3.3.2
2025-05-03 02:17:33,672:INFO:             IPython: 8.36.0
2025-05-03 02:17:33,672:INFO:          ipywidgets: 8.1.6
2025-05-03 02:17:33,673:INFO:                tqdm: 4.67.1
2025-05-03 02:17:33,673:INFO:               numpy: 1.26.4
2025-05-03 02:17:33,673:INFO:              pandas: 2.2.3
2025-05-03 02:17:33,673:INFO:              jinja2: 3.1.6
2025-05-03 02:17:33,673:INFO:               scipy: 1.11.4
2025-05-03 02:17:33,673:INFO:              joblib: 1.3.2
2025-05-03 02:17:33,673:INFO:             sklearn: 1.4.2
2025-05-03 02:17:33,673:INFO:                pyod: 2.0.4
2025-05-03 02:17:33,674:INFO:            imblearn: 0.13.0
2025-05-03 02:17:33,674:INFO:   category_encoders: 2.7.0
2025-05-03 02:17:33,674:INFO:            lightgbm: 4.6.0
2025-05-03 02:17:33,674:INFO:               numba: 0.61.0
2025-05-03 02:17:33,674:INFO:            requests: 2.32.3
2025-05-03 02:17:33,674:INFO:          matplotlib: 3.7.5
2025-05-03 02:17:33,675:INFO:          scikitplot: 0.3.7
2025-05-03 02:17:33,675:INFO:         yellowbrick: 1.5
2025-05-03 02:17:33,675:INFO:              plotly: 5.24.1
2025-05-03 02:17:33,675:INFO:    plotly-resampler: Not installed
2025-05-03 02:17:33,675:INFO:             kaleido: 0.2.1
2025-05-03 02:17:33,676:INFO:           schemdraw: 0.15
2025-05-03 02:17:33,677:INFO:         statsmodels: 0.14.4
2025-05-03 02:17:33,677:INFO:              sktime: 0.26.0
2025-05-03 02:17:33,677:INFO:               tbats: 1.1.3
2025-05-03 02:17:33,677:INFO:            pmdarima: 2.0.4
2025-05-03 02:17:33,677:INFO:              psutil: 7.0.0
2025-05-03 02:17:33,677:INFO:          markupsafe: 3.0.2
2025-05-03 02:17:33,677:INFO:             pickle5: Not installed
2025-05-03 02:17:33,677:INFO:         cloudpickle: 2.2.1
2025-05-03 02:17:33,678:INFO:         deprecation: 2.1.0
2025-05-03 02:17:33,678:INFO:              xxhash: 3.5.0
2025-05-03 02:17:33,678:INFO:           wurlitzer: Not installed
2025-05-03 02:17:33,678:INFO:PyCaret optional dependencies:
2025-05-03 02:17:33,678:INFO:                shap: 0.47.2
2025-05-03 02:17:33,678:INFO:           interpret: Not installed
2025-05-03 02:17:33,678:INFO:                umap: Not installed
2025-05-03 02:17:33,679:INFO:     ydata_profiling: 4.16.1
2025-05-03 02:17:33,679:INFO:  explainerdashboard: Not installed
2025-05-03 02:17:33,679:INFO:             autoviz: Not installed
2025-05-03 02:17:33,679:INFO:           fairlearn: Not installed
2025-05-03 02:17:33,679:INFO:          deepchecks: Not installed
2025-05-03 02:17:33,679:INFO:             xgboost: Not installed
2025-05-03 02:17:33,679:INFO:            catboost: Not installed
2025-05-03 02:17:33,680:INFO:              kmodes: Not installed
2025-05-03 02:17:33,680:INFO:             mlxtend: Not installed
2025-05-03 02:17:33,680:INFO:       statsforecast: Not installed
2025-05-03 02:17:33,680:INFO:        tune_sklearn: Not installed
2025-05-03 02:17:33,680:INFO:                 ray: Not installed
2025-05-03 02:17:33,681:INFO:            hyperopt: Not installed
2025-05-03 02:17:33,681:INFO:              optuna: 4.3.0
2025-05-03 02:17:33,681:INFO:               skopt: Not installed
2025-05-03 02:17:33,681:INFO:              mlflow: 2.22.0
2025-05-03 02:17:33,681:INFO:              gradio: Not installed
2025-05-03 02:17:33,681:INFO:             fastapi: 0.115.12
2025-05-03 02:17:33,681:INFO:             uvicorn: 0.34.2
2025-05-03 02:17:33,681:INFO:              m2cgen: Not installed
2025-05-03 02:17:33,681:INFO:           evidently: 0.7.3
2025-05-03 02:17:33,681:INFO:               fugue: Not installed
2025-05-03 02:17:33,681:INFO:           streamlit: Not installed
2025-05-03 02:17:33,682:INFO:             prophet: Not installed
2025-05-03 02:17:33,682:INFO:None
2025-05-03 02:17:33,682:INFO:Set up data.
2025-05-03 02:17:33,689:INFO:Set up folding strategy.
2025-05-03 02:17:33,689:INFO:Set up train/test split.
2025-05-03 02:17:33,693:INFO:Set up index.
2025-05-03 02:17:33,693:INFO:Assigning column types.
2025-05-03 02:17:33,701:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 02:17:33,804:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:33,804:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:33,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:33,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:33,911:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 02:17:34,011:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,201:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,201:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-05-03 02:17:34,311:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,411:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,418:INFO:Preparing preprocessing pipeline...
2025-05-03 02:17:34,418:INFO:Set up simple imputation.
2025-05-03 02:17:34,421:INFO:Set up encoding of ordinal features.
2025-05-03 02:17:34,427:INFO:Set up encoding of categorical features.
2025-05-03 02:17:34,427:INFO:Set up column name cleaning.
2025-05-03 02:17:34,503:INFO:Finished creating preprocessing pipeline.
2025-05-03 02:17:34,541:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:17:34,541:INFO:Creating final display dataframe.
2025-05-03 02:17:34,761:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target         Dropped_out
2                   Target type              Binary
3           Original data shape           (249, 17)
4        Transformed data shape            (249, 6)
5   Transformed train set shape            (174, 6)
6    Transformed test set shape             (75, 6)
7               Ignore features                  11
8              Numeric features                   4
9          Categorical features                   1
10     Rows with missing values               38.2%
11                   Preprocess                True
12              Imputation type              simple
13           Numeric imputation                mean
14       Categorical imputation                mode
15     Maximum one-hot encoding                  25
16              Encoding method                None
17               Fold Generator     StratifiedKFold
18                  Fold Number                   5
19                     CPU Jobs                  -1
20                      Use GPU               False
21               Log Experiment        MlflowLogger
22              Experiment Name  automl_bigdata_exp
23                          USI                9168
2025-05-03 02:17:34,862:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,862:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,953:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:17:34,953:INFO:Logging experiment in loggers
2025-05-03 02:17:35,093:INFO:SubProcess save_model() called ==================================
2025-05-03 02:17:35,171:INFO:Initializing save_model()
2025-05-03 02:17:35,171:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\nkluo\AppData\Local\Temp\tmp8b0fxt53\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:17:35,172:INFO:Adding model into prep_pipe
2025-05-03 02:17:35,172:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:17:35,186:INFO:C:\Users\nkluo\AppData\Local\Temp\tmp8b0fxt53\Transformation Pipeline.pkl saved in current working directory
2025-05-03 02:17:35,229:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:17:35,229:INFO:save_model() successfully completed......................................
2025-05-03 02:17:35,528:INFO:SubProcess save_model() end ==================================
2025-05-03 02:17:35,545:INFO:setup() successfully completed in 1.33s...............
2025-05-03 02:17:35,656:INFO:Initializing load_model()
2025-05-03 02:17:35,656:INFO:load_model(model_name=./automl_outputs\automl_1\models\tuned_lr_20250503_021605_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:17:35,723:INFO:Initializing finalize_model()
2025-05-03 02:17:35,723:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000165032477C0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-03 02:17:35,773:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:17:35,823:INFO:Initializing create_model()
2025-05-03 02:17:35,823:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000165032477C0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:17:35,823:INFO:Checking exceptions
2025-05-03 02:17:35,825:INFO:Importing libraries
2025-05-03 02:17:35,825:INFO:Copying training dataset
2025-05-03 02:17:35,826:INFO:Defining folds
2025-05-03 02:17:35,826:INFO:Declaring metric variables
2025-05-03 02:17:35,827:INFO:Importing untrained model
2025-05-03 02:17:35,827:INFO:Declaring custom model
2025-05-03 02:17:35,851:INFO:Logistic Regression Imported successfully
2025-05-03 02:17:35,851:INFO:Cross validation set to False
2025-05-03 02:17:35,851:INFO:Fitting Model
2025-05-03 02:17:35,973:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:17:35,973:INFO:create_model() successfully completed......................................
2025-05-03 02:17:36,197:INFO:Creating Dashboard logs
2025-05-03 02:17:36,197:INFO:Model: Logistic Regression
2025-05-03 02:17:36,239:INFO:Logged params: {'C': 8.645, 'class_weight': {}, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:17:36,693:INFO:_master_model_container: 10
2025-05-03 02:17:36,693:INFO:_display_container: 7
2025-05-03 02:17:36,741:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:17:36,742:INFO:finalize_model() successfully completed......................................
2025-05-03 02:17:37,061:INFO:Initializing save_model()
2025-05-03 02:17:37,061:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=./automl_outputs\automl_1\models\final_lr_20250503_021736_1, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 Trans...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:17:37,065:INFO:Adding model into prep_pipe
2025-05-03 02:17:37,065:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:17:37,071:INFO:./automl_outputs\automl_1\models\final_lr_20250503_021736_1.pkl saved in current working directory
2025-05-03 02:17:37,108:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:17:37,111:INFO:save_model() successfully completed......................................
2025-05-03 02:18:42,351:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:18:42,351:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:18:42,351:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:18:42,351:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:18:44,176:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:19:29,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:19:29,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:19:29,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:19:29,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:19:30,381:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:19:50,541:INFO:PyCaret ClassificationExperiment
2025-05-03 02:19:50,541:INFO:Logging name: automl_bigdata_exp
2025-05-03 02:19:50,541:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-05-03 02:19:50,541:INFO:version 3.3.2
2025-05-03 02:19:50,541:INFO:Initializing setup()
2025-05-03 02:19:50,541:INFO:self.USI: c334
2025-05-03 02:19:50,541:INFO:self._variable_keys: {'seed', 'y', 'fold_generator', 'X_train', 'is_multiclass', 'logging_param', 'fix_imbalance', 'y_test', 'fold_groups_param', 'idx', 'memory', '_ml_usecase', 'target_param', 'n_jobs_param', 'log_plots_param', '_available_plots', 'y_train', 'exp_id', 'data', 'USI', 'pipeline', 'html_param', 'X_test', 'gpu_n_jobs_param', 'X', 'fold_shuffle_param', 'gpu_param', 'exp_name_log'}
2025-05-03 02:19:50,541:INFO:Checking environment
2025-05-03 02:19:50,541:INFO:python_version: 3.10.11
2025-05-03 02:19:50,541:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2025-05-03 02:19:50,541:INFO:machine: AMD64
2025-05-03 02:19:50,555:INFO:platform: Windows-10-10.0.26100-SP0
2025-05-03 02:19:50,561:INFO:Memory: svmem(total=8425017344, available=1619189760, percent=80.8, used=6805827584, free=1619189760)
2025-05-03 02:19:50,561:INFO:Physical Core: 4
2025-05-03 02:19:50,561:INFO:Logical Core: 8
2025-05-03 02:19:50,561:INFO:Checking libraries
2025-05-03 02:19:50,561:INFO:System:
2025-05-03 02:19:50,561:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2025-05-03 02:19:50,561:INFO:executable: c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\Scripts\python.exe
2025-05-03 02:19:50,561:INFO:   machine: Windows-10-10.0.26100-SP0
2025-05-03 02:19:50,561:INFO:PyCaret required dependencies:
2025-05-03 02:19:50,561:INFO:                 pip: 23.0.1
2025-05-03 02:19:50,561:INFO:          setuptools: 65.5.0
2025-05-03 02:19:50,561:INFO:             pycaret: 3.3.2
2025-05-03 02:19:50,561:INFO:             IPython: 8.36.0
2025-05-03 02:19:50,561:INFO:          ipywidgets: 8.1.6
2025-05-03 02:19:50,561:INFO:                tqdm: 4.67.1
2025-05-03 02:19:50,561:INFO:               numpy: 1.26.4
2025-05-03 02:19:50,561:INFO:              pandas: 2.2.3
2025-05-03 02:19:50,561:INFO:              jinja2: 3.1.6
2025-05-03 02:19:50,561:INFO:               scipy: 1.11.4
2025-05-03 02:19:50,561:INFO:              joblib: 1.3.2
2025-05-03 02:19:50,561:INFO:             sklearn: 1.4.2
2025-05-03 02:19:50,561:INFO:                pyod: 2.0.4
2025-05-03 02:19:50,561:INFO:            imblearn: 0.13.0
2025-05-03 02:19:50,561:INFO:   category_encoders: 2.7.0
2025-05-03 02:19:50,561:INFO:            lightgbm: 4.6.0
2025-05-03 02:19:50,561:INFO:               numba: 0.61.0
2025-05-03 02:19:50,561:INFO:            requests: 2.32.3
2025-05-03 02:19:50,561:INFO:          matplotlib: 3.7.5
2025-05-03 02:19:50,561:INFO:          scikitplot: 0.3.7
2025-05-03 02:19:50,561:INFO:         yellowbrick: 1.5
2025-05-03 02:19:50,561:INFO:              plotly: 5.24.1
2025-05-03 02:19:50,561:INFO:    plotly-resampler: Not installed
2025-05-03 02:19:50,561:INFO:             kaleido: 0.2.1
2025-05-03 02:19:50,561:INFO:           schemdraw: 0.15
2025-05-03 02:19:50,561:INFO:         statsmodels: 0.14.4
2025-05-03 02:19:50,561:INFO:              sktime: 0.26.0
2025-05-03 02:19:50,561:INFO:               tbats: 1.1.3
2025-05-03 02:19:50,561:INFO:            pmdarima: 2.0.4
2025-05-03 02:19:50,561:INFO:              psutil: 7.0.0
2025-05-03 02:19:50,561:INFO:          markupsafe: 3.0.2
2025-05-03 02:19:50,561:INFO:             pickle5: Not installed
2025-05-03 02:19:50,561:INFO:         cloudpickle: 2.2.1
2025-05-03 02:19:50,561:INFO:         deprecation: 2.1.0
2025-05-03 02:19:50,561:INFO:              xxhash: 3.5.0
2025-05-03 02:19:50,561:INFO:           wurlitzer: Not installed
2025-05-03 02:19:50,561:INFO:PyCaret optional dependencies:
2025-05-03 02:19:50,576:INFO:                shap: 0.47.2
2025-05-03 02:19:50,581:INFO:           interpret: Not installed
2025-05-03 02:19:50,581:INFO:                umap: Not installed
2025-05-03 02:19:50,581:INFO:     ydata_profiling: 4.16.1
2025-05-03 02:19:50,581:INFO:  explainerdashboard: Not installed
2025-05-03 02:19:50,581:INFO:             autoviz: Not installed
2025-05-03 02:19:50,581:INFO:           fairlearn: Not installed
2025-05-03 02:19:50,581:INFO:          deepchecks: Not installed
2025-05-03 02:19:50,581:INFO:             xgboost: Not installed
2025-05-03 02:19:50,581:INFO:            catboost: Not installed
2025-05-03 02:19:50,581:INFO:              kmodes: Not installed
2025-05-03 02:19:50,581:INFO:             mlxtend: Not installed
2025-05-03 02:19:50,581:INFO:       statsforecast: Not installed
2025-05-03 02:19:50,581:INFO:        tune_sklearn: Not installed
2025-05-03 02:19:50,581:INFO:                 ray: Not installed
2025-05-03 02:19:50,581:INFO:            hyperopt: Not installed
2025-05-03 02:19:50,581:INFO:              optuna: 4.3.0
2025-05-03 02:19:50,581:INFO:               skopt: Not installed
2025-05-03 02:19:50,581:INFO:              mlflow: 2.22.0
2025-05-03 02:19:50,581:INFO:              gradio: Not installed
2025-05-03 02:19:50,581:INFO:             fastapi: 0.115.12
2025-05-03 02:19:50,581:INFO:             uvicorn: 0.34.2
2025-05-03 02:19:50,581:INFO:              m2cgen: Not installed
2025-05-03 02:19:50,581:INFO:           evidently: 0.7.3
2025-05-03 02:19:50,581:INFO:               fugue: Not installed
2025-05-03 02:19:50,581:INFO:           streamlit: Not installed
2025-05-03 02:19:50,581:INFO:             prophet: Not installed
2025-05-03 02:19:50,581:INFO:None
2025-05-03 02:19:50,581:INFO:Set up data.
2025-05-03 02:19:50,585:INFO:Set up folding strategy.
2025-05-03 02:19:50,585:INFO:Set up train/test split.
2025-05-03 02:19:50,593:INFO:Set up index.
2025-05-03 02:19:50,593:INFO:Assigning column types.
2025-05-03 02:19:50,601:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-05-03 02:19:50,693:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:50,693:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:50,792:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:50,792:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:50,792:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-05-03 02:19:50,961:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:50,961:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,061:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,061:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,061:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-05-03 02:19:51,161:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,262:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,262:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,262:INFO:Preparing preprocessing pipeline...
2025-05-03 02:19:51,262:INFO:Set up simple imputation.
2025-05-03 02:19:51,262:INFO:Set up encoding of ordinal features.
2025-05-03 02:19:51,270:INFO:Set up encoding of categorical features.
2025-05-03 02:19:51,271:INFO:Set up column name cleaning.
2025-05-03 02:19:51,331:INFO:Finished creating preprocessing pipeline.
2025-05-03 02:19:51,369:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:19:51,369:INFO:Creating final display dataframe.
2025-05-03 02:19:51,595:INFO:Setup _display_container:                     Description               Value
0                    Session id                   1
1                        Target         Dropped_out
2                   Target type              Binary
3           Original data shape           (249, 17)
4        Transformed data shape            (249, 6)
5   Transformed train set shape            (174, 6)
6    Transformed test set shape             (75, 6)
7               Ignore features                  11
8              Numeric features                   4
9          Categorical features                   1
10     Rows with missing values               38.2%
11                   Preprocess                True
12              Imputation type              simple
13           Numeric imputation                mean
14       Categorical imputation                mode
15     Maximum one-hot encoding                  25
16              Encoding method                None
17               Fold Generator     StratifiedKFold
18                  Fold Number                   5
19                     CPU Jobs                  -1
20                      Use GPU               False
21               Log Experiment        MlflowLogger
22              Experiment Name  automl_bigdata_exp
23                          USI                c334
2025-05-03 02:19:51,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,726:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,834:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-05-03 02:19:51,841:INFO:Logging experiment in loggers
2025-05-03 02:19:51,991:INFO:SubProcess save_model() called ==================================
2025-05-03 02:19:52,072:INFO:Initializing save_model()
2025-05-03 02:19:52,072:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\nkluo\AppData\Local\Temp\tmp0113926y\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:19:52,075:INFO:Adding model into prep_pipe
2025-05-03 02:19:52,075:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:19:52,081:INFO:C:\Users\nkluo\AppData\Local\Temp\tmp0113926y\Transformation Pipeline.pkl saved in current working directory
2025-05-03 02:19:52,121:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-05-03 02:19:52,121:INFO:save_model() successfully completed......................................
2025-05-03 02:19:52,349:INFO:SubProcess save_model() end ==================================
2025-05-03 02:19:52,372:INFO:setup() successfully completed in 1.33s...............
2025-05-03 02:19:52,452:INFO:Initializing load_model()
2025-05-03 02:19:52,453:INFO:load_model(model_name=./automl_outputs\automl_1\models\tuned_lr_20250503_021605_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:19:52,614:INFO:Initializing finalize_model()
2025-05-03 02:19:52,614:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7C1EE9630>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-05-03 02:19:52,793:INFO:Finalizing Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:19:52,907:INFO:Initializing create_model()
2025-05-03 02:19:52,908:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7C1EE9630>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-05-03 02:19:52,908:INFO:Checking exceptions
2025-05-03 02:19:52,911:INFO:Importing libraries
2025-05-03 02:19:52,912:INFO:Copying training dataset
2025-05-03 02:19:52,913:INFO:Defining folds
2025-05-03 02:19:52,913:INFO:Declaring metric variables
2025-05-03 02:19:52,914:INFO:Importing untrained model
2025-05-03 02:19:52,914:INFO:Declaring custom model
2025-05-03 02:19:52,968:INFO:Logistic Regression Imported successfully
2025-05-03 02:19:52,972:INFO:Cross validation set to False
2025-05-03 02:19:52,972:INFO:Fitting Model
2025-05-03 02:19:53,119:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:19:53,119:INFO:create_model() successfully completed......................................
2025-05-03 02:19:53,346:INFO:Creating Dashboard logs
2025-05-03 02:19:53,348:INFO:Model: Logistic Regression
2025-05-03 02:19:53,385:INFO:Logged params: {'C': 8.645, 'class_weight': {}, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-05-03 02:19:53,551:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-05-03 02:19:53,871:INFO:_master_model_container: 10
2025-05-03 02:19:53,871:INFO:_display_container: 7
2025-05-03 02:19:53,921:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:19:53,921:INFO:finalize_model() successfully completed......................................
2025-05-03 02:19:54,277:INFO:Initializing save_model()
2025-05-03 02:19:54,279:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=./automl_outputs\automl_1\models\final_lr_20250503_021954_1, prep_pipe_=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 Trans...
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-05-03 02:19:54,280:INFO:Adding model into prep_pipe
2025-05-03 02:19:54,280:WARNING:Only Model saved as it was a pipeline.
2025-05-03 02:19:54,291:INFO:./automl_outputs\automl_1\models\final_lr_20250503_021954_1.pkl saved in current working directory
2025-05-03 02:19:54,334:INFO:Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strateg...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=1,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-05-03 02:19:54,334:INFO:save_model() successfully completed......................................
2025-05-03 02:20:12,817:INFO:Initializing load_model()
2025-05-03 02:20:12,817:INFO:load_model(model_name=./automl_outputs\automl_1\models\final_lr_20250503_021954_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:20:12,997:INFO:Initializing predict_model()
2025-05-03 02:20:12,997:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7C1EE9630>, estimator=Pipeline(memory=FastMemory(location=C:\Users\nkluo\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Child_Gender'],
                                    transformer=SimpleImputer(strategy='most...
                 TransformerWrapper(include=['Child_Gender'],
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, max_iter=1000,
                                    random_state=1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A7C2365870>)
2025-05-03 02:20:12,997:INFO:Checking exceptions
2025-05-03 02:20:12,997:INFO:Preloading libraries
2025-05-03 02:20:12,997:INFO:Set up data.
2025-05-03 02:20:13,003:INFO:Set up index.
2025-05-03 02:31:40,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:40,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:40,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:40,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:41,891:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:31:59,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:59,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:59,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:31:59,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:32:01,256:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:32:22,989:INFO:Initializing load_model()
2025-05-03 02:32:22,991:INFO:load_model(model_name=./automl_outputs\automl_1\models\final_lr_20250503_021954_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:32:23,340:INFO:Initializing predict_model()
2025-05-03 02:32:23,340:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024C545162F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Child_Gender'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 Transf...Gender'],
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, max_iter=1000,
                                    random_state=1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024C54A3A830>)
2025-05-03 02:32:23,341:INFO:Checking exceptions
2025-05-03 02:32:23,341:INFO:Preloading libraries
2025-05-03 02:32:23,342:INFO:Set up data.
2025-05-03 02:32:23,352:INFO:Set up index.
2025-05-03 02:34:20,622:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:20,622:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:20,622:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:20,622:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:22,396:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:34:38,718:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:38,718:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:38,718:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:38,718:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:34:40,411:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:35:48,145:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:35:48,147:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:35:48,147:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:35:48,147:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:35:49,572:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:36:12,145:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:36:12,145:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:36:12,145:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:36:12,145:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:36:13,415:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:37:05,941:INFO:Initializing load_model()
2025-05-03 02:37:05,941:INFO:load_model(model_name=./automl_outputs\automl_1\models\final_lr_20250503_021954_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:37:06,211:INFO:Initializing predict_model()
2025-05-03 02:37:06,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022472D09CC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Child_Gender'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 Transf...Gender'],
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, max_iter=1000,
                                    random_state=1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002247321A830>)
2025-05-03 02:37:06,211:INFO:Checking exceptions
2025-05-03 02:37:06,211:INFO:Preloading libraries
2025-05-03 02:37:06,211:INFO:Set up data.
2025-05-03 02:37:06,219:INFO:Set up index.
2025-05-03 02:38:27,895:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:27,895:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:27,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:27,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:29,130:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:38:42,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:42,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:42,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:42,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:38:44,252:WARNING:c:\LKN\Grab-Tech-Bootcamp\ML\automl\venv\lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-05-03 02:39:01,317:INFO:Initializing load_model()
2025-05-03 02:39:01,317:INFO:load_model(model_name=./automl_outputs\automl_1\models\final_lr_20250503_021954_1, platform=None, authentication=None, verbose=False)
2025-05-03 02:39:01,523:INFO:Initializing predict_model()
2025-05-03 02:39:01,523:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029FD09BDCF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Lack_of_School_Material',
                                             'Lack _of _School_Fees',
                                             'Job_opportunity', 'Pregnancy'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Child_Gender'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 Transf...Gender'],
                                    transformer=OrdinalEncoder(cols=['Child_Gender'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Child_Gender',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 LogisticRegression(C=8.645, class_weight={}, max_iter=1000,
                                    random_state=1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029FD0EDA8C0>)
2025-05-03 02:39:01,523:INFO:Checking exceptions
2025-05-03 02:39:01,523:INFO:Preloading libraries
2025-05-03 02:39:01,523:INFO:Set up data.
2025-05-03 02:39:01,531:INFO:Set up index.
2025-05-03 02:41:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:41:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:41:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-03 02:41:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
